/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


"use strict";
var ts = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };

  // src/compiler/corePublic.ts
  var versionMajorMinor, version, Comparison;
  var init_corePublic = __esm({
    "src/compiler/corePublic.ts"() {
      "use strict";
      versionMajorMinor = "5.4";
      version = "5.4.5";
      Comparison = /* @__PURE__ */ ((Comparison3) => {
        Comparison3[Comparison3["LessThan"] = -1] = "LessThan";
        Comparison3[Comparison3["EqualTo"] = 0] = "EqualTo";
        Comparison3[Comparison3["GreaterThan"] = 1] = "GreaterThan";
        return Comparison3;
      })(Comparison || {});
    }
  });

  // src/compiler/core.ts
  function length(array) {
    return array ? array.length : 0;
  }
  function forEach(array, callback) {
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const result = callback(array[i], i);
        if (result) {
          return result;
        }
      }
    }
    return void 0;
  }
  function forEachRight(array, callback) {
    if (array) {
      for (let i = array.length - 1; i >= 0; i--) {
        const result = callback(array[i], i);
        if (result) {
          return result;
        }
      }
    }
    return void 0;
  }
  function firstDefined(array, callback) {
    if (array === void 0) {
      return void 0;
    }
    for (let i = 0; i < array.length; i++) {
      const result = callback(array[i], i);
      if (result !== void 0) {
        return result;
      }
    }
    return void 0;
  }
  function firstDefinedIterator(iter, callback) {
    for (const value of iter) {
      const result = callback(value);
      if (result !== void 0) {
        return result;
      }
    }
    return void 0;
  }
  function reduceLeftIterator(iterator, f, initial) {
    let result = initial;
    if (iterator) {
      let pos = 0;
      for (const value of iterator) {
        result = f(result, value, pos);
        pos++;
      }
    }
    return result;
  }
  function zipWith(arrayA, arrayB, callback) {
    const result = [];
    Debug.assertEqual(arrayA.length, arrayB.length);
    for (let i = 0; i < arrayA.length; i++) {
      result.push(callback(arrayA[i], arrayB[i], i));
    }
    return result;
  }
  function intersperse(input, element) {
    if (input.length <= 1) {
      return input;
    }
    const result = [];
    for (let i = 0, n = input.length; i < n; i++) {
      if (i)
        result.push(element);
      result.push(input[i]);
    }
    return result;
  }
  function every(array, callback) {
    if (array) {
      for (let i = 0; i < array.length; i++) {
        if (!callback(array[i], i)) {
          return false;
        }
      }
    }
    return true;
  }
  function find(array, predicate, startIndex) {
    if (array === void 0)
      return void 0;
    for (let i = startIndex ?? 0; i < array.length; i++) {
      const value = array[i];
      if (predicate(value, i)) {
        return value;
      }
    }
    return void 0;
  }
  function findLast(array, predicate, startIndex) {
    if (array === void 0)
      return void 0;
    for (let i = startIndex ?? array.length - 1; i >= 0; i--) {
      const value = array[i];
      if (predicate(value, i)) {
        return value;
      }
    }
    return void 0;
  }
  function findIndex(array, predicate, startIndex) {
    if (array === void 0)
      return -1;
    for (let i = startIndex ?? 0; i < array.length; i++) {
      if (predicate(array[i], i)) {
        return i;
      }
    }
    return -1;
  }
  function findLastIndex(array, predicate, startIndex) {
    if (array === void 0)
      return -1;
    for (let i = startIndex ?? array.length - 1; i >= 0; i--) {
      if (predicate(array[i], i)) {
        return i;
      }
    }
    return -1;
  }
  function findMap(array, callback) {
    for (let i = 0; i < array.length; i++) {
      const result = callback(array[i], i);
      if (result) {
        return result;
      }
    }
    return Debug.fail();
  }
  function contains(array, value, equalityComparer = equateValues) {
    if (array) {
      for (const v of array) {
        if (equalityComparer(v, value)) {
          return true;
        }
      }
    }
    return false;
  }
  function arraysEqual(a, b, equalityComparer = equateValues) {
    return a.length === b.length && a.every((x, i) => equalityComparer(x, b[i]));
  }
  function indexOfAnyCharCode(text, charCodes, start) {
    for (let i = start || 0; i < text.length; i++) {
      if (contains(charCodes, text.charCodeAt(i))) {
        return i;
      }
    }
    return -1;
  }
  function countWhere(array, predicate) {
    let count = 0;
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const v = array[i];
        if (predicate(v, i)) {
          count++;
        }
      }
    }
    return count;
  }
  function filter(array, f) {
    if (array) {
      const len = array.length;
      let i = 0;
      while (i < len && f(array[i]))
        i++;
      if (i < len) {
        const result = array.slice(0, i);
        i++;
        while (i < len) {
          const item = array[i];
          if (f(item)) {
            result.push(item);
          }
          i++;
        }
        return result;
      }
    }
    return array;
  }
  function filterMutate(array, f) {
    let outIndex = 0;
    for (let i = 0; i < array.length; i++) {
      if (f(array[i], i, array)) {
        array[outIndex] = array[i];
        outIndex++;
      }
    }
    array.length = outIndex;
  }
  function clear(array) {
    array.length = 0;
  }
  function map(array, f) {
    let result;
    if (array) {
      result = [];
      for (let i = 0; i < array.length; i++) {
        result.push(f(array[i], i));
      }
    }
    return result;
  }
  function* mapIterator(iter, mapFn) {
    for (const x of iter) {
      yield mapFn(x);
    }
  }
  function sameMap(array, f) {
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const item = array[i];
        const mapped = f(item, i);
        if (item !== mapped) {
          const result = array.slice(0, i);
          result.push(mapped);
          for (i++; i < array.length; i++) {
            result.push(f(array[i], i));
          }
          return result;
        }
      }
    }
    return array;
  }
  function flatten(array) {
    const result = [];
    for (const v of array) {
      if (v) {
        if (isArray(v)) {
          addRange(result, v);
        } else {
          result.push(v);
        }
      }
    }
    return result;
  }
  function flatMap(array, mapfn) {
    let result;
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const v = mapfn(array[i], i);
        if (v) {
          if (isArray(v)) {
            result = addRange(result, v);
          } else {
            result = append(result, v);
          }
        }
      }
    }
    return result || emptyArray;
  }
  function flatMapToMutable(array, mapfn) {
    const result = [];
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const v = mapfn(array[i], i);
        if (v) {
          if (isArray(v)) {
            addRange(result, v);
          } else {
            result.push(v);
          }
        }
      }
    }
    return result;
  }
  function* flatMapIterator(iter, mapfn) {
    for (const x of iter) {
      const iter2 = mapfn(x);
      if (!iter2)
        continue;
      yield* iter2;
    }
  }
  function sameFlatMap(array, mapfn) {
    let result;
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const item = array[i];
        const mapped = mapfn(item, i);
        if (result || item !== mapped || isArray(mapped)) {
          if (!result) {
            result = array.slice(0, i);
          }
          if (isArray(mapped)) {
            addRange(result, mapped);
          } else {
            result.push(mapped);
          }
        }
      }
    }
    return result || array;
  }
  function mapAllOrFail(array, mapFn) {
    const result = [];
    for (let i = 0; i < array.length; i++) {
      const mapped = mapFn(array[i], i);
      if (mapped === void 0) {
        return void 0;
      }
      result.push(mapped);
    }
    return result;
  }
  function mapDefined(array, mapFn) {
    const result = [];
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const mapped = mapFn(array[i], i);
        if (mapped !== void 0) {
          result.push(mapped);
        }
      }
    }
    return result;
  }
  function* mapDefinedIterator(iter, mapFn) {
    for (const x of iter) {
      const value = mapFn(x);
      if (value !== void 0) {
        yield value;
      }
    }
  }
  function mapDefinedEntries(map2, f) {
    if (!map2) {
      return void 0;
    }
    const result = /* @__PURE__ */ new Map();
    map2.forEach((value, key) => {
      const entry = f(key, value);
      if (entry !== void 0) {
        const [newKey, newValue] = entry;
        if (newKey !== void 0 && newValue !== void 0) {
          result.set(newKey, newValue);
        }
      }
    });
    return result;
  }
  function getOrUpdate(map2, key, callback) {
    if (map2.has(key)) {
      return map2.get(key);
    }
    const value = callback();
    map2.set(key, value);
    return value;
  }
  function tryAddToSet(set, value) {
    if (!set.has(value)) {
      set.add(value);
      return true;
    }
    return false;
  }
  function* singleIterator(value) {
    yield value;
  }
  function spanMap(array, keyfn, mapfn) {
    let result;
    if (array) {
      result = [];
      const len = array.length;
      let previousKey;
      let key;
      let start = 0;
      let pos = 0;
      while (start < len) {
        while (pos < len) {
          const value = array[pos];
          key = keyfn(value, pos);
          if (pos === 0) {
            previousKey = key;
          } else if (key !== previousKey) {
            break;
          }
          pos++;
        }
        if (start < pos) {
          const v = mapfn(array.slice(start, pos), previousKey, start, pos);
          if (v) {
            result.push(v);
          }
          start = pos;
        }
        previousKey = key;
        pos++;
      }
    }
    return result;
  }
  function mapEntries(map2, f) {
    if (!map2) {
      return void 0;
    }
    const result = /* @__PURE__ */ new Map();
    map2.forEach((value, key) => {
      const [newKey, newValue] = f(key, value);
      result.set(newKey, newValue);
    });
    return result;
  }
  function some(array, predicate) {
    if (array) {
      if (predicate) {
        for (const v of array) {
          if (predicate(v)) {
            return true;
          }
        }
      } else {
        return array.length > 0;
      }
    }
    return false;
  }
  function getRangesWhere(arr, pred, cb) {
    let start;
    for (let i = 0; i < arr.length; i++) {
      if (pred(arr[i])) {
        start = start === void 0 ? i : start;
      } else {
        if (start !== void 0) {
          cb(start, i);
          start = void 0;
        }
      }
    }
    if (start !== void 0)
      cb(start, arr.length);
  }
  function concatenate(array1, array2) {
    if (!some(array2))
      return array1;
    if (!some(array1))
      return array2;
    return [...array1, ...array2];
  }
  function selectIndex(_, i) {
    return i;
  }
  function indicesOf(array) {
    return array.map(selectIndex);
  }
  function deduplicateRelational(array, equalityComparer, comparer) {
    const indices = indicesOf(array);
    stableSortIndices(array, indices, comparer);
    let last2 = array[indices[0]];
    const deduplicated = [indices[0]];
    for (let i = 1; i < indices.length; i++) {
      const index = indices[i];
      const item = array[index];
      if (!equalityComparer(last2, item)) {
        deduplicated.push(index);
        last2 = item;
      }
    }
    deduplicated.sort();
    return deduplicated.map((i) => array[i]);
  }
  function deduplicateEquality(array, equalityComparer) {
    const result = [];
    for (const item of array) {
      pushIfUnique(result, item, equalityComparer);
    }
    return result;
  }
  function deduplicate(array, equalityComparer, comparer) {
    return array.length === 0 ? [] : array.length === 1 ? array.slice() : comparer ? deduplicateRelational(array, equalityComparer, comparer) : deduplicateEquality(array, equalityComparer);
  }
  function deduplicateSorted(array, comparer) {
    if (array.length === 0)
      return emptyArray;
    let last2 = array[0];
    const deduplicated = [last2];
    for (let i = 1; i < array.length; i++) {
      const next = array[i];
      switch (comparer(next, last2)) {
        case true:
        case 0 /* EqualTo */:
          continue;
        case -1 /* LessThan */:
          return Debug.fail("Array is unsorted.");
      }
      deduplicated.push(last2 = next);
    }
    return deduplicated;
  }
  function createSortedArray() {
    return [];
  }
  function insertSorted(array, insert, compare, allowDuplicates) {
    if (array.length === 0) {
      array.push(insert);
      return true;
    }
    const insertIndex = binarySearch(array, insert, identity, compare);
    if (insertIndex < 0) {
      array.splice(~insertIndex, 0, insert);
      return true;
    }
    if (allowDuplicates) {
      array.splice(insertIndex, 0, insert);
      return true;
    }
    return false;
  }
  function sortAndDeduplicate(array, comparer, equalityComparer) {
    return deduplicateSorted(sort(array, comparer), equalityComparer || comparer || compareStringsCaseSensitive);
  }
  function arrayIsSorted(array, comparer) {
    if (array.length < 2)
      return true;
    for (let i = 1, len = array.length; i < len; i++) {
      if (comparer(array[i - 1], array[i]) === 1 /* GreaterThan */) {
        return false;
      }
    }
    return true;
  }
  function detectSortCaseSensitivity(array, getString, compareStringsCaseSensitive2, compareStringsCaseInsensitive2) {
    let kind = 3 /* Both */;
    if (array.length < 2)
      return kind;
    let prevElement = getString(array[0]);
    for (let i = 1, len = array.length; i < len && kind !== 0 /* None */; i++) {
      const element = getString(array[i]);
      if (kind & 1 /* CaseSensitive */ && compareStringsCaseSensitive2(prevElement, element) > 0) {
        kind &= ~1 /* CaseSensitive */;
      }
      if (kind & 2 /* CaseInsensitive */ && compareStringsCaseInsensitive2(prevElement, element) > 0) {
        kind &= ~2 /* CaseInsensitive */;
      }
      prevElement = element;
    }
    return kind;
  }
  function arrayIsEqualTo(array1, array2, equalityComparer = equateValues) {
    if (!array1 || !array2) {
      return array1 === array2;
    }
    if (array1.length !== array2.length) {
      return false;
    }
    for (let i = 0; i < array1.length; i++) {
      if (!equalityComparer(array1[i], array2[i], i)) {
        return false;
      }
    }
    return true;
  }
  function compact(array) {
    let result;
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const v = array[i];
        if (result || !v) {
          if (!result) {
            result = array.slice(0, i);
          }
          if (v) {
            result.push(v);
          }
        }
      }
    }
    return result || array;
  }
  function relativeComplement(arrayA, arrayB, comparer) {
    if (!arrayB || !arrayA || arrayB.length === 0 || arrayA.length === 0)
      return arrayB;
    const result = [];
    loopB:
      for (let offsetA = 0, offsetB = 0; offsetB < arrayB.length; offsetB++) {
        if (offsetB > 0) {
          Debug.assertGreaterThanOrEqual(comparer(arrayB[offsetB], arrayB[offsetB - 1]), 0 /* EqualTo */);
        }
        loopA:
          for (const startA = offsetA; offsetA < arrayA.length; offsetA++) {
            if (offsetA > startA) {
              Debug.assertGreaterThanOrEqual(comparer(arrayA[offsetA], arrayA[offsetA - 1]), 0 /* EqualTo */);
            }
            switch (comparer(arrayB[offsetB], arrayA[offsetA])) {
              case -1 /* LessThan */:
                result.push(arrayB[offsetB]);
                continue loopB;
              case 0 /* EqualTo */:
                continue loopB;
              case 1 /* GreaterThan */:
                continue loopA;
            }
          }
      }
    return result;
  }
  function append(to, value) {
    if (value === void 0)
      return to;
    if (to === void 0)
      return [value];
    to.push(value);
    return to;
  }
  function combine(xs, ys) {
    if (xs === void 0)
      return ys;
    if (ys === void 0)
      return xs;
    if (isArray(xs))
      return isArray(ys) ? concatenate(xs, ys) : append(xs, ys);
    if (isArray(ys))
      return append(ys, xs);
    return [xs, ys];
  }
  function toOffset(array, offset) {
    return offset < 0 ? array.length + offset : offset;
  }
  function addRange(to, from, start, end) {
    if (from === void 0 || from.length === 0)
      return to;
    if (to === void 0)
      return from.slice(start, end);
    start = start === void 0 ? 0 : toOffset(from, start);
    end = end === void 0 ? from.length : toOffset(from, end);
    for (let i = start; i < end && i < from.length; i++) {
      if (from[i] !== void 0) {
        to.push(from[i]);
      }
    }
    return to;
  }
  function pushIfUnique(array, toAdd, equalityComparer) {
    if (contains(array, toAdd, equalityComparer)) {
      return false;
    } else {
      array.push(toAdd);
      return true;
    }
  }
  function appendIfUnique(array, toAdd, equalityComparer) {
    if (array) {
      pushIfUnique(array, toAdd, equalityComparer);
      return array;
    } else {
      return [toAdd];
    }
  }
  function stableSortIndices(array, indices, comparer) {
    indices.sort((x, y) => comparer(array[x], array[y]) || compareValues(x, y));
  }
  function sort(array, comparer) {
    return array.length === 0 ? array : array.slice().sort(comparer);
  }
  function* arrayReverseIterator(array) {
    for (let i = array.length - 1; i >= 0; i--) {
      yield array[i];
    }
  }
  function stableSort(array, comparer) {
    const indices = indicesOf(array);
    stableSortIndices(array, indices, comparer);
    return indices.map((i) => array[i]);
  }
  function rangeEquals(array1, array2, pos, end) {
    while (pos < end) {
      if (array1[pos] !== array2[pos]) {
        return false;
      }
      pos++;
    }
    return true;
  }
  function firstOrUndefined(array) {
    return array === void 0 || array.length === 0 ? void 0 : array[0];
  }
  function firstOrUndefinedIterator(iter) {
    if (iter) {
      for (const value of iter) {
        return value;
      }
    }
    return void 0;
  }
  function first(array) {
    Debug.assert(array.length !== 0);
    return array[0];
  }
  function firstIterator(iter) {
    for (const value of iter) {
      return value;
    }
    Debug.fail("iterator is empty");
  }
  function lastOrUndefined(array) {
    return array === void 0 || array.length === 0 ? void 0 : array[array.length - 1];
  }
  function last(array) {
    Debug.assert(array.length !== 0);
    return array[array.length - 1];
  }
  function singleOrUndefined(array) {
    return array && array.length === 1 ? array[0] : void 0;
  }
  function single(array) {
    return Debug.checkDefined(singleOrUndefined(array));
  }
  function singleOrMany(array) {
    return array && array.length === 1 ? array[0] : array;
  }
  function replaceElement(array, index, value) {
    const result = array.slice(0);
    result[index] = value;
    return result;
  }
  function binarySearch(array, value, keySelector, keyComparer, offset) {
    return binarySearchKey(array, keySelector(value), keySelector, keyComparer, offset);
  }
  function binarySearchKey(array, key, keySelector, keyComparer, offset) {
    if (!some(array)) {
      return -1;
    }
    let low = offset || 0;
    let high = array.length - 1;
    while (low <= high) {
      const middle = low + (high - low >> 1);
      const midKey = keySelector(array[middle], middle);
      switch (keyComparer(midKey, key)) {
        case -1 /* LessThan */:
          low = middle + 1;
          break;
        case 0 /* EqualTo */:
          return middle;
        case 1 /* GreaterThan */:
          high = middle - 1;
          break;
      }
    }
    return ~low;
  }
  function reduceLeft(array, f, initial, start, count) {
    if (array && array.length > 0) {
      const size = array.length;
      if (size > 0) {
        let pos = start === void 0 || start < 0 ? 0 : start;
        const end = count === void 0 || pos + count > size - 1 ? size - 1 : pos + count;
        let result;
        if (arguments.length <= 2) {
          result = array[pos];
          pos++;
        } else {
          result = initial;
        }
        while (pos <= end) {
          result = f(result, array[pos], pos);
          pos++;
        }
        return result;
      }
    }
    return initial;
  }
  function hasProperty(map2, key) {
    return hasOwnProperty.call(map2, key);
  }
  function getProperty(map2, key) {
    return hasOwnProperty.call(map2, key) ? map2[key] : void 0;
  }
  function getOwnKeys(map2) {
    const keys = [];
    for (const key in map2) {
      if (hasOwnProperty.call(map2, key)) {
        keys.push(key);
      }
    }
    return keys;
  }
  function getAllKeys(obj) {
    const result = [];
    do {
      const names = Object.getOwnPropertyNames(obj);
      for (const name of names) {
        pushIfUnique(result, name);
      }
    } while (obj = Object.getPrototypeOf(obj));
    return result;
  }
  function getOwnValues(collection) {
    const values = [];
    for (const key in collection) {
      if (hasOwnProperty.call(collection, key)) {
        values.push(collection[key]);
      }
    }
    return values;
  }
  function arrayOf(count, f) {
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = f(i);
    }
    return result;
  }
  function arrayFrom(iterator, map2) {
    const result = [];
    for (const value of iterator) {
      result.push(map2 ? map2(value) : value);
    }
    return result;
  }
  function assign(t, ...args) {
    for (const arg of args) {
      if (arg === void 0)
        continue;
      for (const p in arg) {
        if (hasProperty(arg, p)) {
          t[p] = arg[p];
        }
      }
    }
    return t;
  }
  function equalOwnProperties(left, right, equalityComparer = equateValues) {
    if (left === right)
      return true;
    if (!left || !right)
      return false;
    for (const key in left) {
      if (hasOwnProperty.call(left, key)) {
        if (!hasOwnProperty.call(right, key))
          return false;
        if (!equalityComparer(left[key], right[key]))
          return false;
      }
    }
    for (const key in right) {
      if (hasOwnProperty.call(right, key)) {
        if (!hasOwnProperty.call(left, key))
          return false;
      }
    }
    return true;
  }
  function arrayToMap(array, makeKey, makeValue = identity) {
    const result = /* @__PURE__ */ new Map();
    for (const value of array) {
      const key = makeKey(value);
      if (key !== void 0)
        result.set(key, makeValue(value));
    }
    return result;
  }
  function arrayToNumericMap(array, makeKey, makeValue = identity) {
    const result = [];
    for (const value of array) {
      result[makeKey(value)] = makeValue(value);
    }
    return result;
  }
  function arrayToMultiMap(values, makeKey, makeValue = identity) {
    const result = createMultiMap();
    for (const value of values) {
      result.add(makeKey(value), makeValue(value));
    }
    return result;
  }
  function group(values, getGroupId, resultSelector = identity) {
    return arrayFrom(arrayToMultiMap(values, getGroupId).values(), resultSelector);
  }
  function groupBy(values, keySelector) {
    const result = {};
    if (values) {
      for (const value of values) {
        const key = `${keySelector(value)}`;
        const array = result[key] ?? (result[key] = []);
        array.push(value);
      }
    }
    return result;
  }
  function clone(object) {
    const result = {};
    for (const id in object) {
      if (hasOwnProperty.call(object, id)) {
        result[id] = object[id];
      }
    }
    return result;
  }
  function extend(first2, second) {
    const result = {};
    for (const id in second) {
      if (hasOwnProperty.call(second, id)) {
        result[id] = second[id];
      }
    }
    for (const id in first2) {
      if (hasOwnProperty.call(first2, id)) {
        result[id] = first2[id];
      }
    }
    return result;
  }
  function copyProperties(first2, second) {
    for (const id in second) {
      if (hasOwnProperty.call(second, id)) {
        first2[id] = second[id];
      }
    }
  }
  function maybeBind(obj, fn) {
    return fn ? fn.bind(obj) : void 0;
  }
  function createMultiMap() {
    const map2 = /* @__PURE__ */ new Map();
    map2.add = multiMapAdd;
    map2.remove = multiMapRemove;
    return map2;
  }
  function multiMapAdd(key, value) {
    let values = this.get(key);
    if (values) {
      values.push(value);
    } else {
      this.set(key, values = [value]);
    }
    return values;
  }
  function multiMapRemove(key, value) {
    const values = this.get(key);
    if (values) {
      unorderedRemoveItem(values, value);
      if (!values.length) {
        this.delete(key);
      }
    }
  }
  function createQueue(items) {
    const elements = (items == null ? void 0 : items.slice()) || [];
    let headIndex = 0;
    function isEmpty() {
      return headIndex === elements.length;
    }
    function enqueue(...items2) {
      elements.push(...items2);
    }
    function dequeue() {
      if (isEmpty()) {
        throw new Error("Queue is empty");
      }
      const result = elements[headIndex];
      elements[headIndex] = void 0;
      headIndex++;
      if (headIndex > 100 && headIndex > elements.length >> 1) {
        const newLength = elements.length - headIndex;
        elements.copyWithin(
          /*target*/
          0,
          /*start*/
          headIndex
        );
        elements.length = newLength;
        headIndex = 0;
      }
      return result;
    }
    return {
      enqueue,
      dequeue,
      isEmpty
    };
  }
  function createSet(getHashCode, equals) {
    const multiMap = /* @__PURE__ */ new Map();
    let size = 0;
    function* getElementIterator() {
      for (const value of multiMap.values()) {
        if (isArray(value)) {
          yield* value;
        } else {
          yield value;
        }
      }
    }
    const set = {
      has(element) {
        const hash = getHashCode(element);
        if (!multiMap.has(hash))
          return false;
        const candidates = multiMap.get(hash);
        if (!isArray(candidates))
          return equals(candidates, element);
        for (const candidate of candidates) {
          if (equals(candidate, element)) {
            return true;
          }
        }
        return false;
      },
      add(element) {
        const hash = getHashCode(element);
        if (multiMap.has(hash)) {
          const values = multiMap.get(hash);
          if (isArray(values)) {
            if (!contains(values, element, equals)) {
              values.push(element);
              size++;
            }
          } else {
            const value = values;
            if (!equals(value, element)) {
              multiMap.set(hash, [value, element]);
              size++;
            }
          }
        } else {
          multiMap.set(hash, element);
          size++;
        }
        return this;
      },
      delete(element) {
        const hash = getHashCode(element);
        if (!multiMap.has(hash))
          return false;
        const candidates = multiMap.get(hash);
        if (isArray(candidates)) {
          for (let i = 0; i < candidates.length; i++) {
            if (equals(candidates[i], element)) {
              if (candidates.length === 1) {
                multiMap.delete(hash);
              } else if (candidates.length === 2) {
                multiMap.set(hash, candidates[1 - i]);
              } else {
                unorderedRemoveItemAt(candidates, i);
              }
              size--;
              return true;
            }
          }
        } else {
          const candidate = candidates;
          if (equals(candidate, element)) {
            multiMap.delete(hash);
            size--;
            return true;
          }
        }
        return false;
      },
      clear() {
        multiMap.clear();
        size = 0;
      },
      get size() {
        return size;
      },
      forEach(action) {
        for (const elements of arrayFrom(multiMap.values())) {
          if (isArray(elements)) {
            for (const element of elements) {
              action(element, element, set);
            }
          } else {
            const element = elements;
            action(element, element, set);
          }
        }
      },
      keys() {
        return getElementIterator();
      },
      values() {
        return getElementIterator();
      },
      *entries() {
        for (const value of getElementIterator()) {
          yield [value, value];
        }
      },
      [Symbol.iterator]: () => {
        return getElementIterator();
      },
      [Symbol.toStringTag]: multiMap[Symbol.toStringTag]
    };
    return set;
  }
  function isArray(value) {
    return Array.isArray(value);
  }
  function toArray(value) {
    return isArray(value) ? value : [value];
  }
  function isString(text) {
    return typeof text === "string";
  }
  function isNumber(x) {
    return typeof x === "number";
  }
  function tryCast(value, test) {
    return value !== void 0 && test(value) ? value : void 0;
  }
  function cast(value, test) {
    if (value !== void 0 && test(value))
      return value;
    return Debug.fail(`Invalid cast. The supplied value ${value} did not pass the test '${Debug.getFunctionName(test)}'.`);
  }
  function noop(_) {
  }
  function returnFalse() {
    return false;
  }
  function returnTrue() {
    return true;
  }
  function returnUndefined() {
    return void 0;
  }
  function identity(x) {
    return x;
  }
  function toLowerCase(x) {
    return x.toLowerCase();
  }
  function toFileNameLowerCase(x) {
    return fileNameLowerCaseRegExp.test(x) ? x.replace(fileNameLowerCaseRegExp, toLowerCase) : x;
  }
  function notImplemented() {
    throw new Error("Not implemented");
  }
  function memoize(callback) {
    let value;
    return () => {
      if (callback) {
        value = callback();
        callback = void 0;
      }
      return value;
    };
  }
  function memoizeOne(callback) {
    const map2 = /* @__PURE__ */ new Map();
    return (arg) => {
      const key = `${typeof arg}:${arg}`;
      let value = map2.get(key);
      if (value === void 0 && !map2.has(key)) {
        value = callback(arg);
        map2.set(key, value);
      }
      return value;
    };
  }
  function memoizeWeak(callback) {
    const map2 = /* @__PURE__ */ new WeakMap();
    return (arg) => {
      let value = map2.get(arg);
      if (value === void 0 && !map2.has(arg)) {
        value = callback(arg);
        map2.set(arg, value);
      }
      return value;
    };
  }
  function memoizeCached(callback, cache) {
    return (...args) => {
      let value = cache.get(args);
      if (value === void 0 && !cache.has(args)) {
        value = callback(...args);
        cache.set(args, value);
      }
      return value;
    };
  }
  function compose(a, b, c, d, e) {
    if (!!e) {
      const args = [];
      for (let i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      return (t) => reduceLeft(args, (u, f) => f(u), t);
    } else if (d) {
      return (t) => d(c(b(a(t))));
    } else if (c) {
      return (t) => c(b(a(t)));
    } else if (b) {
      return (t) => b(a(t));
    } else if (a) {
      return (t) => a(t);
    } else {
      return (t) => t;
    }
  }
  function equateValues(a, b) {
    return a === b;
  }
  function equateStringsCaseInsensitive(a, b) {
    return a === b || a !== void 0 && b !== void 0 && a.toUpperCase() === b.toUpperCase();
  }
  function equateStringsCaseSensitive(a, b) {
    return equateValues(a, b);
  }
  function compareComparableValues(a, b) {
    return a === b ? 0 /* EqualTo */ : a === void 0 ? -1 /* LessThan */ : b === void 0 ? 1 /* GreaterThan */ : a < b ? -1 /* LessThan */ : 1 /* GreaterThan */;
  }
  function compareValues(a, b) {
    return compareComparableValues(a, b);
  }
  function compareTextSpans(a, b) {
    return compareValues(a == null ? void 0 : a.start, b == null ? void 0 : b.start) || compareValues(a == null ? void 0 : a.length, b == null ? void 0 : b.length);
  }
  function min(items, compare) {
    return reduceLeft(items, (x, y) => compare(x, y) === -1 /* LessThan */ ? x : y);
  }
  function compareStringsCaseInsensitive(a, b) {
    if (a === b)
      return 0 /* EqualTo */;
    if (a === void 0)
      return -1 /* LessThan */;
    if (b === void 0)
      return 1 /* GreaterThan */;
    a = a.toUpperCase();
    b = b.toUpperCase();
    return a < b ? -1 /* LessThan */ : a > b ? 1 /* GreaterThan */ : 0 /* EqualTo */;
  }
  function compareStringsCaseInsensitiveEslintCompatible(a, b) {
    if (a === b)
      return 0 /* EqualTo */;
    if (a === void 0)
      return -1 /* LessThan */;
    if (b === void 0)
      return 1 /* GreaterThan */;
    a = a.toLowerCase();
    b = b.toLowerCase();
    return a < b ? -1 /* LessThan */ : a > b ? 1 /* GreaterThan */ : 0 /* EqualTo */;
  }
  function compareStringsCaseSensitive(a, b) {
    return compareComparableValues(a, b);
  }
  function getStringComparer(ignoreCase) {
    return ignoreCase ? compareStringsCaseInsensitive : compareStringsCaseSensitive;
  }
  function getUILocale() {
    return uiLocale;
  }
  function setUILocale(value) {
    if (uiLocale !== value) {
      uiLocale = value;
      uiComparerCaseSensitive = void 0;
    }
  }
  function compareStringsCaseSensitiveUI(a, b) {
    const comparer = uiComparerCaseSensitive || (uiComparerCaseSensitive = createUIStringComparer(uiLocale));
    return comparer(a, b);
  }
  function compareProperties(a, b, key, comparer) {
    return a === b ? 0 /* EqualTo */ : a === void 0 ? -1 /* LessThan */ : b === void 0 ? 1 /* GreaterThan */ : comparer(a[key], b[key]);
  }
  function compareBooleans(a, b) {
    return compareValues(a ? 1 : 0, b ? 1 : 0);
  }
  function getSpellingSuggestion(name, candidates, getName) {
    const maximumLengthDifference = Math.max(2, Math.floor(name.length * 0.34));
    let bestDistance = Math.floor(name.length * 0.4) + 1;
    let bestCandidate;
    for (const candidate of candidates) {
      const candidateName = getName(candidate);
      if (candidateName !== void 0 && Math.abs(candidateName.length - name.length) <= maximumLengthDifference) {
        if (candidateName === name) {
          continue;
        }
        if (candidateName.length < 3 && candidateName.toLowerCase() !== name.toLowerCase()) {
          continue;
        }
        const distance = levenshteinWithMax(name, candidateName, bestDistance - 0.1);
        if (distance === void 0) {
          continue;
        }
        Debug.assert(distance < bestDistance);
        bestDistance = distance;
        bestCandidate = candidate;
      }
    }
    return bestCandidate;
  }
  function levenshteinWithMax(s1, s2, max) {
    let previous = new Array(s2.length + 1);
    let current = new Array(s2.length + 1);
    const big = max + 0.01;
    for (let i = 0; i <= s2.length; i++) {
      previous[i] = i;
    }
    for (let i = 1; i <= s1.length; i++) {
      const c1 = s1.charCodeAt(i - 1);
      const minJ = Math.ceil(i > max ? i - max : 1);
      const maxJ = Math.floor(s2.length > max + i ? max + i : s2.length);
      current[0] = i;
      let colMin = i;
      for (let j = 1; j < minJ; j++) {
        current[j] = big;
      }
      for (let j = minJ; j <= maxJ; j++) {
        const substitutionDistance = s1[i - 1].toLowerCase() === s2[j - 1].toLowerCase() ? previous[j - 1] + 0.1 : previous[j - 1] + 2;
        const dist = c1 === s2.charCodeAt(j - 1) ? previous[j - 1] : Math.min(
          /*delete*/
          previous[j] + 1,
          /*insert*/
          current[j - 1] + 1,
          /*substitute*/
          substitutionDistance
        );
        current[j] = dist;
        colMin = Math.min(colMin, dist);
      }
      for (let j = maxJ + 1; j <= s2.length; j++) {
        current[j] = big;
      }
      if (colMin > max) {
        return void 0;
      }
      const temp = previous;
      previous = current;
      current = temp;
    }
    const res = previous[s2.length];
    return res > max ? void 0 : res;
  }
  function endsWith(str, suffix, ignoreCase) {
    const expectedPos = str.length - suffix.length;
    return expectedPos >= 0 && (ignoreCase ? equateStringsCaseInsensitive(str.slice(expectedPos), suffix) : str.indexOf(suffix, expectedPos) === expectedPos);
  }
  function removeSuffix(str, suffix) {
    return endsWith(str, suffix) ? str.slice(0, str.length - suffix.length) : str;
  }
  function tryRemoveSuffix(str, suffix) {
    return endsWith(str, suffix) ? str.slice(0, str.length - suffix.length) : void 0;
  }
  function removeMinAndVersionNumbers(fileName) {
    let end = fileName.length;
    for (let pos = end - 1; pos > 0; pos--) {
      let ch = fileName.charCodeAt(pos);
      if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {
        do {
          --pos;
          ch = fileName.charCodeAt(pos);
        } while (pos > 0 && ch >= 48 /* _0 */ && ch <= 57 /* _9 */);
      } else if (pos > 4 && (ch === 110 /* n */ || ch === 78 /* N */)) {
        --pos;
        ch = fileName.charCodeAt(pos);
        if (ch !== 105 /* i */ && ch !== 73 /* I */) {
          break;
        }
        --pos;
        ch = fileName.charCodeAt(pos);
        if (ch !== 109 /* m */ && ch !== 77 /* M */) {
          break;
        }
        --pos;
        ch = fileName.charCodeAt(pos);
      } else {
        break;
      }
      if (ch !== 45 /* minus */ && ch !== 46 /* dot */) {
        break;
      }
      end = pos;
    }
    return end === fileName.length ? fileName : fileName.slice(0, end);
  }
  function orderedRemoveItem(array, item) {
    for (let i = 0; i < array.length; i++) {
      if (array[i] === item) {
        orderedRemoveItemAt(array, i);
        return true;
      }
    }
    return false;
  }
  function orderedRemoveItemAt(array, index) {
    for (let i = index; i < array.length - 1; i++) {
      array[i] = array[i + 1];
    }
    array.pop();
  }
  function unorderedRemoveItemAt(array, index) {
    array[index] = array[array.length - 1];
    array.pop();
  }
  function unorderedRemoveItem(array, item) {
    return unorderedRemoveFirstItemWhere(array, (element) => element === item);
  }
  function unorderedRemoveFirstItemWhere(array, predicate) {
    for (let i = 0; i < array.length; i++) {
      if (predicate(array[i])) {
        unorderedRemoveItemAt(array, i);
        return true;
      }
    }
    return false;
  }
  function createGetCanonicalFileName(useCaseSensitiveFileNames2) {
    return useCaseSensitiveFileNames2 ? identity : toFileNameLowerCase;
  }
  function patternText({ prefix, suffix }) {
    return `${prefix}*${suffix}`;
  }
  function matchedText(pattern, candidate) {
    Debug.assert(isPatternMatch(pattern, candidate));
    return candidate.substring(pattern.prefix.length, candidate.length - pattern.suffix.length);
  }
  function findBestPatternMatch(values, getPattern, candidate) {
    let matchedValue;
    let longestMatchPrefixLength = -1;
    for (const v of values) {
      const pattern = getPattern(v);
      if (isPatternMatch(pattern, candidate) && pattern.prefix.length > longestMatchPrefixLength) {
        longestMatchPrefixLength = pattern.prefix.length;
        matchedValue = v;
      }
    }
    return matchedValue;
  }
  function startsWith(str, prefix, ignoreCase) {
    return ignoreCase ? equateStringsCaseInsensitive(str.slice(0, prefix.length), prefix) : str.lastIndexOf(prefix, 0) === 0;
  }
  function removePrefix(str, prefix) {
    return startsWith(str, prefix) ? str.substr(prefix.length) : str;
  }
  function tryRemovePrefix(str, prefix, getCanonicalFileName = identity) {
    return startsWith(getCanonicalFileName(str), getCanonicalFileName(prefix)) ? str.substring(prefix.length) : void 0;
  }
  function isPatternMatch({ prefix, suffix }, candidate) {
    return candidate.length >= prefix.length + suffix.length && startsWith(candidate, prefix) && endsWith(candidate, suffix);
  }
  function and(f, g) {
    return (arg) => f(arg) && g(arg);
  }
  function or(...fs) {
    return (...args) => {
      let lastResult;
      for (const f of fs) {
        lastResult = f(...args);
        if (lastResult) {
          return lastResult;
        }
      }
      return lastResult;
    };
  }
  function not(fn) {
    return (...args) => !fn(...args);
  }
  function assertType(_) {
  }
  function singleElementArray(t) {
    return t === void 0 ? void 0 : [t];
  }
  function enumerateInsertsAndDeletes(newItems, oldItems, comparer, inserted, deleted, unchanged) {
    unchanged = unchanged || noop;
    let newIndex = 0;
    let oldIndex = 0;
    const newLen = newItems.length;
    const oldLen = oldItems.length;
    let hasChanges = false;
    while (newIndex < newLen && oldIndex < oldLen) {
      const newItem = newItems[newIndex];
      const oldItem = oldItems[oldIndex];
      const compareResult = comparer(newItem, oldItem);
      if (compareResult === -1 /* LessThan */) {
        inserted(newItem);
        newIndex++;
        hasChanges = true;
      } else if (compareResult === 1 /* GreaterThan */) {
        deleted(oldItem);
        oldIndex++;
        hasChanges = true;
      } else {
        unchanged(oldItem, newItem);
        newIndex++;
        oldIndex++;
      }
    }
    while (newIndex < newLen) {
      inserted(newItems[newIndex++]);
      hasChanges = true;
    }
    while (oldIndex < oldLen) {
      deleted(oldItems[oldIndex++]);
      hasChanges = true;
    }
    return hasChanges;
  }
  function cartesianProduct(arrays) {
    const result = [];
    cartesianProductWorker(
      arrays,
      result,
      /*outer*/
      void 0,
      0
    );
    return result;
  }
  function cartesianProductWorker(arrays, result, outer, index) {
    for (const element of arrays[index]) {
      let inner;
      if (outer) {
        inner = outer.slice();
        inner.push(element);
      } else {
        inner = [element];
      }
      if (index === arrays.length - 1) {
        result.push(inner);
      } else {
        cartesianProductWorker(arrays, result, inner, index + 1);
      }
    }
  }
  function takeWhile(array, predicate) {
    if (array) {
      const len = array.length;
      let index = 0;
      while (index < len && predicate(array[index])) {
        index++;
      }
      return array.slice(0, index);
    }
  }
  function skipWhile(array, predicate) {
    if (array) {
      const len = array.length;
      let index = 0;
      while (index < len && predicate(array[index])) {
        index++;
      }
      return array.slice(index);
    }
  }
  function isNodeLikeSystem() {
    return typeof process !== "undefined" && !!process.nextTick && !process.browser && typeof module === "object";
  }
  var emptyArray, emptyMap, emptySet, SortKind, elementAt, hasOwnProperty, fileNameLowerCaseRegExp, AssertionLevel, createUIStringComparer, uiComparerCaseSensitive, uiLocale;
  var init_core = __esm({
    "src/compiler/core.ts"() {
      "use strict";
      init_ts2();
      emptyArray = [];
      emptyMap = /* @__PURE__ */ new Map();
      emptySet = /* @__PURE__ */ new Set();
      SortKind = /* @__PURE__ */ ((SortKind2) => {
        SortKind2[SortKind2["None"] = 0] = "None";
        SortKind2[SortKind2["CaseSensitive"] = 1] = "CaseSensitive";
        SortKind2[SortKind2["CaseInsensitive"] = 2] = "CaseInsensitive";
        SortKind2[SortKind2["Both"] = 3] = "Both";
        return SortKind2;
      })(SortKind || {});
      elementAt = !!Array.prototype.at ? (array, offset) => array == null ? void 0 : array.at(offset) : (array, offset) => {
        if (array) {
          offset = toOffset(array, offset);
          if (offset < array.length) {
            return array[offset];
          }
        }
        return void 0;
      };
      hasOwnProperty = Object.prototype.hasOwnProperty;
      fileNameLowerCaseRegExp = /[^\u0130\u0131\u00DFa-z0-9\\/:\-_. ]+/g;
      AssertionLevel = /* @__PURE__ */ ((AssertionLevel2) => {
        AssertionLevel2[AssertionLevel2["None"] = 0] = "None";
        AssertionLevel2[AssertionLevel2["Normal"] = 1] = "Normal";
        AssertionLevel2[AssertionLevel2["Aggressive"] = 2] = "Aggressive";
        AssertionLevel2[AssertionLevel2["VeryAggressive"] = 3] = "VeryAggressive";
        return AssertionLevel2;
      })(AssertionLevel || {});
      createUIStringComparer = /* @__PURE__ */ (() => {
        return createIntlCollatorStringComparer;
        function compareWithCallback(a, b, comparer) {
          if (a === b)
            return 0 /* EqualTo */;
          if (a === void 0)
            return -1 /* LessThan */;
          if (b === void 0)
            return 1 /* GreaterThan */;
          const value = comparer(a, b);
          return value < 0 ? -1 /* LessThan */ : value > 0 ? 1 /* GreaterThan */ : 0 /* EqualTo */;
        }
        function createIntlCollatorStringComparer(locale) {
          const comparer = new Intl.Collator(locale, { usage: "sort", sensitivity: "variant" }).compare;
          return (a, b) => compareWithCallback(a, b, comparer);
        }
      })();
    }
  });

  // src/compiler/debug.ts
  var LogLevel, Debug;
  var init_debug = __esm({
    "src/compiler/debug.ts"() {
      "use strict";
      init_ts2();
      init_ts2();
      LogLevel = /* @__PURE__ */ ((LogLevel3) => {
        LogLevel3[LogLevel3["Off"] = 0] = "Off";
        LogLevel3[LogLevel3["Error"] = 1] = "Error";
        LogLevel3[LogLevel3["Warning"] = 2] = "Warning";
        LogLevel3[LogLevel3["Info"] = 3] = "Info";
        LogLevel3[LogLevel3["Verbose"] = 4] = "Verbose";
        return LogLevel3;
      })(LogLevel || {});
      ((Debug2) => {
        let currentAssertionLevel = 0 /* None */;
        Debug2.currentLogLevel = 2 /* Warning */;
        Debug2.isDebugging = false;
        function shouldLog(level) {
          return Debug2.currentLogLevel <= level;
        }
        Debug2.shouldLog = shouldLog;
        function logMessage(level, s) {
          if (Debug2.loggingHost && shouldLog(level)) {
            Debug2.loggingHost.log(level, s);
          }
        }
        function log(s) {
          logMessage(3 /* Info */, s);
        }
        Debug2.log = log;
        ((_log) => {
          function error2(s) {
            logMessage(1 /* Error */, s);
          }
          _log.error = error2;
          function warn(s) {
            logMessage(2 /* Warning */, s);
          }
          _log.warn = warn;
          function log2(s) {
            logMessage(3 /* Info */, s);
          }
          _log.log = log2;
          function trace2(s) {
            logMessage(4 /* Verbose */, s);
          }
          _log.trace = trace2;
        })(log = Debug2.log || (Debug2.log = {}));
        const assertionCache = {};
        function getAssertionLevel() {
          return currentAssertionLevel;
        }
        Debug2.getAssertionLevel = getAssertionLevel;
        function setAssertionLevel(level) {
          const prevAssertionLevel = currentAssertionLevel;
          currentAssertionLevel = level;
          if (level > prevAssertionLevel) {
            for (const key of getOwnKeys(assertionCache)) {
              const cachedFunc = assertionCache[key];
              if (cachedFunc !== void 0 && Debug2[key] !== cachedFunc.assertion && level >= cachedFunc.level) {
                Debug2[key] = cachedFunc;
                assertionCache[key] = void 0;
              }
            }
          }
        }
        Debug2.setAssertionLevel = setAssertionLevel;
        function shouldAssert(level) {
          return currentAssertionLevel >= level;
        }
        Debug2.shouldAssert = shouldAssert;
        function shouldAssertFunction(level, name) {
          if (!shouldAssert(level)) {
            assertionCache[name] = { level, assertion: Debug2[name] };
            Debug2[name] = noop;
            return false;
          }
          return true;
        }
        function fail(message, stackCrawlMark) {
          debugger;
          const e = new Error(message ? `Debug Failure. ${message}` : "Debug Failure.");
          if (Error.captureStackTrace) {
            Error.captureStackTrace(e, stackCrawlMark || fail);
          }
          throw e;
        }
        Debug2.fail = fail;
        function failBadSyntaxKind(node, message, stackCrawlMark) {
          return fail(
            `${message || "Unexpected node."}\r
Node ${formatSyntaxKind(node.kind)} was unexpected.`,
            stackCrawlMark || failBadSyntaxKind
          );
        }
        Debug2.failBadSyntaxKind = failBadSyntaxKind;
        function assert(expression, message, verboseDebugInfo, stackCrawlMark) {
          if (!expression) {
            message = message ? `False expression: ${message}` : "False expression.";
            if (verboseDebugInfo) {
              message += "\r\nVerbose Debug Information: " + (typeof verboseDebugInfo === "string" ? verboseDebugInfo : verboseDebugInfo());
            }
            fail(message, stackCrawlMark || assert);
          }
        }
        Debug2.assert = assert;
        function assertEqual(a, b, msg, msg2, stackCrawlMark) {
          if (a !== b) {
            const message = msg ? msg2 ? `${msg} ${msg2}` : msg : "";
            fail(`Expected ${a} === ${b}. ${message}`, stackCrawlMark || assertEqual);
          }
        }
        Debug2.assertEqual = assertEqual;
        function assertLessThan(a, b, msg, stackCrawlMark) {
          if (a >= b) {
            fail(`Expected ${a} < ${b}. ${msg || ""}`, stackCrawlMark || assertLessThan);
          }
        }
        Debug2.assertLessThan = assertLessThan;
        function assertLessThanOrEqual(a, b, stackCrawlMark) {
          if (a > b) {
            fail(`Expected ${a} <= ${b}`, stackCrawlMark || assertLessThanOrEqual);
          }
        }
        Debug2.assertLessThanOrEqual = assertLessThanOrEqual;
        function assertGreaterThanOrEqual(a, b, stackCrawlMark) {
          if (a < b) {
            fail(`Expected ${a} >= ${b}`, stackCrawlMark || assertGreaterThanOrEqual);
          }
        }
        Debug2.assertGreaterThanOrEqual = assertGreaterThanOrEqual;
        function assertIsDefined(value, message, stackCrawlMark) {
          if (value === void 0 || value === null) {
            fail(message, stackCrawlMark || assertIsDefined);
          }
        }
        Debug2.assertIsDefined = assertIsDefined;
        function checkDefined(value, message, stackCrawlMark) {
          assertIsDefined(value, message, stackCrawlMark || checkDefined);
          return value;
        }
        Debug2.checkDefined = checkDefined;
        function assertEachIsDefined(value, message, stackCrawlMark) {
          for (const v of value) {
            assertIsDefined(v, message, stackCrawlMark || assertEachIsDefined);
          }
        }
        Debug2.assertEachIsDefined = assertEachIsDefined;
        function checkEachDefined(value, message, stackCrawlMark) {
          assertEachIsDefined(value, message, stackCrawlMark || checkEachDefined);
          return value;
        }
        Debug2.checkEachDefined = checkEachDefined;
        function assertNever(member, message = "Illegal value:", stackCrawlMark) {
          const detail = typeof member === "object" && hasProperty(member, "kind") && hasProperty(member, "pos") ? "SyntaxKind: " + formatSyntaxKind(member.kind) : JSON.stringify(member);
          return fail(`${message} ${detail}`, stackCrawlMark || assertNever);
        }
        Debug2.assertNever = assertNever;
        function assertEachNode(nodes, test, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertEachNode")) {
            assert(
              test === void 0 || every(nodes, test),
              message || "Unexpected node.",
              () => `Node array did not pass test '${getFunctionName(test)}'.`,
              stackCrawlMark || assertEachNode
            );
          }
        }
        Debug2.assertEachNode = assertEachNode;
        function assertNode(node, test, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertNode")) {
            assert(
              node !== void 0 && (test === void 0 || test(node)),
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node == null ? void 0 : node.kind)} did not pass test '${getFunctionName(test)}'.`,
              stackCrawlMark || assertNode
            );
          }
        }
        Debug2.assertNode = assertNode;
        function assertNotNode(node, test, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertNotNode")) {
            assert(
              node === void 0 || test === void 0 || !test(node),
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node.kind)} should not have passed test '${getFunctionName(test)}'.`,
              stackCrawlMark || assertNotNode
            );
          }
        }
        Debug2.assertNotNode = assertNotNode;
        function assertOptionalNode(node, test, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertOptionalNode")) {
            assert(
              test === void 0 || node === void 0 || test(node),
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node == null ? void 0 : node.kind)} did not pass test '${getFunctionName(test)}'.`,
              stackCrawlMark || assertOptionalNode
            );
          }
        }
        Debug2.assertOptionalNode = assertOptionalNode;
        function assertOptionalToken(node, kind, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertOptionalToken")) {
            assert(
              kind === void 0 || node === void 0 || node.kind === kind,
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node == null ? void 0 : node.kind)} was not a '${formatSyntaxKind(kind)}' token.`,
              stackCrawlMark || assertOptionalToken
            );
          }
        }
        Debug2.assertOptionalToken = assertOptionalToken;
        function assertMissingNode(node, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertMissingNode")) {
            assert(
              node === void 0,
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node.kind)} was unexpected'.`,
              stackCrawlMark || assertMissingNode
            );
          }
        }
        Debug2.assertMissingNode = assertMissingNode;
        function type(_value) {
        }
        Debug2.type = type;
        function getFunctionName(func) {
          if (typeof func !== "function") {
            return "";
          } else if (hasProperty(func, "name")) {
            return func.name;
          } else {
            const text = Function.prototype.toString.call(func);
            const match = /^function\s+([\w$]+)\s*\(/.exec(text);
            return match ? match[1] : "";
          }
        }
        Debug2.getFunctionName = getFunctionName;
        function formatSymbol(symbol) {
          return `{ name: ${unescapeLeadingUnderscores(symbol.escapedName)}; flags: ${formatSymbolFlags(symbol.flags)}; declarations: ${map(symbol.declarations, (node) => formatSyntaxKind(node.kind))} }`;
        }
        Debug2.formatSymbol = formatSymbol;
        function formatEnum(value = 0, enumObject, isFlags) {
          const members = getEnumMembers(enumObject);
          if (value === 0) {
            return members.length > 0 && members[0][0] === 0 ? members[0][1] : "0";
          }
          if (isFlags) {
            const result = [];
            let remainingFlags = value;
            for (const [enumValue, enumName] of members) {
              if (enumValue > value) {
                break;
              }
              if (enumValue !== 0 && enumValue & value) {
                result.push(enumName);
                remainingFlags &= ~enumValue;
              }
            }
            if (remainingFlags === 0) {
              return result.join("|");
            }
          } else {
            for (const [enumValue, enumName] of members) {
              if (enumValue === value) {
                return enumName;
              }
            }
          }
          return value.toString();
        }
        Debug2.formatEnum = formatEnum;
        const enumMemberCache = /* @__PURE__ */ new Map();
        function getEnumMembers(enumObject) {
          const existing = enumMemberCache.get(enumObject);
          if (existing) {
            return existing;
          }
          const result = [];
          for (const name in enumObject) {
            const value = enumObject[name];
            if (typeof value === "number") {
              result.push([value, name]);
            }
          }
          const sorted = stableSort(result, (x, y) => compareValues(x[0], y[0]));
          enumMemberCache.set(enumObject, sorted);
          return sorted;
        }
        function formatSyntaxKind(kind) {
          return formatEnum(
            kind,
            SyntaxKind,
            /*isFlags*/
            false
          );
        }
        Debug2.formatSyntaxKind = formatSyntaxKind;
        function formatSnippetKind(kind) {
          return formatEnum(
            kind,
            SnippetKind,
            /*isFlags*/
            false
          );
        }
        Debug2.formatSnippetKind = formatSnippetKind;
        function formatScriptKind(kind) {
          return formatEnum(
            kind,
            ScriptKind,
            /*isFlags*/
            false
          );
        }
        Debug2.formatScriptKind = formatScriptKind;
        function formatNodeFlags(flags) {
          return formatEnum(
            flags,
            NodeFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatNodeFlags = formatNodeFlags;
        function formatModifierFlags(flags) {
          return formatEnum(
            flags,
            ModifierFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatModifierFlags = formatModifierFlags;
        function formatTransformFlags(flags) {
          return formatEnum(
            flags,
            TransformFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatTransformFlags = formatTransformFlags;
        function formatEmitFlags(flags) {
          return formatEnum(
            flags,
            EmitFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatEmitFlags = formatEmitFlags;
        function formatSymbolFlags(flags) {
          return formatEnum(
            flags,
            SymbolFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatSymbolFlags = formatSymbolFlags;
        function formatTypeFlags(flags) {
          return formatEnum(
            flags,
            TypeFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatTypeFlags = formatTypeFlags;
        function formatSignatureFlags(flags) {
          return formatEnum(
            flags,
            SignatureFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatSignatureFlags = formatSignatureFlags;
        function formatObjectFlags(flags) {
          return formatEnum(
            flags,
            ObjectFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatObjectFlags = formatObjectFlags;
        function formatFlowFlags(flags) {
          return formatEnum(
            flags,
            FlowFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatFlowFlags = formatFlowFlags;
        function formatRelationComparisonResult(result) {
          return formatEnum(
            result,
            RelationComparisonResult,
            /*isFlags*/
            true
          );
        }
        Debug2.formatRelationComparisonResult = formatRelationComparisonResult;
        function formatCheckMode(mode) {
          return formatEnum(
            mode,
            CheckMode,
            /*isFlags*/
            true
          );
        }
        Debug2.formatCheckMode = formatCheckMode;
        function formatSignatureCheckMode(mode) {
          return formatEnum(
            mode,
            SignatureCheckMode,
            /*isFlags*/
            true
          );
        }
        Debug2.formatSignatureCheckMode = formatSignatureCheckMode;
        function formatTypeFacts(facts) {
          return formatEnum(
            facts,
            TypeFacts,
            /*isFlags*/
            true
          );
        }
        Debug2.formatTypeFacts = formatTypeFacts;
        let isDebugInfoEnabled = false;
        let flowNodeProto;
        function attachFlowNodeDebugInfoWorker(flowNode) {
          if (!("__debugFlowFlags" in flowNode)) {
            Object.defineProperties(flowNode, {
              // for use with vscode-js-debug's new customDescriptionGenerator in launch.json
              __tsDebuggerDisplay: {
                value() {
                  const flowHeader = this.flags & 2 /* Start */ ? "FlowStart" : this.flags & 4 /* BranchLabel */ ? "FlowBranchLabel" : this.flags & 8 /* LoopLabel */ ? "FlowLoopLabel" : this.flags & 16 /* Assignment */ ? "FlowAssignment" : this.flags & 32 /* TrueCondition */ ? "FlowTrueCondition" : this.flags & 64 /* FalseCondition */ ? "FlowFalseCondition" : this.flags & 128 /* SwitchClause */ ? "FlowSwitchClause" : this.flags & 256 /* ArrayMutation */ ? "FlowArrayMutation" : this.flags & 512 /* Call */ ? "FlowCall" : this.flags & 1024 /* ReduceLabel */ ? "FlowReduceLabel" : this.flags & 1 /* Unreachable */ ? "FlowUnreachable" : "UnknownFlow";
                  const remainingFlags = this.flags & ~(2048 /* Referenced */ - 1);
                  return `${flowHeader}${remainingFlags ? ` (${formatFlowFlags(remainingFlags)})` : ""}`;
                }
              },
              __debugFlowFlags: {
                get() {
                  return formatEnum(
                    this.flags,
                    FlowFlags,
                    /*isFlags*/
                    true
                  );
                }
              },
              __debugToString: {
                value() {
                  return formatControlFlowGraph(this);
                }
              }
            });
          }
        }
        function attachFlowNodeDebugInfo(flowNode) {
          if (isDebugInfoEnabled) {
            if (typeof Object.setPrototypeOf === "function") {
              if (!flowNodeProto) {
                flowNodeProto = Object.create(Object.prototype);
                attachFlowNodeDebugInfoWorker(flowNodeProto);
              }
              Object.setPrototypeOf(flowNode, flowNodeProto);
            } else {
              attachFlowNodeDebugInfoWorker(flowNode);
            }
          }
        }
        Debug2.attachFlowNodeDebugInfo = attachFlowNodeDebugInfo;
        let nodeArrayProto;
        function attachNodeArrayDebugInfoWorker(array) {
          if (!("__tsDebuggerDisplay" in array)) {
            Object.defineProperties(array, {
              __tsDebuggerDisplay: {
                value(defaultValue) {
                  defaultValue = String(defaultValue).replace(/(?:,[\s\w\d_]+:[^,]+)+\]$/, "]");
                  return `NodeArray ${defaultValue}`;
                }
              }
            });
          }
        }
        function attachNodeArrayDebugInfo(array) {
          if (isDebugInfoEnabled) {
            if (typeof Object.setPrototypeOf === "function") {
              if (!nodeArrayProto) {
                nodeArrayProto = Object.create(Array.prototype);
                attachNodeArrayDebugInfoWorker(nodeArrayProto);
              }
              Object.setPrototypeOf(array, nodeArrayProto);
            } else {
              attachNodeArrayDebugInfoWorker(array);
            }
          }
        }
        Debug2.attachNodeArrayDebugInfo = attachNodeArrayDebugInfo;
        function enableDebugInfo() {
          if (isDebugInfoEnabled)
            return;
          const weakTypeTextMap = /* @__PURE__ */ new WeakMap();
          const weakNodeTextMap = /* @__PURE__ */ new WeakMap();
          Object.defineProperties(objectAllocator.getSymbolConstructor().prototype, {
            // for use with vscode-js-debug's new customDescriptionGenerator in launch.json
            __tsDebuggerDisplay: {
              value() {
                const symbolHeader = this.flags & 33554432 /* Transient */ ? "TransientSymbol" : "Symbol";
                const remainingSymbolFlags = this.flags & ~33554432 /* Transient */;
                return `${symbolHeader} '${symbolName(this)}'${remainingSymbolFlags ? ` (${formatSymbolFlags(remainingSymbolFlags)})` : ""}`;
              }
            },
            __debugFlags: {
              get() {
                return formatSymbolFlags(this.flags);
              }
            }
          });
          Object.defineProperties(objectAllocator.getTypeConstructor().prototype, {
            // for use with vscode-js-debug's new customDescriptionGenerator in launch.json
            __tsDebuggerDisplay: {
              value() {
                const typeHeader = this.flags & 67359327 /* Intrinsic */ ? `IntrinsicType ${this.intrinsicName}${this.debugIntrinsicName ? ` (${this.debugIntrinsicName})` : ""}` : this.flags & 98304 /* Nullable */ ? "NullableType" : this.flags & 384 /* StringOrNumberLiteral */ ? `LiteralType ${JSON.stringify(this.value)}` : this.flags & 2048 /* BigIntLiteral */ ? `LiteralType ${this.value.negative ? "-" : ""}${this.value.base10Value}n` : this.flags & 8192 /* UniqueESSymbol */ ? "UniqueESSymbolType" : this.flags & 32 /* Enum */ ? "EnumType" : this.flags & 1048576 /* Union */ ? "UnionType" : this.flags & 2097152 /* Intersection */ ? "IntersectionType" : this.flags & 4194304 /* Index */ ? "IndexType" : this.flags & 8388608 /* IndexedAccess */ ? "IndexedAccessType" : this.flags & 16777216 /* Conditional */ ? "ConditionalType" : this.flags & 33554432 /* Substitution */ ? "SubstitutionType" : this.flags & 262144 /* TypeParameter */ ? "TypeParameter" : this.flags & 524288 /* Object */ ? this.objectFlags & 3 /* ClassOrInterface */ ? "InterfaceType" : this.objectFlags & 4 /* Reference */ ? "TypeReference" : this.objectFlags & 8 /* Tuple */ ? "TupleType" : this.objectFlags & 16 /* Anonymous */ ? "AnonymousType" : this.objectFlags & 32 /* Mapped */ ? "MappedType" : this.objectFlags & 1024 /* ReverseMapped */ ? "ReverseMappedType" : this.objectFlags & 256 /* EvolvingArray */ ? "EvolvingArrayType" : "ObjectType" : "Type";
                const remainingObjectFlags = this.flags & 524288 /* Object */ ? this.objectFlags & ~1343 /* ObjectTypeKindMask */ : 0;
                return `${typeHeader}${this.symbol ? ` '${symbolName(this.symbol)}'` : ""}${remainingObjectFlags ? ` (${formatObjectFlags(remainingObjectFlags)})` : ""}`;
              }
            },
            __debugFlags: {
              get() {
                return formatTypeFlags(this.flags);
              }
            },
            __debugObjectFlags: {
              get() {
                return this.flags & 524288 /* Object */ ? formatObjectFlags(this.objectFlags) : "";
              }
            },
            __debugTypeToString: {
              value() {
                let text = weakTypeTextMap.get(this);
                if (text === void 0) {
                  text = this.checker.typeToString(this);
                  weakTypeTextMap.set(this, text);
                }
                return text;
              }
            }
          });
          Object.defineProperties(objectAllocator.getSignatureConstructor().prototype, {
            __debugFlags: {
              get() {
                return formatSignatureFlags(this.flags);
              }
            },
            __debugSignatureToString: {
              value() {
                var _a;
                return (_a = this.checker) == null ? void 0 : _a.signatureToString(this);
              }
            }
          });
          const nodeConstructors = [
            objectAllocator.getNodeConstructor(),
            objectAllocator.getIdentifierConstructor(),
            objectAllocator.getTokenConstructor(),
            objectAllocator.getSourceFileConstructor()
          ];
          for (const ctor of nodeConstructors) {
            if (!hasProperty(ctor.prototype, "__debugKind")) {
              Object.defineProperties(ctor.prototype, {
                // for use with vscode-js-debug's new customDescriptionGenerator in launch.json
                __tsDebuggerDisplay: {
                  value() {
                    const nodeHeader = isGeneratedIdentifier(this) ? "GeneratedIdentifier" : isIdentifier(this) ? `Identifier '${idText(this)}'` : isPrivateIdentifier(this) ? `PrivateIdentifier '${idText(this)}'` : isStringLiteral(this) ? `StringLiteral ${JSON.stringify(this.text.length < 10 ? this.text : this.text.slice(10) + "...")}` : isNumericLiteral(this) ? `NumericLiteral ${this.text}` : isBigIntLiteral(this) ? `BigIntLiteral ${this.text}n` : isTypeParameterDeclaration(this) ? "TypeParameterDeclaration" : isParameter(this) ? "ParameterDeclaration" : isConstructorDeclaration(this) ? "ConstructorDeclaration" : isGetAccessorDeclaration(this) ? "GetAccessorDeclaration" : isSetAccessorDeclaration(this) ? "SetAccessorDeclaration" : isCallSignatureDeclaration(this) ? "CallSignatureDeclaration" : isConstructSignatureDeclaration(this) ? "ConstructSignatureDeclaration" : isIndexSignatureDeclaration(this) ? "IndexSignatureDeclaration" : isTypePredicateNode(this) ? "TypePredicateNode" : isTypeReferenceNode(this) ? "TypeReferenceNode" : isFunctionTypeNode(this) ? "FunctionTypeNode" : isConstructorTypeNode(this) ? "ConstructorTypeNode" : isTypeQueryNode(this) ? "TypeQueryNode" : isTypeLiteralNode(this) ? "TypeLiteralNode" : isArrayTypeNode(this) ? "ArrayTypeNode" : isTupleTypeNode(this) ? "TupleTypeNode" : isOptionalTypeNode(this) ? "OptionalTypeNode" : isRestTypeNode(this) ? "RestTypeNode" : isUnionTypeNode(this) ? "UnionTypeNode" : isIntersectionTypeNode(this) ? "IntersectionTypeNode" : isConditionalTypeNode(this) ? "ConditionalTypeNode" : isInferTypeNode(this) ? "InferTypeNode" : isParenthesizedTypeNode(this) ? "ParenthesizedTypeNode" : isThisTypeNode(this) ? "ThisTypeNode" : isTypeOperatorNode(this) ? "TypeOperatorNode" : isIndexedAccessTypeNode(this) ? "IndexedAccessTypeNode" : isMappedTypeNode(this) ? "MappedTypeNode" : isLiteralTypeNode(this) ? "LiteralTypeNode" : isNamedTupleMember(this) ? "NamedTupleMember" : isImportTypeNode(this) ? "ImportTypeNode" : formatSyntaxKind(this.kind);
                    return `${nodeHeader}${this.flags ? ` (${formatNodeFlags(this.flags)})` : ""}`;
                  }
                },
                __debugKind: {
                  get() {
                    return formatSyntaxKind(this.kind);
                  }
                },
                __debugNodeFlags: {
                  get() {
                    return formatNodeFlags(this.flags);
                  }
                },
                __debugModifierFlags: {
                  get() {
                    return formatModifierFlags(getEffectiveModifierFlagsNoCache(this));
                  }
                },
                __debugTransformFlags: {
                  get() {
                    return formatTransformFlags(this.transformFlags);
                  }
                },
                __debugIsParseTreeNode: {
                  get() {
                    return isParseTreeNode(this);
                  }
                },
                __debugEmitFlags: {
                  get() {
                    return formatEmitFlags(getEmitFlags(this));
                  }
                },
                __debugGetText: {
                  value(includeTrivia) {
                    if (nodeIsSynthesized(this))
                      return "";
                    let text = weakNodeTextMap.get(this);
                    if (text === void 0) {
                      const parseNode = getParseTreeNode(this);
                      const sourceFile = parseNode && getSourceFileOfNode(parseNode);
                      text = sourceFile ? getSourceTextOfNodeFromSourceFile(sourceFile, parseNode, includeTrivia) : "";
                      weakNodeTextMap.set(this, text);
                    }
                    return text;
                  }
                }
              });
            }
          }
          isDebugInfoEnabled = true;
        }
        Debug2.enableDebugInfo = enableDebugInfo;
        function formatVariance(varianceFlags) {
          const variance = varianceFlags & 7 /* VarianceMask */;
          let result = variance === 0 /* Invariant */ ? "in out" : variance === 3 /* Bivariant */ ? "[bivariant]" : variance === 2 /* Contravariant */ ? "in" : variance === 1 /* Covariant */ ? "out" : variance === 4 /* Independent */ ? "[independent]" : "";
          if (varianceFlags & 8 /* Unmeasurable */) {
            result += " (unmeasurable)";
          } else if (varianceFlags & 16 /* Unreliable */) {
            result += " (unreliable)";
          }
          return result;
        }
        Debug2.formatVariance = formatVariance;
        class DebugTypeMapper {
          __debugToString() {
            var _a;
            type(this);
            switch (this.kind) {
              case 3 /* Function */:
                return ((_a = this.debugInfo) == null ? void 0 : _a.call(this)) || "(function mapper)";
              case 0 /* Simple */:
                return `${this.source.__debugTypeToString()} -> ${this.target.__debugTypeToString()}`;
              case 1 /* Array */:
                return zipWith(
                  this.sources,
                  this.targets || map(this.sources, () => "any"),
                  (s, t) => `${s.__debugTypeToString()} -> ${typeof t === "string" ? t : t.__debugTypeToString()}`
                ).join(", ");
              case 2 /* Deferred */:
                return zipWith(
                  this.sources,
                  this.targets,
                  (s, t) => `${s.__debugTypeToString()} -> ${t().__debugTypeToString()}`
                ).join(", ");
              case 5 /* Merged */:
              case 4 /* Composite */:
                return `m1: ${this.mapper1.__debugToString().split("\n").join("\n    ")}
m2: ${this.mapper2.__debugToString().split("\n").join("\n    ")}`;
              default:
                return assertNever(this);
            }
          }
        }
        Debug2.DebugTypeMapper = DebugTypeMapper;
        function attachDebugPrototypeIfDebug(mapper) {
          if (Debug2.isDebugging) {
            return Object.setPrototypeOf(mapper, DebugTypeMapper.prototype);
          }
          return mapper;
        }
        Debug2.attachDebugPrototypeIfDebug = attachDebugPrototypeIfDebug;
        function printControlFlowGraph(flowNode) {
          return console.log(formatControlFlowGraph(flowNode));
        }
        Debug2.printControlFlowGraph = printControlFlowGraph;
        function formatControlFlowGraph(flowNode) {
          let nextDebugFlowId = -1;
          function getDebugFlowNodeId(f) {
            if (!f.id) {
              f.id = nextDebugFlowId;
              nextDebugFlowId--;
            }
            return f.id;
          }
          let BoxCharacter;
          ((BoxCharacter2) => {
            BoxCharacter2["lr"] = "\u2500";
            BoxCharacter2["ud"] = "\u2502";
            BoxCharacter2["dr"] = "\u256D";
            BoxCharacter2["dl"] = "\u256E";
            BoxCharacter2["ul"] = "\u256F";
            BoxCharacter2["ur"] = "\u2570";
            BoxCharacter2["udr"] = "\u251C";
            BoxCharacter2["udl"] = "\u2524";
            BoxCharacter2["dlr"] = "\u252C";
            BoxCharacter2["ulr"] = "\u2534";
            BoxCharacter2["udlr"] = "\u256B";
          })(BoxCharacter || (BoxCharacter = {}));
          let Connection;
          ((Connection2) => {
            Connection2[Connection2["None"] = 0] = "None";
            Connection2[Connection2["Up"] = 1] = "Up";
            Connection2[Connection2["Down"] = 2] = "Down";
            Connection2[Connection2["Left"] = 4] = "Left";
            Connection2[Connection2["Right"] = 8] = "Right";
            Connection2[Connection2["UpDown"] = 3] = "UpDown";
            Connection2[Connection2["LeftRight"] = 12] = "LeftRight";
            Connection2[Connection2["UpLeft"] = 5] = "UpLeft";
            Connection2[Connection2["UpRight"] = 9] = "UpRight";
            Connection2[Connection2["DownLeft"] = 6] = "DownLeft";
            Connection2[Connection2["DownRight"] = 10] = "DownRight";
            Connection2[Connection2["UpDownLeft"] = 7] = "UpDownLeft";
            Connection2[Connection2["UpDownRight"] = 11] = "UpDownRight";
            Connection2[Connection2["UpLeftRight"] = 13] = "UpLeftRight";
            Connection2[Connection2["DownLeftRight"] = 14] = "DownLeftRight";
            Connection2[Connection2["UpDownLeftRight"] = 15] = "UpDownLeftRight";
            Connection2[Connection2["NoChildren"] = 16] = "NoChildren";
          })(Connection || (Connection = {}));
          const hasAntecedentFlags = 16 /* Assignment */ | 96 /* Condition */ | 128 /* SwitchClause */ | 256 /* ArrayMutation */ | 512 /* Call */ | 1024 /* ReduceLabel */;
          const hasNodeFlags = 2 /* Start */ | 16 /* Assignment */ | 512 /* Call */ | 96 /* Condition */ | 256 /* ArrayMutation */;
          const links = /* @__PURE__ */ Object.create(
            /*o*/
            null
          );
          const nodes = [];
          const edges = [];
          const root = buildGraphNode(flowNode, /* @__PURE__ */ new Set());
          for (const node of nodes) {
            node.text = renderFlowNode(node.flowNode, node.circular);
            computeLevel(node);
          }
          const height = computeHeight(root);
          const columnWidths = computeColumnWidths(height);
          computeLanes(root, 0);
          return renderGraph();
          function isFlowSwitchClause(f) {
            return !!(f.flags & 128 /* SwitchClause */);
          }
          function hasAntecedents(f) {
            return !!(f.flags & 12 /* Label */) && !!f.antecedents;
          }
          function hasAntecedent(f) {
            return !!(f.flags & hasAntecedentFlags);
          }
          function hasNode(f) {
            return !!(f.flags & hasNodeFlags);
          }
          function getChildren(node) {
            const children = [];
            for (const edge of node.edges) {
              if (edge.source === node) {
                children.push(edge.target);
              }
            }
            return children;
          }
          function getParents(node) {
            const parents = [];
            for (const edge of node.edges) {
              if (edge.target === node) {
                parents.push(edge.source);
              }
            }
            return parents;
          }
          function buildGraphNode(flowNode2, seen) {
            const id = getDebugFlowNodeId(flowNode2);
            let graphNode = links[id];
            if (graphNode && seen.has(flowNode2)) {
              graphNode.circular = true;
              graphNode = {
                id: -1,
                flowNode: flowNode2,
                edges: [],
                text: "",
                lane: -1,
                endLane: -1,
                level: -1,
                circular: "circularity"
              };
              nodes.push(graphNode);
              return graphNode;
            }
            seen.add(flowNode2);
            if (!graphNode) {
              links[id] = graphNode = { id, flowNode: flowNode2, edges: [], text: "", lane: -1, endLane: -1, level: -1, circular: false };
              nodes.push(graphNode);
              if (hasAntecedents(flowNode2)) {
                for (const antecedent of flowNode2.antecedents) {
                  buildGraphEdge(graphNode, antecedent, seen);
                }
              } else if (hasAntecedent(flowNode2)) {
                buildGraphEdge(graphNode, flowNode2.antecedent, seen);
              }
            }
            seen.delete(flowNode2);
            return graphNode;
          }
          function buildGraphEdge(source, antecedent, seen) {
            const target = buildGraphNode(antecedent, seen);
            const edge = { source, target };
            edges.push(edge);
            source.edges.push(edge);
            target.edges.push(edge);
          }
          function computeLevel(node) {
            if (node.level !== -1) {
              return node.level;
            }
            let level = 0;
            for (const parent2 of getParents(node)) {
              level = Math.max(level, computeLevel(parent2) + 1);
            }
            return node.level = level;
          }
          function computeHeight(node) {
            let height2 = 0;
            for (const child of getChildren(node)) {
              height2 = Math.max(height2, computeHeight(child));
            }
            return height2 + 1;
          }
          function computeColumnWidths(height2) {
            const columns = fill(Array(height2), 0);
            for (const node of nodes) {
              columns[node.level] = Math.max(columns[node.level], node.text.length);
            }
            return columns;
          }
          function computeLanes(node, lane) {
            if (node.lane === -1) {
              node.lane = lane;
              node.endLane = lane;
              const children = getChildren(node);
              for (let i = 0; i < children.length; i++) {
                if (i > 0)
                  lane++;
                const child = children[i];
                computeLanes(child, lane);
                if (child.endLane > node.endLane) {
                  lane = child.endLane;
                }
              }
              node.endLane = lane;
            }
          }
          function getHeader(flags) {
            if (flags & 2 /* Start */)
              return "Start";
            if (flags & 4 /* BranchLabel */)
              return "Branch";
            if (flags & 8 /* LoopLabel */)
              return "Loop";
            if (flags & 16 /* Assignment */)
              return "Assignment";
            if (flags & 32 /* TrueCondition */)
              return "True";
            if (flags & 64 /* FalseCondition */)
              return "False";
            if (flags & 128 /* SwitchClause */)
              return "SwitchClause";
            if (flags & 256 /* ArrayMutation */)
              return "ArrayMutation";
            if (flags & 512 /* Call */)
              return "Call";
            if (flags & 1024 /* ReduceLabel */)
              return "ReduceLabel";
            if (flags & 1 /* Unreachable */)
              return "Unreachable";
            throw new Error();
          }
          function getNodeText(node) {
            const sourceFile = getSourceFileOfNode(node);
            return getSourceTextOfNodeFromSourceFile(
              sourceFile,
              node,
              /*includeTrivia*/
              false
            );
          }
          function renderFlowNode(flowNode2, circular) {
            let text = getHeader(flowNode2.flags);
            if (circular) {
              text = `${text}#${getDebugFlowNodeId(flowNode2)}`;
            }
            if (hasNode(flowNode2)) {
              if (flowNode2.node) {
                text += ` (${getNodeText(flowNode2.node)})`;
              }
            } else if (isFlowSwitchClause(flowNode2)) {
              const clauses = [];
              for (let i = flowNode2.clauseStart; i < flowNode2.clauseEnd; i++) {
                const clause = flowNode2.switchStatement.caseBlock.clauses[i];
                if (isDefaultClause(clause)) {
                  clauses.push("default");
                } else {
                  clauses.push(getNodeText(clause.expression));
                }
              }
              text += ` (${clauses.join(", ")})`;
            }
            return circular === "circularity" ? `Circular(${text})` : text;
          }
          function renderGraph() {
            const columnCount = columnWidths.length;
            const laneCount = nodes.reduce((x, n) => Math.max(x, n.lane), 0) + 1;
            const lanes = fill(Array(laneCount), "");
            const grid = columnWidths.map(() => Array(laneCount));
            const connectors = columnWidths.map(() => fill(Array(laneCount), 0));
            for (const node of nodes) {
              grid[node.level][node.lane] = node;
              const children = getChildren(node);
              for (let i = 0; i < children.length; i++) {
                const child = children[i];
                let connector = 8 /* Right */;
                if (child.lane === node.lane)
                  connector |= 4 /* Left */;
                if (i > 0)
                  connector |= 1 /* Up */;
                if (i < children.length - 1)
                  connector |= 2 /* Down */;
                connectors[node.level][child.lane] |= connector;
              }
              if (children.length === 0) {
                connectors[node.level][node.lane] |= 16 /* NoChildren */;
              }
              const parents = getParents(node);
              for (let i = 0; i < parents.length; i++) {
                const parent2 = parents[i];
                let connector = 4 /* Left */;
                if (i > 0)
                  connector |= 1 /* Up */;
                if (i < parents.length - 1)
                  connector |= 2 /* Down */;
                connectors[node.level - 1][parent2.lane] |= connector;
              }
            }
            for (let column = 0; column < columnCount; column++) {
              for (let lane = 0; lane < laneCount; lane++) {
                const left = column > 0 ? connectors[column - 1][lane] : 0;
                const above = lane > 0 ? connectors[column][lane - 1] : 0;
                let connector = connectors[column][lane];
                if (!connector) {
                  if (left & 8 /* Right */)
                    connector |= 12 /* LeftRight */;
                  if (above & 2 /* Down */)
                    connector |= 3 /* UpDown */;
                  connectors[column][lane] = connector;
                }
              }
            }
            for (let column = 0; column < columnCount; column++) {
              for (let lane = 0; lane < lanes.length; lane++) {
                const connector = connectors[column][lane];
                const fill2 = connector & 4 /* Left */ ? "\u2500" /* lr */ : " ";
                const node = grid[column][lane];
                if (!node) {
                  if (column < columnCount - 1) {
                    writeLane(lane, repeat(fill2, columnWidths[column] + 1));
                  }
                } else {
                  writeLane(lane, node.text);
                  if (column < columnCount - 1) {
                    writeLane(lane, " ");
                    writeLane(lane, repeat(fill2, columnWidths[column] - node.text.length));
                  }
                }
                writeLane(lane, getBoxCharacter(connector));
                writeLane(lane, connector & 8 /* Right */ && column < columnCount - 1 && !grid[column + 1][lane] ? "\u2500" /* lr */ : " ");
              }
            }
            return `
${lanes.join("\n")}
`;
            function writeLane(lane, text) {
              lanes[lane] += text;
            }
          }
          function getBoxCharacter(connector) {
            switch (connector) {
              case 3 /* UpDown */:
                return "\u2502" /* ud */;
              case 12 /* LeftRight */:
                return "\u2500" /* lr */;
              case 5 /* UpLeft */:
                return "\u256F" /* ul */;
              case 9 /* UpRight */:
                return "\u2570" /* ur */;
              case 6 /* DownLeft */:
                return "\u256E" /* dl */;
              case 10 /* DownRight */:
                return "\u256D" /* dr */;
              case 7 /* UpDownLeft */:
                return "\u2524" /* udl */;
              case 11 /* UpDownRight */:
                return "\u251C" /* udr */;
              case 13 /* UpLeftRight */:
                return "\u2534" /* ulr */;
              case 14 /* DownLeftRight */:
                return "\u252C" /* dlr */;
              case 15 /* UpDownLeftRight */:
                return "\u256B" /* udlr */;
            }
            return " ";
          }
          function fill(array, value) {
            if (array.fill) {
              array.fill(value);
            } else {
              for (let i = 0; i < array.length; i++) {
                array[i] = value;
              }
            }
            return array;
          }
          function repeat(ch, length2) {
            if (ch.repeat) {
              return length2 > 0 ? ch.repeat(length2) : "";
            }
            let s = "";
            while (s.length < length2) {
              s += ch;
            }
            return s;
          }
        }
        Debug2.formatControlFlowGraph = formatControlFlowGraph;
      })(Debug || (Debug = {}));
    }
  });

  // src/compiler/semver.ts
  function tryParseComponents(text) {
    const match = versionRegExp.exec(text);
    if (!match)
      return void 0;
    const [, major, minor = "0", patch = "0", prerelease = "", build2 = ""] = match;
    if (prerelease && !prereleaseRegExp.test(prerelease))
      return void 0;
    if (build2 && !buildRegExp.test(build2))
      return void 0;
    return {
      major: parseInt(major, 10),
      minor: parseInt(minor, 10),
      patch: parseInt(patch, 10),
      prerelease,
      build: build2
    };
  }
  function comparePrereleaseIdentifiers(left, right) {
    if (left === right)
      return 0 /* EqualTo */;
    if (left.length === 0)
      return right.length === 0 ? 0 /* EqualTo */ : 1 /* GreaterThan */;
    if (right.length === 0)
      return -1 /* LessThan */;
    const length2 = Math.min(left.length, right.length);
    for (let i = 0; i < length2; i++) {
      const leftIdentifier = left[i];
      const rightIdentifier = right[i];
      if (leftIdentifier === rightIdentifier)
        continue;
      const leftIsNumeric = numericIdentifierRegExp.test(leftIdentifier);
      const rightIsNumeric = numericIdentifierRegExp.test(rightIdentifier);
      if (leftIsNumeric || rightIsNumeric) {
        if (leftIsNumeric !== rightIsNumeric)
          return leftIsNumeric ? -1 /* LessThan */ : 1 /* GreaterThan */;
        const result = compareValues(+leftIdentifier, +rightIdentifier);
        if (result)
          return result;
      } else {
        const result = compareStringsCaseSensitive(leftIdentifier, rightIdentifier);
        if (result)
          return result;
      }
    }
    return compareValues(left.length, right.length);
  }
  function parseRange(text) {
    const alternatives = [];
    for (let range of text.trim().split(logicalOrRegExp)) {
      if (!range)
        continue;
      const comparators = [];
      range = range.trim();
      const match = hyphenRegExp.exec(range);
      if (match) {
        if (!parseHyphen(match[1], match[2], comparators))
          return void 0;
      } else {
        for (const simple of range.split(whitespaceRegExp)) {
          const match2 = rangeRegExp.exec(simple.trim());
          if (!match2 || !parseComparator(match2[1], match2[2], comparators))
            return void 0;
        }
      }
      alternatives.push(comparators);
    }
    return alternatives;
  }
  function parsePartial(text) {
    const match = partialRegExp.exec(text);
    if (!match)
      return void 0;
    const [, major, minor = "*", patch = "*", prerelease, build2] = match;
    const version2 = new Version(
      isWildcard(major) ? 0 : parseInt(major, 10),
      isWildcard(major) || isWildcard(minor) ? 0 : parseInt(minor, 10),
      isWildcard(major) || isWildcard(minor) || isWildcard(patch) ? 0 : parseInt(patch, 10),
      prerelease,
      build2
    );
    return { version: version2, major, minor, patch };
  }
  function parseHyphen(left, right, comparators) {
    const leftResult = parsePartial(left);
    if (!leftResult)
      return false;
    const rightResult = parsePartial(right);
    if (!rightResult)
      return false;
    if (!isWildcard(leftResult.major)) {
      comparators.push(createComparator(">=", leftResult.version));
    }
    if (!isWildcard(rightResult.major)) {
      comparators.push(
        isWildcard(rightResult.minor) ? createComparator("<", rightResult.version.increment("major")) : isWildcard(rightResult.patch) ? createComparator("<", rightResult.version.increment("minor")) : createComparator("<=", rightResult.version)
      );
    }
    return true;
  }
  function parseComparator(operator, text, comparators) {
    const result = parsePartial(text);
    if (!result)
      return false;
    const { version: version2, major, minor, patch } = result;
    if (!isWildcard(major)) {
      switch (operator) {
        case "~":
          comparators.push(createComparator(">=", version2));
          comparators.push(createComparator(
            "<",
            version2.increment(
              isWildcard(minor) ? "major" : "minor"
            )
          ));
          break;
        case "^":
          comparators.push(createComparator(">=", version2));
          comparators.push(createComparator(
            "<",
            version2.increment(
              version2.major > 0 || isWildcard(minor) ? "major" : version2.minor > 0 || isWildcard(patch) ? "minor" : "patch"
            )
          ));
          break;
        case "<":
        case ">=":
          comparators.push(
            isWildcard(minor) || isWildcard(patch) ? createComparator(operator, version2.with({ prerelease: "0" })) : createComparator(operator, version2)
          );
          break;
        case "<=":
        case ">":
          comparators.push(
            isWildcard(minor) ? createComparator(operator === "<=" ? "<" : ">=", version2.increment("major").with({ prerelease: "0" })) : isWildcard(patch) ? createComparator(operator === "<=" ? "<" : ">=", version2.increment("minor").with({ prerelease: "0" })) : createComparator(operator, version2)
          );
          break;
        case "=":
        case void 0:
          if (isWildcard(minor) || isWildcard(patch)) {
            comparators.push(createComparator(">=", version2.with({ prerelease: "0" })));
            comparators.push(createComparator("<", version2.increment(isWildcard(minor) ? "major" : "minor").with({ prerelease: "0" })));
          } else {
            comparators.push(createComparator("=", version2));
          }
          break;
        default:
          return false;
      }
    } else if (operator === "<" || operator === ">") {
      comparators.push(createComparator("<", Version.zero));
    }
    return true;
  }
  function isWildcard(part) {
    return part === "*" || part === "x" || part === "X";
  }
  function createComparator(operator, operand) {
    return { operator, operand };
  }
  function testDisjunction(version2, alternatives) {
    if (alternatives.length === 0)
      return true;
    for (const alternative of alternatives) {
      if (testAlternative(version2, alternative))
        return true;
    }
    return false;
  }
  function testAlternative(version2, comparators) {
    for (const comparator of comparators) {
      if (!testComparator(version2, comparator.operator, comparator.operand))
        return false;
    }
    return true;
  }
  function testComparator(version2, operator, operand) {
    const cmp = version2.compareTo(operand);
    switch (operator) {
      case "<":
        return cmp < 0;
      case "<=":
        return cmp <= 0;
      case ">":
        return cmp > 0;
      case ">=":
        return cmp >= 0;
      case "=":
        return cmp === 0;
      default:
        return Debug.assertNever(operator);
    }
  }
  function formatDisjunction(alternatives) {
    return map(alternatives, formatAlternative).join(" || ") || "*";
  }
  function formatAlternative(comparators) {
    return map(comparators, formatComparator).join(" ");
  }
  function formatComparator(comparator) {
    return `${comparator.operator}${comparator.operand}`;
  }
  var versionRegExp, prereleaseRegExp, prereleasePartRegExp, buildRegExp, buildPartRegExp, numericIdentifierRegExp, _Version, Version, VersionRange, logicalOrRegExp, whitespaceRegExp, partialRegExp, hyphenRegExp, rangeRegExp;
  var init_semver = __esm({
    "src/compiler/semver.ts"() {
      "use strict";
      init_ts2();
      versionRegExp = /^(0|[1-9]\d*)(?:\.(0|[1-9]\d*)(?:\.(0|[1-9]\d*)(?:-([a-z0-9-.]+))?(?:\+([a-z0-9-.]+))?)?)?$/i;
      prereleaseRegExp = /^(?:0|[1-9]\d*|[a-z-][a-z0-9-]*)(?:\.(?:0|[1-9]\d*|[a-z-][a-z0-9-]*))*$/i;
      prereleasePartRegExp = /^(?:0|[1-9]\d*|[a-z-][a-z0-9-]*)$/i;
      buildRegExp = /^[a-z0-9-]+(?:\.[a-z0-9-]+)*$/i;
      buildPartRegExp = /^[a-z0-9-]+$/i;
      numericIdentifierRegExp = /^(0|[1-9]\d*)$/;
      _Version = class _Version {
        constructor(major, minor = 0, patch = 0, prerelease = "", build2 = "") {
          if (typeof major === "string") {
            const result = Debug.checkDefined(tryParseComponents(major), "Invalid version");
            ({ major, minor, patch, prerelease, build: build2 } = result);
          }
          Debug.assert(major >= 0, "Invalid argument: major");
          Debug.assert(minor >= 0, "Invalid argument: minor");
          Debug.assert(patch >= 0, "Invalid argument: patch");
          const prereleaseArray = prerelease ? isArray(prerelease) ? prerelease : prerelease.split(".") : emptyArray;
          const buildArray = build2 ? isArray(build2) ? build2 : build2.split(".") : emptyArray;
          Debug.assert(every(prereleaseArray, (s) => prereleasePartRegExp.test(s)), "Invalid argument: prerelease");
          Debug.assert(every(buildArray, (s) => buildPartRegExp.test(s)), "Invalid argument: build");
          this.major = major;
          this.minor = minor;
          this.patch = patch;
          this.prerelease = prereleaseArray;
          this.build = buildArray;
        }
        static tryParse(text) {
          const result = tryParseComponents(text);
          if (!result)
            return void 0;
          const { major, minor, patch, prerelease, build: build2 } = result;
          return new _Version(major, minor, patch, prerelease, build2);
        }
        compareTo(other) {
          if (this === other)
            return 0 /* EqualTo */;
          if (other === void 0)
            return 1 /* GreaterThan */;
          return compareValues(this.major, other.major) || compareValues(this.minor, other.minor) || compareValues(this.patch, other.patch) || comparePrereleaseIdentifiers(this.prerelease, other.prerelease);
        }
        increment(field) {
          switch (field) {
            case "major":
              return new _Version(this.major + 1, 0, 0);
            case "minor":
              return new _Version(this.major, this.minor + 1, 0);
            case "patch":
              return new _Version(this.major, this.minor, this.patch + 1);
            default:
              return Debug.assertNever(field);
          }
        }
        with(fields) {
          const {
            major = this.major,
            minor = this.minor,
            patch = this.patch,
            prerelease = this.prerelease,
            build: build2 = this.build
          } = fields;
          return new _Version(major, minor, patch, prerelease, build2);
        }
        toString() {
          let result = `${this.major}.${this.minor}.${this.patch}`;
          if (some(this.prerelease))
            result += `-${this.prerelease.join(".")}`;
          if (some(this.build))
            result += `+${this.build.join(".")}`;
          return result;
        }
      };
      _Version.zero = new _Version(0, 0, 0, ["0"]);
      Version = _Version;
      VersionRange = class _VersionRange {
        constructor(spec) {
          this._alternatives = spec ? Debug.checkDefined(parseRange(spec), "Invalid range spec.") : emptyArray;
        }
        static tryParse(text) {
          const sets = parseRange(text);
          if (sets) {
            const range = new _VersionRange("");
            range._alternatives = sets;
            return range;
          }
          return void 0;
        }
        /**
         * Tests whether a version matches the range. This is equivalent to `satisfies(version, range, { includePrerelease: true })`.
         * in `node-semver`.
         */
        test(version2) {
          if (typeof version2 === "string")
            version2 = new Version(version2);
          return testDisjunction(version2, this._alternatives);
        }
        toString() {
          return formatDisjunction(this._alternatives);
        }
      };
      logicalOrRegExp = /\|\|/g;
      whitespaceRegExp = /\s+/g;
      partialRegExp = /^([xX*0]|[1-9]\d*)(?:\.([xX*0]|[1-9]\d*)(?:\.([xX*0]|[1-9]\d*)(?:-([a-z0-9-.]+))?(?:\+([a-z0-9-.]+))?)?)?$/i;
      hyphenRegExp = /^\s*([a-z0-9-+.*]+)\s+-\s+([a-z0-9-+.*]+)\s*$/i;
      rangeRegExp = /^(~|\^|<|<=|>|>=|=)?\s*([a-z0-9-+.*]+)$/i;
    }
  });

  // src/compiler/performanceCore.ts
  function hasRequiredAPI(performance2, PerformanceObserver2) {
    return typeof performance2 === "object" && typeof performance2.timeOrigin === "number" && typeof performance2.mark === "function" && typeof performance2.measure === "function" && typeof performance2.now === "function" && typeof performance2.clearMarks === "function" && typeof performance2.clearMeasures === "function" && typeof PerformanceObserver2 === "function";
  }
  function tryGetWebPerformanceHooks() {
    if (typeof performance === "object" && typeof PerformanceObserver === "function" && hasRequiredAPI(performance, PerformanceObserver)) {
      return {
        // For now we always write native performance events when running in the browser. We may
        // make this conditional in the future if we find that native web performance hooks
        // in the browser also slow down compilation.
        shouldWriteNativeEvents: true,
        performance,
        PerformanceObserver
      };
    }
  }
  function tryGetNodePerformanceHooks() {
    if (isNodeLikeSystem()) {
      try {
        const { performance: performance2, PerformanceObserver: PerformanceObserver2 } = require("perf_hooks");
        if (hasRequiredAPI(performance2, PerformanceObserver2)) {
          return {
            // By default, only write native events when generating a cpu profile or using the v8 profiler.
            shouldWriteNativeEvents: false,
            performance: performance2,
            PerformanceObserver: PerformanceObserver2
          };
        }
      } catch {
      }
    }
  }
  function tryGetNativePerformanceHooks() {
    return nativePerformanceHooks;
  }
  var nativePerformanceHooks, nativePerformance, timestamp;
  var init_performanceCore = __esm({
    "src/compiler/performanceCore.ts"() {
      "use strict";
      init_ts2();
      nativePerformanceHooks = tryGetWebPerformanceHooks() || tryGetNodePerformanceHooks();
      nativePerformance = nativePerformanceHooks == null ? void 0 : nativePerformanceHooks.performance;
      timestamp = nativePerformance ? () => nativePerformance.now() : Date.now ? Date.now : () => +/* @__PURE__ */ new Date();
    }
  });

  // src/compiler/perfLogger.ts
  var etwModule, perfLogger;
  var init_perfLogger = __esm({
    "src/compiler/perfLogger.ts"() {
      "use strict";
      try {
        const etwModulePath = process.env.TS_ETW_MODULE_PATH ?? "./node_modules/@microsoft/typescript-etw";
        etwModule = require(etwModulePath);
      } catch (e) {
        etwModule = void 0;
      }
      perfLogger = (etwModule == null ? void 0 : etwModule.logEvent) ? etwModule : void 0;
    }
  });

  // src/compiler/performance.ts
  function createTimerIf(condition, measureName, startMarkName, endMarkName) {
    return condition ? createTimer(measureName, startMarkName, endMarkName) : nullTimer;
  }
  function createTimer(measureName, startMarkName, endMarkName) {
    let enterCount = 0;
    return {
      enter,
      exit
    };
    function enter() {
      if (++enterCount === 1) {
        mark(startMarkName);
      }
    }
    function exit() {
      if (--enterCount === 0) {
        mark(endMarkName);
        measure(measureName, startMarkName, endMarkName);
      } else if (enterCount < 0) {
        Debug.fail("enter/exit count does not match.");
      }
    }
  }
  function mark(markName) {
    if (enabled) {
      const count = counts.get(markName) ?? 0;
      counts.set(markName, count + 1);
      marks.set(markName, timestamp());
      performanceImpl == null ? void 0 : performanceImpl.mark(markName);
      if (typeof onProfilerEvent === "function") {
        onProfilerEvent(markName);
      }
    }
  }
  function measure(measureName, startMarkName, endMarkName) {
    if (enabled) {
      const end = (endMarkName !== void 0 ? marks.get(endMarkName) : void 0) ?? timestamp();
      const start = (startMarkName !== void 0 ? marks.get(startMarkName) : void 0) ?? timeorigin;
      const previousDuration = durations.get(measureName) || 0;
      durations.set(measureName, previousDuration + (end - start));
      performanceImpl == null ? void 0 : performanceImpl.measure(measureName, startMarkName, endMarkName);
    }
  }
  function getCount(markName) {
    return counts.get(markName) || 0;
  }
  function getDuration(measureName) {
    return durations.get(measureName) || 0;
  }
  function forEachMeasure(cb) {
    durations.forEach((duration, measureName) => cb(measureName, duration));
  }
  function forEachMark(cb) {
    marks.forEach((_time, markName) => cb(markName));
  }
  function clearMeasures(name) {
    if (name !== void 0)
      durations.delete(name);
    else
      durations.clear();
    performanceImpl == null ? void 0 : performanceImpl.clearMeasures(name);
  }
  function clearMarks(name) {
    if (name !== void 0) {
      counts.delete(name);
      marks.delete(name);
    } else {
      counts.clear();
      marks.clear();
    }
    performanceImpl == null ? void 0 : performanceImpl.clearMarks(name);
  }
  function isEnabled() {
    return enabled;
  }
  function enable(system = sys) {
    var _a;
    if (!enabled) {
      enabled = true;
      perfHooks || (perfHooks = tryGetNativePerformanceHooks());
      if (perfHooks) {
        timeorigin = perfHooks.performance.timeOrigin;
        if (perfHooks.shouldWriteNativeEvents || ((_a = system == null ? void 0 : system.cpuProfilingEnabled) == null ? void 0 : _a.call(system)) || (system == null ? void 0 : system.debugMode)) {
          performanceImpl = perfHooks.performance;
        }
      }
    }
    return true;
  }
  function disable() {
    if (enabled) {
      marks.clear();
      counts.clear();
      durations.clear();
      performanceImpl = void 0;
      enabled = false;
    }
  }
  var perfHooks, performanceImpl, nullTimer, enabled, timeorigin, marks, counts, durations;
  var init_performance = __esm({
    "src/compiler/performance.ts"() {
      "use strict";
      init_ts2();
      nullTimer = { enter: noop, exit: noop };
      enabled = false;
      timeorigin = timestamp();
      marks = /* @__PURE__ */ new Map();
      counts = /* @__PURE__ */ new Map();
      durations = /* @__PURE__ */ new Map();
    }
  });

  // src/compiler/_namespaces/ts.performance.ts
  var ts_performance_exports = {};
  __export(ts_performance_exports, {
    clearMarks: () => clearMarks,
    clearMeasures: () => clearMeasures,
    createTimer: () => createTimer,
    createTimerIf: () => createTimerIf,
    disable: () => disable,
    enable: () => enable,
    forEachMark: () => forEachMark,
    forEachMeasure: () => forEachMeasure,
    getCount: () => getCount,
    getDuration: () => getDuration,
    isEnabled: () => isEnabled,
    mark: () => mark,
    measure: () => measure,
    nullTimer: () => nullTimer
  });
  var init_ts_performance = __esm({
    "src/compiler/_namespaces/ts.performance.ts"() {
      "use strict";
      init_performance();
    }
  });

  // src/compiler/tracing.ts
  var tracing, tracingEnabled, startTracing, dumpTracingLegend;
  var init_tracing = __esm({
    "src/compiler/tracing.ts"() {
      "use strict";
      init_ts2();
      init_ts_performance();
      ((tracingEnabled2) => {
        let fs;
        let traceCount = 0;
        let traceFd = 0;
        let mode;
        const typeCatalog = [];
        let legendPath;
        const legend = [];
        function startTracing2(tracingMode, traceDir, configFilePath) {
          Debug.assert(!tracing, "Tracing already started");
          if (fs === void 0) {
            try {
              fs = require("fs");
            } catch (e) {
              throw new Error(`tracing requires having fs
(original error: ${e.message || e})`);
            }
          }
          mode = tracingMode;
          typeCatalog.length = 0;
          if (legendPath === void 0) {
            legendPath = combinePaths(traceDir, "legend.json");
          }
          if (!fs.existsSync(traceDir)) {
            fs.mkdirSync(traceDir, { recursive: true });
          }
          const countPart = mode === "build" ? `.${process.pid}-${++traceCount}` : mode === "server" ? `.${process.pid}` : ``;
          const tracePath = combinePaths(traceDir, `trace${countPart}.json`);
          const typesPath = combinePaths(traceDir, `types${countPart}.json`);
          legend.push({
            configFilePath,
            tracePath,
            typesPath
          });
          traceFd = fs.openSync(tracePath, "w");
          tracing = tracingEnabled2;
          const meta = { cat: "__metadata", ph: "M", ts: 1e3 * timestamp(), pid: 1, tid: 1 };
          fs.writeSync(
            traceFd,
            "[\n" + [{ name: "process_name", args: { name: "tsc" }, ...meta }, { name: "thread_name", args: { name: "Main" }, ...meta }, { name: "TracingStartedInBrowser", ...meta, cat: "disabled-by-default-devtools.timeline" }].map((v) => JSON.stringify(v)).join(",\n")
          );
        }
        tracingEnabled2.startTracing = startTracing2;
        function stopTracing() {
          Debug.assert(tracing, "Tracing is not in progress");
          Debug.assert(!!typeCatalog.length === (mode !== "server"));
          fs.writeSync(traceFd, `
]
`);
          fs.closeSync(traceFd);
          tracing = void 0;
          if (typeCatalog.length) {
            dumpTypes(typeCatalog);
          } else {
            legend[legend.length - 1].typesPath = void 0;
          }
        }
        tracingEnabled2.stopTracing = stopTracing;
        function recordType(type) {
          if (mode !== "server") {
            typeCatalog.push(type);
          }
        }
        tracingEnabled2.recordType = recordType;
        let Phase;
        ((Phase2) => {
          Phase2["Parse"] = "parse";
          Phase2["Program"] = "program";
          Phase2["Bind"] = "bind";
          Phase2["Check"] = "check";
          Phase2["CheckTypes"] = "checkTypes";
          Phase2["Emit"] = "emit";
          Phase2["Session"] = "session";
        })(Phase = tracingEnabled2.Phase || (tracingEnabled2.Phase = {}));
        function instant(phase, name, args) {
          writeEvent("I", phase, name, args, `"s":"g"`);
        }
        tracingEnabled2.instant = instant;
        const eventStack = [];
        function push(phase, name, args, separateBeginAndEnd = false) {
          if (separateBeginAndEnd) {
            writeEvent("B", phase, name, args);
          }
          eventStack.push({ phase, name, args, time: 1e3 * timestamp(), separateBeginAndEnd });
        }
        tracingEnabled2.push = push;
        function pop(results) {
          Debug.assert(eventStack.length > 0);
          writeStackEvent(eventStack.length - 1, 1e3 * timestamp(), results);
          eventStack.length--;
        }
        tracingEnabled2.pop = pop;
        function popAll() {
          const endTime = 1e3 * timestamp();
          for (let i = eventStack.length - 1; i >= 0; i--) {
            writeStackEvent(i, endTime);
          }
          eventStack.length = 0;
        }
        tracingEnabled2.popAll = popAll;
        const sampleInterval = 1e3 * 10;
        function writeStackEvent(index, endTime, results) {
          const { phase, name, args, time, separateBeginAndEnd } = eventStack[index];
          if (separateBeginAndEnd) {
            Debug.assert(!results, "`results` are not supported for events with `separateBeginAndEnd`");
            writeEvent(
              "E",
              phase,
              name,
              args,
              /*extras*/
              void 0,
              endTime
            );
          } else if (sampleInterval - time % sampleInterval <= endTime - time) {
            writeEvent("X", phase, name, { ...args, results }, `"dur":${endTime - time}`, time);
          }
        }
        function writeEvent(eventType, phase, name, args, extras, time = 1e3 * timestamp()) {
          if (mode === "server" && phase === "checkTypes" /* CheckTypes */)
            return;
          mark("beginTracing");
          fs.writeSync(traceFd, `,
{"pid":1,"tid":1,"ph":"${eventType}","cat":"${phase}","ts":${time},"name":"${name}"`);
          if (extras)
            fs.writeSync(traceFd, `,${extras}`);
          if (args)
            fs.writeSync(traceFd, `,"args":${JSON.stringify(args)}`);
          fs.writeSync(traceFd, `}`);
          mark("endTracing");
          measure("Tracing", "beginTracing", "endTracing");
        }
        function getLocation(node) {
          const file = getSourceFileOfNode(node);
          return !file ? void 0 : {
            path: file.path,
            start: indexFromOne(getLineAndCharacterOfPosition(file, node.pos)),
            end: indexFromOne(getLineAndCharacterOfPosition(file, node.end))
          };
          function indexFromOne(lc) {
            return {
              line: lc.line + 1,
              character: lc.character + 1
            };
          }
        }
        function dumpTypes(types) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;
          mark("beginDumpTypes");
          const typesPath = legend[legend.length - 1].typesPath;
          const typesFd = fs.openSync(typesPath, "w");
          const recursionIdentityMap = /* @__PURE__ */ new Map();
          fs.writeSync(typesFd, "[");
          const numTypes = types.length;
          for (let i = 0; i < numTypes; i++) {
            const type = types[i];
            const objectFlags = type.objectFlags;
            const symbol = type.aliasSymbol ?? type.symbol;
            let display;
            if (objectFlags & 16 /* Anonymous */ | type.flags & 2944 /* Literal */) {
              try {
                display = (_a = type.checker) == null ? void 0 : _a.typeToString(type);
              } catch {
                display = void 0;
              }
            }
            let indexedAccessProperties = {};
            if (type.flags & 8388608 /* IndexedAccess */) {
              const indexedAccessType = type;
              indexedAccessProperties = {
                indexedAccessObjectType: (_b = indexedAccessType.objectType) == null ? void 0 : _b.id,
                indexedAccessIndexType: (_c = indexedAccessType.indexType) == null ? void 0 : _c.id
              };
            }
            let referenceProperties = {};
            if (objectFlags & 4 /* Reference */) {
              const referenceType = type;
              referenceProperties = {
                instantiatedType: (_d = referenceType.target) == null ? void 0 : _d.id,
                typeArguments: (_e = referenceType.resolvedTypeArguments) == null ? void 0 : _e.map((t) => t.id),
                referenceLocation: getLocation(referenceType.node)
              };
            }
            let conditionalProperties = {};
            if (type.flags & 16777216 /* Conditional */) {
              const conditionalType = type;
              conditionalProperties = {
                conditionalCheckType: (_f = conditionalType.checkType) == null ? void 0 : _f.id,
                conditionalExtendsType: (_g = conditionalType.extendsType) == null ? void 0 : _g.id,
                conditionalTrueType: ((_h = conditionalType.resolvedTrueType) == null ? void 0 : _h.id) ?? -1,
                conditionalFalseType: ((_i = conditionalType.resolvedFalseType) == null ? void 0 : _i.id) ?? -1
              };
            }
            let substitutionProperties = {};
            if (type.flags & 33554432 /* Substitution */) {
              const substitutionType = type;
              substitutionProperties = {
                substitutionBaseType: (_j = substitutionType.baseType) == null ? void 0 : _j.id,
                constraintType: (_k = substitutionType.constraint) == null ? void 0 : _k.id
              };
            }
            let reverseMappedProperties = {};
            if (objectFlags & 1024 /* ReverseMapped */) {
              const reverseMappedType = type;
              reverseMappedProperties = {
                reverseMappedSourceType: (_l = reverseMappedType.source) == null ? void 0 : _l.id,
                reverseMappedMappedType: (_m = reverseMappedType.mappedType) == null ? void 0 : _m.id,
                reverseMappedConstraintType: (_n = reverseMappedType.constraintType) == null ? void 0 : _n.id
              };
            }
            let evolvingArrayProperties = {};
            if (objectFlags & 256 /* EvolvingArray */) {
              const evolvingArrayType = type;
              evolvingArrayProperties = {
                evolvingArrayElementType: evolvingArrayType.elementType.id,
                evolvingArrayFinalType: (_o = evolvingArrayType.finalArrayType) == null ? void 0 : _o.id
              };
            }
            let recursionToken;
            const recursionIdentity = type.checker.getRecursionIdentity(type);
            if (recursionIdentity) {
              recursionToken = recursionIdentityMap.get(recursionIdentity);
              if (!recursionToken) {
                recursionToken = recursionIdentityMap.size;
                recursionIdentityMap.set(recursionIdentity, recursionToken);
              }
            }
            const descriptor = {
              id: type.id,
              intrinsicName: type.intrinsicName,
              symbolName: (symbol == null ? void 0 : symbol.escapedName) && unescapeLeadingUnderscores(symbol.escapedName),
              recursionId: recursionToken,
              isTuple: objectFlags & 8 /* Tuple */ ? true : void 0,
              unionTypes: type.flags & 1048576 /* Union */ ? (_p = type.types) == null ? void 0 : _p.map((t) => t.id) : void 0,
              intersectionTypes: type.flags & 2097152 /* Intersection */ ? type.types.map((t) => t.id) : void 0,
              aliasTypeArguments: (_q = type.aliasTypeArguments) == null ? void 0 : _q.map((t) => t.id),
              keyofType: type.flags & 4194304 /* Index */ ? (_r = type.type) == null ? void 0 : _r.id : void 0,
              ...indexedAccessProperties,
              ...referenceProperties,
              ...conditionalProperties,
              ...substitutionProperties,
              ...reverseMappedProperties,
              ...evolvingArrayProperties,
              destructuringPattern: getLocation(type.pattern),
              firstDeclaration: getLocation((_s = symbol == null ? void 0 : symbol.declarations) == null ? void 0 : _s[0]),
              flags: Debug.formatTypeFlags(type.flags).split("|"),
              display
            };
            fs.writeSync(typesFd, JSON.stringify(descriptor));
            if (i < numTypes - 1) {
              fs.writeSync(typesFd, ",\n");
            }
          }
          fs.writeSync(typesFd, "]\n");
          fs.closeSync(typesFd);
          mark("endDumpTypes");
          measure("Dump types", "beginDumpTypes", "endDumpTypes");
        }
        function dumpLegend() {
          if (!legendPath) {
            return;
          }
          fs.writeFileSync(legendPath, JSON.stringify(legend));
        }
        tracingEnabled2.dumpLegend = dumpLegend;
      })(tracingEnabled || (tracingEnabled = {}));
      startTracing = tracingEnabled.startTracing;
      dumpTracingLegend = tracingEnabled.dumpLegend;
    }
  });

  // src/compiler/types.ts
  function diagnosticCategoryName(d, lowerCase = true) {
    const name = DiagnosticCategory[d.category];
    return lowerCase ? name.toLowerCase() : name;
  }
  var SyntaxKind, NodeFlags, ModifierFlags, JsxFlags, RelationComparisonResult, GeneratedIdentifierFlags, TokenFlags, FlowFlags, CommentDirectiveType, OperationCanceledException, FileIncludeKind, FilePreprocessingDiagnosticsKind, EmitOnly, StructureIsReused, ExitStatus, MemberOverrideStatus, UnionReduction, ContextFlags, NodeBuilderFlags, TypeFormatFlags, SymbolFormatFlags, SymbolAccessibility, SyntheticSymbolKind, TypePredicateKind, TypeReferenceSerializationKind, SymbolFlags, EnumKind, CheckFlags, InternalSymbolName, NodeCheckFlags, TypeFlags, ObjectFlags, VarianceFlags, ElementFlags, AccessFlags, IndexFlags, JsxReferenceKind, SignatureKind, SignatureFlags, IndexKind, TypeMapKind, InferencePriority, InferenceFlags, Ternary, AssignmentDeclarationKind, DiagnosticCategory, ModuleResolutionKind, ModuleDetectionKind, WatchFileKind, WatchDirectoryKind, PollingWatchKind, ModuleKind, JsxEmit, ImportsNotUsedAsValues, NewLineKind, ScriptKind, ScriptTarget, LanguageVariant, WatchDirectoryFlags, CharacterCodes, Extension, TransformFlags, SnippetKind, EmitFlags, InternalEmitFlags, ExternalEmitHelpers, EmitHint, OuterExpressionKinds, LexicalEnvironmentFlags, BundleFileSectionKind, ListFormat, PragmaKindFlags, commentPragmas, JSDocParsingMode;
  var init_types = __esm({
    "src/compiler/types.ts"() {
      "use strict";
      SyntaxKind = /* @__PURE__ */ ((SyntaxKind5) => {
        SyntaxKind5[SyntaxKind5["Unknown"] = 0] = "Unknown";
        SyntaxKind5[SyntaxKind5["EndOfFileToken"] = 1] = "EndOfFileToken";
        SyntaxKind5[SyntaxKind5["SingleLineCommentTrivia"] = 2] = "SingleLineCommentTrivia";
        SyntaxKind5[SyntaxKind5["MultiLineCommentTrivia"] = 3] = "MultiLineCommentTrivia";
        SyntaxKind5[SyntaxKind5["NewLineTrivia"] = 4] = "NewLineTrivia";
        SyntaxKind5[SyntaxKind5["WhitespaceTrivia"] = 5] = "WhitespaceTrivia";
        SyntaxKind5[SyntaxKind5["ShebangTrivia"] = 6] = "ShebangTrivia";
        SyntaxKind5[SyntaxKind5["ConflictMarkerTrivia"] = 7] = "ConflictMarkerTrivia";
        SyntaxKind5[SyntaxKind5["NonTextFileMarkerTrivia"] = 8] = "NonTextFileMarkerTrivia";
        SyntaxKind5[SyntaxKind5["NumericLiteral"] = 9] = "NumericLiteral";
        SyntaxKind5[SyntaxKind5["BigIntLiteral"] = 10] = "BigIntLiteral";
        SyntaxKind5[SyntaxKind5["StringLiteral"] = 11] = "StringLiteral";
        SyntaxKind5[SyntaxKind5["JsxText"] = 12] = "JsxText";
        SyntaxKind5[SyntaxKind5["JsxTextAllWhiteSpaces"] = 13] = "JsxTextAllWhiteSpaces";
        SyntaxKind5[SyntaxKind5["RegularExpressionLiteral"] = 14] = "RegularExpressionLiteral";
        SyntaxKind5[SyntaxKind5["NoSubstitutionTemplateLiteral"] = 15] = "NoSubstitutionTemplateLiteral";
        SyntaxKind5[SyntaxKind5["TemplateHead"] = 16] = "TemplateHead";
        SyntaxKind5[SyntaxKind5["TemplateMiddle"] = 17] = "TemplateMiddle";
        SyntaxKind5[SyntaxKind5["TemplateTail"] = 18] = "TemplateTail";
        SyntaxKind5[SyntaxKind5["OpenBraceToken"] = 19] = "OpenBraceToken";
        SyntaxKind5[SyntaxKind5["CloseBraceToken"] = 20] = "CloseBraceToken";
        SyntaxKind5[SyntaxKind5["OpenParenToken"] = 21] = "OpenParenToken";
        SyntaxKind5[SyntaxKind5["CloseParenToken"] = 22] = "CloseParenToken";
        SyntaxKind5[SyntaxKind5["OpenBracketToken"] = 23] = "OpenBracketToken";
        SyntaxKind5[SyntaxKind5["CloseBracketToken"] = 24] = "CloseBracketToken";
        SyntaxKind5[SyntaxKind5["DotToken"] = 25] = "DotToken";
        SyntaxKind5[SyntaxKind5["DotDotDotToken"] = 26] = "DotDotDotToken";
        SyntaxKind5[SyntaxKind5["SemicolonToken"] = 27] = "SemicolonToken";
        SyntaxKind5[SyntaxKind5["CommaToken"] = 28] = "CommaToken";
        SyntaxKind5[SyntaxKind5["QuestionDotToken"] = 29] = "QuestionDotToken";
        SyntaxKind5[SyntaxKind5["LessThanToken"] = 30] = "LessThanToken";
        SyntaxKind5[SyntaxKind5["LessThanSlashToken"] = 31] = "LessThanSlashToken";
        SyntaxKind5[SyntaxKind5["GreaterThanToken"] = 32] = "GreaterThanToken";
        SyntaxKind5[SyntaxKind5["LessThanEqualsToken"] = 33] = "LessThanEqualsToken";
        SyntaxKind5[SyntaxKind5["GreaterThanEqualsToken"] = 34] = "GreaterThanEqualsToken";
        SyntaxKind5[SyntaxKind5["EqualsEqualsToken"] = 35] = "EqualsEqualsToken";
        SyntaxKind5[SyntaxKind5["ExclamationEqualsToken"] = 36] = "ExclamationEqualsToken";
        SyntaxKind5[SyntaxKind5["EqualsEqualsEqualsToken"] = 37] = "EqualsEqualsEqualsToken";
        SyntaxKind5[SyntaxKind5["ExclamationEqualsEqualsToken"] = 38] = "ExclamationEqualsEqualsToken";
        SyntaxKind5[SyntaxKind5["EqualsGreaterThanToken"] = 39] = "EqualsGreaterThanToken";
        SyntaxKind5[SyntaxKind5["PlusToken"] = 40] = "PlusToken";
        SyntaxKind5[SyntaxKind5["MinusToken"] = 41] = "MinusToken";
        SyntaxKind5[SyntaxKind5["AsteriskToken"] = 42] = "AsteriskToken";
        SyntaxKind5[SyntaxKind5["AsteriskAsteriskToken"] = 43] = "AsteriskAsteriskToken";
        SyntaxKind5[SyntaxKind5["SlashToken"] = 44] = "SlashToken";
        SyntaxKind5[SyntaxKind5["PercentToken"] = 45] = "PercentToken";
        SyntaxKind5[SyntaxKind5["PlusPlusToken"] = 46] = "PlusPlusToken";
        SyntaxKind5[SyntaxKind5["MinusMinusToken"] = 47] = "MinusMinusToken";
        SyntaxKind5[SyntaxKind5["LessThanLessThanToken"] = 48] = "LessThanLessThanToken";
        SyntaxKind5[SyntaxKind5["GreaterThanGreaterThanToken"] = 49] = "GreaterThanGreaterThanToken";
        SyntaxKind5[SyntaxKind5["GreaterThanGreaterThanGreaterThanToken"] = 50] = "GreaterThanGreaterThanGreaterThanToken";
        SyntaxKind5[SyntaxKind5["AmpersandToken"] = 51] = "AmpersandToken";
        SyntaxKind5[SyntaxKind5["BarToken"] = 52] = "BarToken";
        SyntaxKind5[SyntaxKind5["CaretToken"] = 53] = "CaretToken";
        SyntaxKind5[SyntaxKind5["ExclamationToken"] = 54] = "ExclamationToken";
        SyntaxKind5[SyntaxKind5["TildeToken"] = 55] = "TildeToken";
        SyntaxKind5[SyntaxKind5["AmpersandAmpersandToken"] = 56] = "AmpersandAmpersandToken";
        SyntaxKind5[SyntaxKind5["BarBarToken"] = 57] = "BarBarToken";
        SyntaxKind5[SyntaxKind5["QuestionToken"] = 58] = "QuestionToken";
        SyntaxKind5[SyntaxKind5["ColonToken"] = 59] = "ColonToken";
        SyntaxKind5[SyntaxKind5["AtToken"] = 60] = "AtToken";
        SyntaxKind5[SyntaxKind5["QuestionQuestionToken"] = 61] = "QuestionQuestionToken";
        SyntaxKind5[SyntaxKind5["BacktickToken"] = 62] = "BacktickToken";
        SyntaxKind5[SyntaxKind5["HashToken"] = 63] = "HashToken";
        SyntaxKind5[SyntaxKind5["EqualsToken"] = 64] = "EqualsToken";
        SyntaxKind5[SyntaxKind5["PlusEqualsToken"] = 65] = "PlusEqualsToken";
        SyntaxKind5[SyntaxKind5["MinusEqualsToken"] = 66] = "MinusEqualsToken";
        SyntaxKind5[SyntaxKind5["AsteriskEqualsToken"] = 67] = "AsteriskEqualsToken";
        SyntaxKind5[SyntaxKind5["AsteriskAsteriskEqualsToken"] = 68] = "AsteriskAsteriskEqualsToken";
        SyntaxKind5[SyntaxKind5["SlashEqualsToken"] = 69] = "SlashEqualsToken";
        SyntaxKind5[SyntaxKind5["PercentEqualsToken"] = 70] = "PercentEqualsToken";
        SyntaxKind5[SyntaxKind5["LessThanLessThanEqualsToken"] = 71] = "LessThanLessThanEqualsToken";
        SyntaxKind5[SyntaxKind5["GreaterThanGreaterThanEqualsToken"] = 72] = "GreaterThanGreaterThanEqualsToken";
        SyntaxKind5[SyntaxKind5["GreaterThanGreaterThanGreaterThanEqualsToken"] = 73] = "GreaterThanGreaterThanGreaterThanEqualsToken";
        SyntaxKind5[SyntaxKind5["AmpersandEqualsToken"] = 74] = "AmpersandEqualsToken";
        SyntaxKind5[SyntaxKind5["BarEqualsToken"] = 75] = "BarEqualsToken";
        SyntaxKind5[SyntaxKind5["BarBarEqualsToken"] = 76] = "BarBarEqualsToken";
        SyntaxKind5[SyntaxKind5["AmpersandAmpersandEqualsToken"] = 77] = "AmpersandAmpersandEqualsToken";
        SyntaxKind5[SyntaxKind5["QuestionQuestionEqualsToken"] = 78] = "QuestionQuestionEqualsToken";
        SyntaxKind5[SyntaxKind5["CaretEqualsToken"] = 79] = "CaretEqualsToken";
        SyntaxKind5[SyntaxKind5["Identifier"] = 80] = "Identifier";
        SyntaxKind5[SyntaxKind5["PrivateIdentifier"] = 81] = "PrivateIdentifier";
        SyntaxKind5[SyntaxKind5["JSDocCommentTextToken"] = 82] = "JSDocCommentTextToken";
        SyntaxKind5[SyntaxKind5["BreakKeyword"] = 83] = "BreakKeyword";
        SyntaxKind5[SyntaxKind5["CaseKeyword"] = 84] = "CaseKeyword";
        SyntaxKind5[SyntaxKind5["CatchKeyword"] = 85] = "CatchKeyword";
        SyntaxKind5[SyntaxKind5["ClassKeyword"] = 86] = "ClassKeyword";
        SyntaxKind5[SyntaxKind5["ConstKeyword"] = 87] = "ConstKeyword";
        SyntaxKind5[SyntaxKind5["ContinueKeyword"] = 88] = "ContinueKeyword";
        SyntaxKind5[SyntaxKind5["DebuggerKeyword"] = 89] = "DebuggerKeyword";
        SyntaxKind5[SyntaxKind5["DefaultKeyword"] = 90] = "DefaultKeyword";
        SyntaxKind5[SyntaxKind5["DeleteKeyword"] = 91] = "DeleteKeyword";
        SyntaxKind5[SyntaxKind5["DoKeyword"] = 92] = "DoKeyword";
        SyntaxKind5[SyntaxKind5["ElseKeyword"] = 93] = "ElseKeyword";
        SyntaxKind5[SyntaxKind5["EnumKeyword"] = 94] = "EnumKeyword";
        SyntaxKind5[SyntaxKind5["ExportKeyword"] = 95] = "ExportKeyword";
        SyntaxKind5[SyntaxKind5["ExtendsKeyword"] = 96] = "ExtendsKeyword";
        SyntaxKind5[SyntaxKind5["FalseKeyword"] = 97] = "FalseKeyword";
        SyntaxKind5[SyntaxKind5["FinallyKeyword"] = 98] = "FinallyKeyword";
        SyntaxKind5[SyntaxKind5["ForKeyword"] = 99] = "ForKeyword";
        SyntaxKind5[SyntaxKind5["FunctionKeyword"] = 100] = "FunctionKeyword";
        SyntaxKind5[SyntaxKind5["IfKeyword"] = 101] = "IfKeyword";
        SyntaxKind5[SyntaxKind5["ImportKeyword"] = 102] = "ImportKeyword";
        SyntaxKind5[SyntaxKind5["InKeyword"] = 103] = "InKeyword";
        SyntaxKind5[SyntaxKind5["InstanceOfKeyword"] = 104] = "InstanceOfKeyword";
        SyntaxKind5[SyntaxKind5["NewKeyword"] = 105] = "NewKeyword";
        SyntaxKind5[SyntaxKind5["NullKeyword"] = 106] = "NullKeyword";
        SyntaxKind5[SyntaxKind5["ReturnKeyword"] = 107] = "ReturnKeyword";
        SyntaxKind5[SyntaxKind5["SuperKeyword"] = 108] = "SuperKeyword";
        SyntaxKind5[SyntaxKind5["SwitchKeyword"] = 109] = "SwitchKeyword";
        SyntaxKind5[SyntaxKind5["ThisKeyword"] = 110] = "ThisKeyword";
        SyntaxKind5[SyntaxKind5["ThrowKeyword"] = 111] = "ThrowKeyword";
        SyntaxKind5[SyntaxKind5["TrueKeyword"] = 112] = "TrueKeyword";
        SyntaxKind5[SyntaxKind5["TryKeyword"] = 113] = "TryKeyword";
        SyntaxKind5[SyntaxKind5["TypeOfKeyword"] = 114] = "TypeOfKeyword";
        SyntaxKind5[SyntaxKind5["VarKeyword"] = 115] = "VarKeyword";
        SyntaxKind5[SyntaxKind5["VoidKeyword"] = 116] = "VoidKeyword";
        SyntaxKind5[SyntaxKind5["WhileKeyword"] = 117] = "WhileKeyword";
        SyntaxKind5[SyntaxKind5["WithKeyword"] = 118] = "WithKeyword";
        SyntaxKind5[SyntaxKind5["ImplementsKeyword"] = 119] = "ImplementsKeyword";
        SyntaxKind5[SyntaxKind5["InterfaceKeyword"] = 120] = "InterfaceKeyword";
        SyntaxKind5[SyntaxKind5["LetKeyword"] = 121] = "LetKeyword";
        SyntaxKind5[SyntaxKind5["PackageKeyword"] = 122] = "PackageKeyword";
        SyntaxKind5[SyntaxKind5["PrivateKeyword"] = 123] = "PrivateKeyword";
        SyntaxKind5[SyntaxKind5["ProtectedKeyword"] = 124] = "ProtectedKeyword";
        SyntaxKind5[SyntaxKind5["PublicKeyword"] = 125] = "PublicKeyword";
        SyntaxKind5[SyntaxKind5["StaticKeyword"] = 126] = "StaticKeyword";
        SyntaxKind5[SyntaxKind5["YieldKeyword"] = 127] = "YieldKeyword";
        SyntaxKind5[SyntaxKind5["AbstractKeyword"] = 128] = "AbstractKeyword";
        SyntaxKind5[SyntaxKind5["AccessorKeyword"] = 129] = "AccessorKeyword";
        SyntaxKind5[SyntaxKind5["AsKeyword"] = 130] = "AsKeyword";
        SyntaxKind5[SyntaxKind5["AssertsKeyword"] = 131] = "AssertsKeyword";
        SyntaxKind5[SyntaxKind5["AssertKeyword"] = 132] = "AssertKeyword";
        SyntaxKind5[SyntaxKind5["AnyKeyword"] = 133] = "AnyKeyword";
        SyntaxKind5[SyntaxKind5["AsyncKeyword"] = 134] = "AsyncKeyword";
        SyntaxKind5[SyntaxKind5["AwaitKeyword"] = 135] = "AwaitKeyword";
        SyntaxKind5[SyntaxKind5["BooleanKeyword"] = 136] = "BooleanKeyword";
        SyntaxKind5[SyntaxKind5["ConstructorKeyword"] = 137] = "ConstructorKeyword";
        SyntaxKind5[SyntaxKind5["DeclareKeyword"] = 138] = "DeclareKeyword";
        SyntaxKind5[SyntaxKind5["GetKeyword"] = 139] = "GetKeyword";
        SyntaxKind5[SyntaxKind5["InferKeyword"] = 140] = "InferKeyword";
        SyntaxKind5[SyntaxKind5["IntrinsicKeyword"] = 141] = "IntrinsicKeyword";
        SyntaxKind5[SyntaxKind5["IsKeyword"] = 142] = "IsKeyword";
        SyntaxKind5[SyntaxKind5["KeyOfKeyword"] = 143] = "KeyOfKeyword";
        SyntaxKind5[SyntaxKind5["ModuleKeyword"] = 144] = "ModuleKeyword";
        SyntaxKind5[SyntaxKind5["NamespaceKeyword"] = 145] = "NamespaceKeyword";
        SyntaxKind5[SyntaxKind5["NeverKeyword"] = 146] = "NeverKeyword";
        SyntaxKind5[SyntaxKind5["OutKeyword"] = 147] = "OutKeyword";
        SyntaxKind5[SyntaxKind5["ReadonlyKeyword"] = 148] = "ReadonlyKeyword";
        SyntaxKind5[SyntaxKind5["RequireKeyword"] = 149] = "RequireKeyword";
        SyntaxKind5[SyntaxKind5["NumberKeyword"] = 150] = "NumberKeyword";
        SyntaxKind5[SyntaxKind5["ObjectKeyword"] = 151] = "ObjectKeyword";
        SyntaxKind5[SyntaxKind5["SatisfiesKeyword"] = 152] = "SatisfiesKeyword";
        SyntaxKind5[SyntaxKind5["SetKeyword"] = 153] = "SetKeyword";
        SyntaxKind5[SyntaxKind5["StringKeyword"] = 154] = "StringKeyword";
        SyntaxKind5[SyntaxKind5["SymbolKeyword"] = 155] = "SymbolKeyword";
        SyntaxKind5[SyntaxKind5["TypeKeyword"] = 156] = "TypeKeyword";
        SyntaxKind5[SyntaxKind5["UndefinedKeyword"] = 157] = "UndefinedKeyword";
        SyntaxKind5[SyntaxKind5["UniqueKeyword"] = 158] = "UniqueKeyword";
        SyntaxKind5[SyntaxKind5["UnknownKeyword"] = 159] = "UnknownKeyword";
        SyntaxKind5[SyntaxKind5["UsingKeyword"] = 160] = "UsingKeyword";
        SyntaxKind5[SyntaxKind5["FromKeyword"] = 161] = "FromKeyword";
        SyntaxKind5[SyntaxKind5["GlobalKeyword"] = 162] = "GlobalKeyword";
        SyntaxKind5[SyntaxKind5["BigIntKeyword"] = 163] = "BigIntKeyword";
        SyntaxKind5[SyntaxKind5["OverrideKeyword"] = 164] = "OverrideKeyword";
        SyntaxKind5[SyntaxKind5["OfKeyword"] = 165] = "OfKeyword";
        SyntaxKind5[SyntaxKind5["QualifiedName"] = 166] = "QualifiedName";
        SyntaxKind5[SyntaxKind5["ComputedPropertyName"] = 167] = "ComputedPropertyName";
        SyntaxKind5[SyntaxKind5["TypeParameter"] = 168] = "TypeParameter";
        SyntaxKind5[SyntaxKind5["Parameter"] = 169] = "Parameter";
        SyntaxKind5[SyntaxKind5["Decorator"] = 170] = "Decorator";
        SyntaxKind5[SyntaxKind5["PropertySignature"] = 171] = "PropertySignature";
        SyntaxKind5[SyntaxKind5["PropertyDeclaration"] = 172] = "PropertyDeclaration";
        SyntaxKind5[SyntaxKind5["MethodSignature"] = 173] = "MethodSignature";
        SyntaxKind5[SyntaxKind5["MethodDeclaration"] = 174] = "MethodDeclaration";
        SyntaxKind5[SyntaxKind5["ClassStaticBlockDeclaration"] = 175] = "ClassStaticBlockDeclaration";
        SyntaxKind5[SyntaxKind5["Constructor"] = 176] = "Constructor";
        SyntaxKind5[SyntaxKind5["GetAccessor"] = 177] = "GetAccessor";
        SyntaxKind5[SyntaxKind5["SetAccessor"] = 178] = "SetAccessor";
        SyntaxKind5[SyntaxKind5["CallSignature"] = 179] = "CallSignature";
        SyntaxKind5[SyntaxKind5["ConstructSignature"] = 180] = "ConstructSignature";
        SyntaxKind5[SyntaxKind5["IndexSignature"] = 181] = "IndexSignature";
        SyntaxKind5[SyntaxKind5["TypePredicate"] = 182] = "TypePredicate";
        SyntaxKind5[SyntaxKind5["TypeReference"] = 183] = "TypeReference";
        SyntaxKind5[SyntaxKind5["FunctionType"] = 184] = "FunctionType";
        SyntaxKind5[SyntaxKind5["ConstructorType"] = 185] = "ConstructorType";
        SyntaxKind5[SyntaxKind5["TypeQuery"] = 186] = "TypeQuery";
        SyntaxKind5[SyntaxKind5["TypeLiteral"] = 187] = "TypeLiteral";
        SyntaxKind5[SyntaxKind5["ArrayType"] = 188] = "ArrayType";
        SyntaxKind5[SyntaxKind5["TupleType"] = 189] = "TupleType";
        SyntaxKind5[SyntaxKind5["OptionalType"] = 190] = "OptionalType";
        SyntaxKind5[SyntaxKind5["RestType"] = 191] = "RestType";
        SyntaxKind5[SyntaxKind5["UnionType"] = 192] = "UnionType";
        SyntaxKind5[SyntaxKind5["IntersectionType"] = 193] = "IntersectionType";
        SyntaxKind5[SyntaxKind5["ConditionalType"] = 194] = "ConditionalType";
        SyntaxKind5[SyntaxKind5["InferType"] = 195] = "InferType";
        SyntaxKind5[SyntaxKind5["ParenthesizedType"] = 196] = "ParenthesizedType";
        SyntaxKind5[SyntaxKind5["ThisType"] = 197] = "ThisType";
        SyntaxKind5[SyntaxKind5["TypeOperator"] = 198] = "TypeOperator";
        SyntaxKind5[SyntaxKind5["IndexedAccessType"] = 199] = "IndexedAccessType";
        SyntaxKind5[SyntaxKind5["MappedType"] = 200] = "MappedType";
        SyntaxKind5[SyntaxKind5["LiteralType"] = 201] = "LiteralType";
        SyntaxKind5[SyntaxKind5["NamedTupleMember"] = 202] = "NamedTupleMember";
        SyntaxKind5[SyntaxKind5["TemplateLiteralType"] = 203] = "TemplateLiteralType";
        SyntaxKind5[SyntaxKind5["TemplateLiteralTypeSpan"] = 204] = "TemplateLiteralTypeSpan";
        SyntaxKind5[SyntaxKind5["ImportType"] = 205] = "ImportType";
        SyntaxKind5[SyntaxKind5["ObjectBindingPattern"] = 206] = "ObjectBindingPattern";
        SyntaxKind5[SyntaxKind5["ArrayBindingPattern"] = 207] = "ArrayBindingPattern";
        SyntaxKind5[SyntaxKind5["BindingElement"] = 208] = "BindingElement";
        SyntaxKind5[SyntaxKind5["ArrayLiteralExpression"] = 209] = "ArrayLiteralExpression";
        SyntaxKind5[SyntaxKind5["ObjectLiteralExpression"] = 210] = "ObjectLiteralExpression";
        SyntaxKind5[SyntaxKind5["PropertyAccessExpression"] = 211] = "PropertyAccessExpression";
        SyntaxKind5[SyntaxKind5["ElementAccessExpression"] = 212] = "ElementAccessExpression";
        SyntaxKind5[SyntaxKind5["CallExpression"] = 213] = "CallExpression";
        SyntaxKind5[SyntaxKind5["NewExpression"] = 214] = "NewExpression";
        SyntaxKind5[SyntaxKind5["TaggedTemplateExpression"] = 215] = "TaggedTemplateExpression";
        SyntaxKind5[SyntaxKind5["TypeAssertionExpression"] = 216] = "TypeAssertionExpression";
        SyntaxKind5[SyntaxKind5["ParenthesizedExpression"] = 217] = "ParenthesizedExpression";
        SyntaxKind5[SyntaxKind5["FunctionExpression"] = 218] = "FunctionExpression";
        SyntaxKind5[SyntaxKind5["ArrowFunction"] = 219] = "ArrowFunction";
        SyntaxKind5[SyntaxKind5["DeleteExpression"] = 220] = "DeleteExpression";
        SyntaxKind5[SyntaxKind5["TypeOfExpression"] = 221] = "TypeOfExpression";
        SyntaxKind5[SyntaxKind5["VoidExpression"] = 222] = "VoidExpression";
        SyntaxKind5[SyntaxKind5["AwaitExpression"] = 223] = "AwaitExpression";
        SyntaxKind5[SyntaxKind5["PrefixUnaryExpression"] = 224] = "PrefixUnaryExpression";
        SyntaxKind5[SyntaxKind5["PostfixUnaryExpression"] = 225] = "PostfixUnaryExpression";
        SyntaxKind5[SyntaxKind5["BinaryExpression"] = 226] = "BinaryExpression";
        SyntaxKind5[SyntaxKind5["ConditionalExpression"] = 227] = "ConditionalExpression";
        SyntaxKind5[SyntaxKind5["TemplateExpression"] = 228] = "TemplateExpression";
        SyntaxKind5[SyntaxKind5["YieldExpression"] = 229] = "YieldExpression";
        SyntaxKind5[SyntaxKind5["SpreadElement"] = 230] = "SpreadElement";
        SyntaxKind5[SyntaxKind5["ClassExpression"] = 231] = "ClassExpression";
        SyntaxKind5[SyntaxKind5["OmittedExpression"] = 232] = "OmittedExpression";
        SyntaxKind5[SyntaxKind5["ExpressionWithTypeArguments"] = 233] = "ExpressionWithTypeArguments";
        SyntaxKind5[SyntaxKind5["AsExpression"] = 234] = "AsExpression";
        SyntaxKind5[SyntaxKind5["NonNullExpression"] = 235] = "NonNullExpression";
        SyntaxKind5[SyntaxKind5["MetaProperty"] = 236] = "MetaProperty";
        SyntaxKind5[SyntaxKind5["SyntheticExpression"] = 237] = "SyntheticExpression";
        SyntaxKind5[SyntaxKind5["SatisfiesExpression"] = 238] = "SatisfiesExpression";
        SyntaxKind5[SyntaxKind5["TemplateSpan"] = 239] = "TemplateSpan";
        SyntaxKind5[SyntaxKind5["SemicolonClassElement"] = 240] = "SemicolonClassElement";
        SyntaxKind5[SyntaxKind5["Block"] = 241] = "Block";
        SyntaxKind5[SyntaxKind5["EmptyStatement"] = 242] = "EmptyStatement";
        SyntaxKind5[SyntaxKind5["VariableStatement"] = 243] = "VariableStatement";
        SyntaxKind5[SyntaxKind5["ExpressionStatement"] = 244] = "ExpressionStatement";
        SyntaxKind5[SyntaxKind5["IfStatement"] = 245] = "IfStatement";
        SyntaxKind5[SyntaxKind5["DoStatement"] = 246] = "DoStatement";
        SyntaxKind5[SyntaxKind5["WhileStatement"] = 247] = "WhileStatement";
        SyntaxKind5[SyntaxKind5["ForStatement"] = 248] = "ForStatement";
        SyntaxKind5[SyntaxKind5["ForInStatement"] = 249] = "ForInStatement";
        SyntaxKind5[SyntaxKind5["ForOfStatement"] = 250] = "ForOfStatement";
        SyntaxKind5[SyntaxKind5["ContinueStatement"] = 251] = "ContinueStatement";
        SyntaxKind5[SyntaxKind5["BreakStatement"] = 252] = "BreakStatement";
        SyntaxKind5[SyntaxKind5["ReturnStatement"] = 253] = "ReturnStatement";
        SyntaxKind5[SyntaxKind5["WithStatement"] = 254] = "WithStatement";
        SyntaxKind5[SyntaxKind5["SwitchStatement"] = 255] = "SwitchStatement";
        SyntaxKind5[SyntaxKind5["LabeledStatement"] = 256] = "LabeledStatement";
        SyntaxKind5[SyntaxKind5["ThrowStatement"] = 257] = "ThrowStatement";
        SyntaxKind5[SyntaxKind5["TryStatement"] = 258] = "TryStatement";
        SyntaxKind5[SyntaxKind5["DebuggerStatement"] = 259] = "DebuggerStatement";
        SyntaxKind5[SyntaxKind5["VariableDeclaration"] = 260] = "VariableDeclaration";
        SyntaxKind5[SyntaxKind5["VariableDeclarationList"] = 261] = "VariableDeclarationList";
        SyntaxKind5[SyntaxKind5["FunctionDeclaration"] = 262] = "FunctionDeclaration";
        SyntaxKind5[SyntaxKind5["ClassDeclaration"] = 263] = "ClassDeclaration";
        SyntaxKind5[SyntaxKind5["InterfaceDeclaration"] = 264] = "InterfaceDeclaration";
        SyntaxKind5[SyntaxKind5["TypeAliasDeclaration"] = 265] = "TypeAliasDeclaration";
        SyntaxKind5[SyntaxKind5["EnumDeclaration"] = 266] = "EnumDeclaration";
        SyntaxKind5[SyntaxKind5["ModuleDeclaration"] = 267] = "ModuleDeclaration";
        SyntaxKind5[SyntaxKind5["ModuleBlock"] = 268] = "ModuleBlock";
        SyntaxKind5[SyntaxKind5["CaseBlock"] = 269] = "CaseBlock";
        SyntaxKind5[SyntaxKind5["NamespaceExportDeclaration"] = 270] = "NamespaceExportDeclaration";
        SyntaxKind5[SyntaxKind5["ImportEqualsDeclaration"] = 271] = "ImportEqualsDeclaration";
        SyntaxKind5[SyntaxKind5["ImportDeclaration"] = 272] = "ImportDeclaration";
        SyntaxKind5[SyntaxKind5["ImportClause"] = 273] = "ImportClause";
        SyntaxKind5[SyntaxKind5["NamespaceImport"] = 274] = "NamespaceImport";
        SyntaxKind5[SyntaxKind5["NamedImports"] = 275] = "NamedImports";
        SyntaxKind5[SyntaxKind5["ImportSpecifier"] = 276] = "ImportSpecifier";
        SyntaxKind5[SyntaxKind5["ExportAssignment"] = 277] = "ExportAssignment";
        SyntaxKind5[SyntaxKind5["ExportDeclaration"] = 278] = "ExportDeclaration";
        SyntaxKind5[SyntaxKind5["NamedExports"] = 279] = "NamedExports";
        SyntaxKind5[SyntaxKind5["NamespaceExport"] = 280] = "NamespaceExport";
        SyntaxKind5[SyntaxKind5["ExportSpecifier"] = 281] = "ExportSpecifier";
        SyntaxKind5[SyntaxKind5["MissingDeclaration"] = 282] = "MissingDeclaration";
        SyntaxKind5[SyntaxKind5["ExternalModuleReference"] = 283] = "ExternalModuleReference";
        SyntaxKind5[SyntaxKind5["JsxElement"] = 284] = "JsxElement";
        SyntaxKind5[SyntaxKind5["JsxSelfClosingElement"] = 285] = "JsxSelfClosingElement";
        SyntaxKind5[SyntaxKind5["JsxOpeningElement"] = 286] = "JsxOpeningElement";
        SyntaxKind5[SyntaxKind5["JsxClosingElement"] = 287] = "JsxClosingElement";
        SyntaxKind5[SyntaxKind5["JsxFragment"] = 288] = "JsxFragment";
        SyntaxKind5[SyntaxKind5["JsxOpeningFragment"] = 289] = "JsxOpeningFragment";
        SyntaxKind5[SyntaxKind5["JsxClosingFragment"] = 290] = "JsxClosingFragment";
        SyntaxKind5[SyntaxKind5["JsxAttribute"] = 291] = "JsxAttribute";
        SyntaxKind5[SyntaxKind5["JsxAttributes"] = 292] = "JsxAttributes";
        SyntaxKind5[SyntaxKind5["JsxSpreadAttribute"] = 293] = "JsxSpreadAttribute";
        SyntaxKind5[SyntaxKind5["JsxExpression"] = 294] = "JsxExpression";
        SyntaxKind5[SyntaxKind5["JsxNamespacedName"] = 295] = "JsxNamespacedName";
        SyntaxKind5[SyntaxKind5["CaseClause"] = 296] = "CaseClause";
        SyntaxKind5[SyntaxKind5["DefaultClause"] = 297] = "DefaultClause";
        SyntaxKind5[SyntaxKind5["HeritageClause"] = 298] = "HeritageClause";
        SyntaxKind5[SyntaxKind5["CatchClause"] = 299] = "CatchClause";
        SyntaxKind5[SyntaxKind5["ImportAttributes"] = 300] = "ImportAttributes";
        SyntaxKind5[SyntaxKind5["ImportAttribute"] = 301] = "ImportAttribute";
        SyntaxKind5[SyntaxKind5["AssertClause"] = 300 /* ImportAttributes */] = "AssertClause";
        SyntaxKind5[SyntaxKind5["AssertEntry"] = 301 /* ImportAttribute */] = "AssertEntry";
        SyntaxKind5[SyntaxKind5["ImportTypeAssertionContainer"] = 302] = "ImportTypeAssertionContainer";
        SyntaxKind5[SyntaxKind5["PropertyAssignment"] = 303] = "PropertyAssignment";
        SyntaxKind5[SyntaxKind5["ShorthandPropertyAssignment"] = 304] = "ShorthandPropertyAssignment";
        SyntaxKind5[SyntaxKind5["SpreadAssignment"] = 305] = "SpreadAssignment";
        SyntaxKind5[SyntaxKind5["EnumMember"] = 306] = "EnumMember";
        SyntaxKind5[SyntaxKind5["UnparsedPrologue"] = 307] = "UnparsedPrologue";
        SyntaxKind5[SyntaxKind5["UnparsedPrepend"] = 308] = "UnparsedPrepend";
        SyntaxKind5[SyntaxKind5["UnparsedText"] = 309] = "UnparsedText";
        SyntaxKind5[SyntaxKind5["UnparsedInternalText"] = 310] = "UnparsedInternalText";
        SyntaxKind5[SyntaxKind5["UnparsedSyntheticReference"] = 311] = "UnparsedSyntheticReference";
        SyntaxKind5[SyntaxKind5["SourceFile"] = 312] = "SourceFile";
        SyntaxKind5[SyntaxKind5["Bundle"] = 313] = "Bundle";
        SyntaxKind5[SyntaxKind5["UnparsedSource"] = 314] = "UnparsedSource";
        SyntaxKind5[SyntaxKind5["InputFiles"] = 315] = "InputFiles";
        SyntaxKind5[SyntaxKind5["JSDocTypeExpression"] = 316] = "JSDocTypeExpression";
        SyntaxKind5[SyntaxKind5["JSDocNameReference"] = 317] = "JSDocNameReference";
        SyntaxKind5[SyntaxKind5["JSDocMemberName"] = 318] = "JSDocMemberName";
        SyntaxKind5[SyntaxKind5["JSDocAllType"] = 319] = "JSDocAllType";
        SyntaxKind5[SyntaxKind5["JSDocUnknownType"] = 320] = "JSDocUnknownType";
        SyntaxKind5[SyntaxKind5["JSDocNullableType"] = 321] = "JSDocNullableType";
        SyntaxKind5[SyntaxKind5["JSDocNonNullableType"] = 322] = "JSDocNonNullableType";
        SyntaxKind5[SyntaxKind5["JSDocOptionalType"] = 323] = "JSDocOptionalType";
        SyntaxKind5[SyntaxKind5["JSDocFunctionType"] = 324] = "JSDocFunctionType";
        SyntaxKind5[SyntaxKind5["JSDocVariadicType"] = 325] = "JSDocVariadicType";
        SyntaxKind5[SyntaxKind5["JSDocNamepathType"] = 326] = "JSDocNamepathType";
        SyntaxKind5[SyntaxKind5["JSDoc"] = 327] = "JSDoc";
        SyntaxKind5[SyntaxKind5["JSDocComment"] = 327 /* JSDoc */] = "JSDocComment";
        SyntaxKind5[SyntaxKind5["JSDocText"] = 328] = "JSDocText";
        SyntaxKind5[SyntaxKind5["JSDocTypeLiteral"] = 329] = "JSDocTypeLiteral";
        SyntaxKind5[SyntaxKind5["JSDocSignature"] = 330] = "JSDocSignature";
        SyntaxKind5[SyntaxKind5["JSDocLink"] = 331] = "JSDocLink";
        SyntaxKind5[SyntaxKind5["JSDocLinkCode"] = 332] = "JSDocLinkCode";
        SyntaxKind5[SyntaxKind5["JSDocLinkPlain"] = 333] = "JSDocLinkPlain";
        SyntaxKind5[SyntaxKind5["JSDocTag"] = 334] = "JSDocTag";
        SyntaxKind5[SyntaxKind5["JSDocAugmentsTag"] = 335] = "JSDocAugmentsTag";
        SyntaxKind5[SyntaxKind5["JSDocImplementsTag"] = 336] = "JSDocImplementsTag";
        SyntaxKind5[SyntaxKind5["JSDocAuthorTag"] = 337] = "JSDocAuthorTag";
        SyntaxKind5[SyntaxKind5["JSDocDeprecatedTag"] = 338] = "JSDocDeprecatedTag";
        SyntaxKind5[SyntaxKind5["JSDocClassTag"] = 339] = "JSDocClassTag";
        SyntaxKind5[SyntaxKind5["JSDocPublicTag"] = 340] = "JSDocPublicTag";
        SyntaxKind5[SyntaxKind5["JSDocPrivateTag"] = 341] = "JSDocPrivateTag";
        SyntaxKind5[SyntaxKind5["JSDocProtectedTag"] = 342] = "JSDocProtectedTag";
        SyntaxKind5[SyntaxKind5["JSDocReadonlyTag"] = 343] = "JSDocReadonlyTag";
        SyntaxKind5[SyntaxKind5["JSDocOverrideTag"] = 344] = "JSDocOverrideTag";
        SyntaxKind5[SyntaxKind5["JSDocCallbackTag"] = 345] = "JSDocCallbackTag";
        SyntaxKind5[SyntaxKind5["JSDocOverloadTag"] = 346] = "JSDocOverloadTag";
        SyntaxKind5[SyntaxKind5["JSDocEnumTag"] = 347] = "JSDocEnumTag";
        SyntaxKind5[SyntaxKind5["JSDocParameterTag"] = 348] = "JSDocParameterTag";
        SyntaxKind5[SyntaxKind5["JSDocReturnTag"] = 349] = "JSDocReturnTag";
        SyntaxKind5[SyntaxKind5["JSDocThisTag"] = 350] = "JSDocThisTag";
        SyntaxKind5[SyntaxKind5["JSDocTypeTag"] = 351] = "JSDocTypeTag";
        SyntaxKind5[SyntaxKind5["JSDocTemplateTag"] = 352] = "JSDocTemplateTag";
        SyntaxKind5[SyntaxKind5["JSDocTypedefTag"] = 353] = "JSDocTypedefTag";
        SyntaxKind5[SyntaxKind5["JSDocSeeTag"] = 354] = "JSDocSeeTag";
        SyntaxKind5[SyntaxKind5["JSDocPropertyTag"] = 355] = "JSDocPropertyTag";
        SyntaxKind5[SyntaxKind5["JSDocThrowsTag"] = 356] = "JSDocThrowsTag";
        SyntaxKind5[SyntaxKind5["JSDocSatisfiesTag"] = 357] = "JSDocSatisfiesTag";
        SyntaxKind5[SyntaxKind5["SyntaxList"] = 358] = "SyntaxList";
        SyntaxKind5[SyntaxKind5["NotEmittedStatement"] = 359] = "NotEmittedStatement";
        SyntaxKind5[SyntaxKind5["PartiallyEmittedExpression"] = 360] = "PartiallyEmittedExpression";
        SyntaxKind5[SyntaxKind5["CommaListExpression"] = 361] = "CommaListExpression";
        SyntaxKind5[SyntaxKind5["SyntheticReferenceExpression"] = 362] = "SyntheticReferenceExpression";
        SyntaxKind5[SyntaxKind5["Count"] = 363] = "Count";
        SyntaxKind5[SyntaxKind5["FirstAssignment"] = 64 /* EqualsToken */] = "FirstAssignment";
        SyntaxKind5[SyntaxKind5["LastAssignment"] = 79 /* CaretEqualsToken */] = "LastAssignment";
        SyntaxKind5[SyntaxKind5["FirstCompoundAssignment"] = 65 /* PlusEqualsToken */] = "FirstCompoundAssignment";
        SyntaxKind5[SyntaxKind5["LastCompoundAssignment"] = 79 /* CaretEqualsToken */] = "LastCompoundAssignment";
        SyntaxKind5[SyntaxKind5["FirstReservedWord"] = 83 /* BreakKeyword */] = "FirstReservedWord";
        SyntaxKind5[SyntaxKind5["LastReservedWord"] = 118 /* WithKeyword */] = "LastReservedWord";
        SyntaxKind5[SyntaxKind5["FirstKeyword"] = 83 /* BreakKeyword */] = "FirstKeyword";
        SyntaxKind5[SyntaxKind5["LastKeyword"] = 165 /* OfKeyword */] = "LastKeyword";
        SyntaxKind5[SyntaxKind5["FirstFutureReservedWord"] = 119 /* ImplementsKeyword */] = "FirstFutureReservedWord";
        SyntaxKind5[SyntaxKind5["LastFutureReservedWord"] = 127 /* YieldKeyword */] = "LastFutureReservedWord";
        SyntaxKind5[SyntaxKind5["FirstTypeNode"] = 182 /* TypePredicate */] = "FirstTypeNode";
        SyntaxKind5[SyntaxKind5["LastTypeNode"] = 205 /* ImportType */] = "LastTypeNode";
        SyntaxKind5[SyntaxKind5["FirstPunctuation"] = 19 /* OpenBraceToken */] = "FirstPunctuation";
        SyntaxKind5[SyntaxKind5["LastPunctuation"] = 79 /* CaretEqualsToken */] = "LastPunctuation";
        SyntaxKind5[SyntaxKind5["FirstToken"] = 0 /* Unknown */] = "FirstToken";
        SyntaxKind5[SyntaxKind5["LastToken"] = 165 /* LastKeyword */] = "LastToken";
        SyntaxKind5[SyntaxKind5["FirstTriviaToken"] = 2 /* SingleLineCommentTrivia */] = "FirstTriviaToken";
        SyntaxKind5[SyntaxKind5["LastTriviaToken"] = 7 /* ConflictMarkerTrivia */] = "LastTriviaToken";
        SyntaxKind5[SyntaxKind5["FirstLiteralToken"] = 9 /* NumericLiteral */] = "FirstLiteralToken";
        SyntaxKind5[SyntaxKind5["LastLiteralToken"] = 15 /* NoSubstitutionTemplateLiteral */] = "LastLiteralToken";
        SyntaxKind5[SyntaxKind5["FirstTemplateToken"] = 15 /* NoSubstitutionTemplateLiteral */] = "FirstTemplateToken";
        SyntaxKind5[SyntaxKind5["LastTemplateToken"] = 18 /* TemplateTail */] = "LastTemplateToken";
        SyntaxKind5[SyntaxKind5["FirstBinaryOperator"] = 30 /* LessThanToken */] = "FirstBinaryOperator";
        SyntaxKind5[SyntaxKind5["LastBinaryOperator"] = 79 /* CaretEqualsToken */] = "LastBinaryOperator";
        SyntaxKind5[SyntaxKind5["FirstStatement"] = 243 /* VariableStatement */] = "FirstStatement";
        SyntaxKind5[SyntaxKind5["LastStatement"] = 259 /* DebuggerStatement */] = "LastStatement";
        SyntaxKind5[SyntaxKind5["FirstNode"] = 166 /* QualifiedName */] = "FirstNode";
        SyntaxKind5[SyntaxKind5["FirstJSDocNode"] = 316 /* JSDocTypeExpression */] = "FirstJSDocNode";
        SyntaxKind5[SyntaxKind5["LastJSDocNode"] = 357 /* JSDocSatisfiesTag */] = "LastJSDocNode";
        SyntaxKind5[SyntaxKind5["FirstJSDocTagNode"] = 334 /* JSDocTag */] = "FirstJSDocTagNode";
        SyntaxKind5[SyntaxKind5["LastJSDocTagNode"] = 357 /* JSDocSatisfiesTag */] = "LastJSDocTagNode";
        SyntaxKind5[SyntaxKind5["FirstContextualKeyword"] = 128 /* AbstractKeyword */] = "FirstContextualKeyword";
        SyntaxKind5[SyntaxKind5["LastContextualKeyword"] = 165 /* OfKeyword */] = "LastContextualKeyword";
        return SyntaxKind5;
      })(SyntaxKind || {});
      NodeFlags = /* @__PURE__ */ ((NodeFlags3) => {
        NodeFlags3[NodeFlags3["None"] = 0] = "None";
        NodeFlags3[NodeFlags3["Let"] = 1] = "Let";
        NodeFlags3[NodeFlags3["Const"] = 2] = "Const";
        NodeFlags3[NodeFlags3["Using"] = 4] = "Using";
        NodeFlags3[NodeFlags3["AwaitUsing"] = 6] = "AwaitUsing";
        NodeFlags3[NodeFlags3["NestedNamespace"] = 8] = "NestedNamespace";
        NodeFlags3[NodeFlags3["Synthesized"] = 16] = "Synthesized";
        NodeFlags3[NodeFlags3["Namespace"] = 32] = "Namespace";
        NodeFlags3[NodeFlags3["OptionalChain"] = 64] = "OptionalChain";
        NodeFlags3[NodeFlags3["ExportContext"] = 128] = "ExportContext";
        NodeFlags3[NodeFlags3["ContainsThis"] = 256] = "ContainsThis";
        NodeFlags3[NodeFlags3["HasImplicitReturn"] = 512] = "HasImplicitReturn";
        NodeFlags3[NodeFlags3["HasExplicitReturn"] = 1024] = "HasExplicitReturn";
        NodeFlags3[NodeFlags3["GlobalAugmentation"] = 2048] = "GlobalAugmentation";
        NodeFlags3[NodeFlags3["HasAsyncFunctions"] = 4096] = "HasAsyncFunctions";
        NodeFlags3[NodeFlags3["DisallowInContext"] = 8192] = "DisallowInContext";
        NodeFlags3[NodeFlags3["YieldContext"] = 16384] = "YieldContext";
        NodeFlags3[NodeFlags3["DecoratorContext"] = 32768] = "DecoratorContext";
        NodeFlags3[NodeFlags3["AwaitContext"] = 65536] = "AwaitContext";
        NodeFlags3[NodeFlags3["DisallowConditionalTypesContext"] = 131072] = "DisallowConditionalTypesContext";
        NodeFlags3[NodeFlags3["ThisNodeHasError"] = 262144] = "ThisNodeHasError";
        NodeFlags3[NodeFlags3["JavaScriptFile"] = 524288] = "JavaScriptFile";
        NodeFlags3[NodeFlags3["ThisNodeOrAnySubNodesHasError"] = 1048576] = "ThisNodeOrAnySubNodesHasError";
        NodeFlags3[NodeFlags3["HasAggregatedChildData"] = 2097152] = "HasAggregatedChildData";
        NodeFlags3[NodeFlags3["PossiblyContainsDynamicImport"] = 4194304] = "PossiblyContainsDynamicImport";
        NodeFlags3[NodeFlags3["PossiblyContainsImportMeta"] = 8388608] = "PossiblyContainsImportMeta";
        NodeFlags3[NodeFlags3["JSDoc"] = 16777216] = "JSDoc";
        NodeFlags3[NodeFlags3["Ambient"] = 33554432] = "Ambient";
        NodeFlags3[NodeFlags3["InWithStatement"] = 67108864] = "InWithStatement";
        NodeFlags3[NodeFlags3["JsonFile"] = 134217728] = "JsonFile";
        NodeFlags3[NodeFlags3["TypeCached"] = 268435456] = "TypeCached";
        NodeFlags3[NodeFlags3["Deprecated"] = 536870912] = "Deprecated";
        NodeFlags3[NodeFlags3["BlockScoped"] = 7] = "BlockScoped";
        NodeFlags3[NodeFlags3["Constant"] = 6] = "Constant";
        NodeFlags3[NodeFlags3["ReachabilityCheckFlags"] = 1536] = "ReachabilityCheckFlags";
        NodeFlags3[NodeFlags3["ReachabilityAndEmitFlags"] = 5632] = "ReachabilityAndEmitFlags";
        NodeFlags3[NodeFlags3["ContextFlags"] = 101441536] = "ContextFlags";
        NodeFlags3[NodeFlags3["TypeExcludesFlags"] = 81920] = "TypeExcludesFlags";
        NodeFlags3[NodeFlags3["PermanentlySetIncrementalFlags"] = 12582912] = "PermanentlySetIncrementalFlags";
        NodeFlags3[NodeFlags3["IdentifierHasExtendedUnicodeEscape"] = 256 /* ContainsThis */] = "IdentifierHasExtendedUnicodeEscape";
        NodeFlags3[NodeFlags3["IdentifierIsInJSDocNamespace"] = 4096 /* HasAsyncFunctions */] = "IdentifierIsInJSDocNamespace";
        return NodeFlags3;
      })(NodeFlags || {});
      ModifierFlags = /* @__PURE__ */ ((ModifierFlags3) => {
        ModifierFlags3[ModifierFlags3["None"] = 0] = "None";
        ModifierFlags3[ModifierFlags3["Public"] = 1] = "Public";
        ModifierFlags3[ModifierFlags3["Private"] = 2] = "Private";
        ModifierFlags3[ModifierFlags3["Protected"] = 4] = "Protected";
        ModifierFlags3[ModifierFlags3["Readonly"] = 8] = "Readonly";
        ModifierFlags3[ModifierFlags3["Override"] = 16] = "Override";
        ModifierFlags3[ModifierFlags3["Export"] = 32] = "Export";
        ModifierFlags3[ModifierFlags3["Abstract"] = 64] = "Abstract";
        ModifierFlags3[ModifierFlags3["Ambient"] = 128] = "Ambient";
        ModifierFlags3[ModifierFlags3["Static"] = 256] = "Static";
        ModifierFlags3[ModifierFlags3["Accessor"] = 512] = "Accessor";
        ModifierFlags3[ModifierFlags3["Async"] = 1024] = "Async";
        ModifierFlags3[ModifierFlags3["Default"] = 2048] = "Default";
        ModifierFlags3[ModifierFlags3["Const"] = 4096] = "Const";
        ModifierFlags3[ModifierFlags3["In"] = 8192] = "In";
        ModifierFlags3[ModifierFlags3["Out"] = 16384] = "Out";
        ModifierFlags3[ModifierFlags3["Decorator"] = 32768] = "Decorator";
        ModifierFlags3[ModifierFlags3["Deprecated"] = 65536] = "Deprecated";
        ModifierFlags3[ModifierFlags3["JSDocPublic"] = 8388608] = "JSDocPublic";
        ModifierFlags3[ModifierFlags3["JSDocPrivate"] = 16777216] = "JSDocPrivate";
        ModifierFlags3[ModifierFlags3["JSDocProtected"] = 33554432] = "JSDocProtected";
        ModifierFlags3[ModifierFlags3["JSDocReadonly"] = 67108864] = "JSDocReadonly";
        ModifierFlags3[ModifierFlags3["JSDocOverride"] = 134217728] = "JSDocOverride";
        ModifierFlags3[ModifierFlags3["SyntacticOrJSDocModifiers"] = 31] = "SyntacticOrJSDocModifiers";
        ModifierFlags3[ModifierFlags3["SyntacticOnlyModifiers"] = 65504] = "SyntacticOnlyModifiers";
        ModifierFlags3[ModifierFlags3["SyntacticModifiers"] = 65535] = "SyntacticModifiers";
        ModifierFlags3[ModifierFlags3["JSDocCacheOnlyModifiers"] = 260046848] = "JSDocCacheOnlyModifiers";
        ModifierFlags3[ModifierFlags3["JSDocOnlyModifiers"] = 65536 /* Deprecated */] = "JSDocOnlyModifiers";
        ModifierFlags3[ModifierFlags3["NonCacheOnlyModifiers"] = 131071] = "NonCacheOnlyModifiers";
        ModifierFlags3[ModifierFlags3["HasComputedJSDocModifiers"] = 268435456] = "HasComputedJSDocModifiers";
        ModifierFlags3[ModifierFlags3["HasComputedFlags"] = 536870912] = "HasComputedFlags";
        ModifierFlags3[ModifierFlags3["AccessibilityModifier"] = 7] = "AccessibilityModifier";
        ModifierFlags3[ModifierFlags3["ParameterPropertyModifier"] = 31] = "ParameterPropertyModifier";
        ModifierFlags3[ModifierFlags3["NonPublicAccessibilityModifier"] = 6] = "NonPublicAccessibilityModifier";
        ModifierFlags3[ModifierFlags3["TypeScriptModifier"] = 28895] = "TypeScriptModifier";
        ModifierFlags3[ModifierFlags3["ExportDefault"] = 2080] = "ExportDefault";
        ModifierFlags3[ModifierFlags3["All"] = 131071] = "All";
        ModifierFlags3[ModifierFlags3["Modifier"] = 98303] = "Modifier";
        return ModifierFlags3;
      })(ModifierFlags || {});
      JsxFlags = /* @__PURE__ */ ((JsxFlags2) => {
        JsxFlags2[JsxFlags2["None"] = 0] = "None";
        JsxFlags2[JsxFlags2["IntrinsicNamedElement"] = 1] = "IntrinsicNamedElement";
        JsxFlags2[JsxFlags2["IntrinsicIndexedElement"] = 2] = "IntrinsicIndexedElement";
        JsxFlags2[JsxFlags2["IntrinsicElement"] = 3] = "IntrinsicElement";
        return JsxFlags2;
      })(JsxFlags || {});
      RelationComparisonResult = /* @__PURE__ */ ((RelationComparisonResult3) => {
        RelationComparisonResult3[RelationComparisonResult3["None"] = 0] = "None";
        RelationComparisonResult3[RelationComparisonResult3["Succeeded"] = 1] = "Succeeded";
        RelationComparisonResult3[RelationComparisonResult3["Failed"] = 2] = "Failed";
        RelationComparisonResult3[RelationComparisonResult3["Reported"] = 4] = "Reported";
        RelationComparisonResult3[RelationComparisonResult3["ReportsUnmeasurable"] = 8] = "ReportsUnmeasurable";
        RelationComparisonResult3[RelationComparisonResult3["ReportsUnreliable"] = 16] = "ReportsUnreliable";
        RelationComparisonResult3[RelationComparisonResult3["ReportsMask"] = 24] = "ReportsMask";
        return RelationComparisonResult3;
      })(RelationComparisonResult || {});
      GeneratedIdentifierFlags = /* @__PURE__ */ ((GeneratedIdentifierFlags2) => {
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["None"] = 0] = "None";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Auto"] = 1] = "Auto";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Loop"] = 2] = "Loop";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Unique"] = 3] = "Unique";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Node"] = 4] = "Node";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["KindMask"] = 7] = "KindMask";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["ReservedInNestedScopes"] = 8] = "ReservedInNestedScopes";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Optimistic"] = 16] = "Optimistic";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["FileLevel"] = 32] = "FileLevel";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["AllowNameSubstitution"] = 64] = "AllowNameSubstitution";
        return GeneratedIdentifierFlags2;
      })(GeneratedIdentifierFlags || {});
      TokenFlags = /* @__PURE__ */ ((TokenFlags2) => {
        TokenFlags2[TokenFlags2["None"] = 0] = "None";
        TokenFlags2[TokenFlags2["PrecedingLineBreak"] = 1] = "PrecedingLineBreak";
        TokenFlags2[TokenFlags2["PrecedingJSDocComment"] = 2] = "PrecedingJSDocComment";
        TokenFlags2[TokenFlags2["Unterminated"] = 4] = "Unterminated";
        TokenFlags2[TokenFlags2["ExtendedUnicodeEscape"] = 8] = "ExtendedUnicodeEscape";
        TokenFlags2[TokenFlags2["Scientific"] = 16] = "Scientific";
        TokenFlags2[TokenFlags2["Octal"] = 32] = "Octal";
        TokenFlags2[TokenFlags2["HexSpecifier"] = 64] = "HexSpecifier";
        TokenFlags2[TokenFlags2["BinarySpecifier"] = 128] = "BinarySpecifier";
        TokenFlags2[TokenFlags2["OctalSpecifier"] = 256] = "OctalSpecifier";
        TokenFlags2[TokenFlags2["ContainsSeparator"] = 512] = "ContainsSeparator";
        TokenFlags2[TokenFlags2["UnicodeEscape"] = 1024] = "UnicodeEscape";
        TokenFlags2[TokenFlags2["ContainsInvalidEscape"] = 2048] = "ContainsInvalidEscape";
        TokenFlags2[TokenFlags2["HexEscape"] = 4096] = "HexEscape";
        TokenFlags2[TokenFlags2["ContainsLeadingZero"] = 8192] = "ContainsLeadingZero";
        TokenFlags2[TokenFlags2["ContainsInvalidSeparator"] = 16384] = "ContainsInvalidSeparator";
        TokenFlags2[TokenFlags2["BinaryOrOctalSpecifier"] = 384] = "BinaryOrOctalSpecifier";
        TokenFlags2[TokenFlags2["WithSpecifier"] = 448] = "WithSpecifier";
        TokenFlags2[TokenFlags2["StringLiteralFlags"] = 7176] = "StringLiteralFlags";
        TokenFlags2[TokenFlags2["NumericLiteralFlags"] = 25584] = "NumericLiteralFlags";
        TokenFlags2[TokenFlags2["TemplateLiteralLikeFlags"] = 7176] = "TemplateLiteralLikeFlags";
        TokenFlags2[TokenFlags2["IsInvalid"] = 26656] = "IsInvalid";
        return TokenFlags2;
      })(TokenFlags || {});
      FlowFlags = /* @__PURE__ */ ((FlowFlags2) => {
        FlowFlags2[FlowFlags2["Unreachable"] = 1] = "Unreachable";
        FlowFlags2[FlowFlags2["Start"] = 2] = "Start";
        FlowFlags2[FlowFlags2["BranchLabel"] = 4] = "BranchLabel";
        FlowFlags2[FlowFlags2["LoopLabel"] = 8] = "LoopLabel";
        FlowFlags2[FlowFlags2["Assignment"] = 16] = "Assignment";
        FlowFlags2[FlowFlags2["TrueCondition"] = 32] = "TrueCondition";
        FlowFlags2[FlowFlags2["FalseCondition"] = 64] = "FalseCondition";
        FlowFlags2[FlowFlags2["SwitchClause"] = 128] = "SwitchClause";
        FlowFlags2[FlowFlags2["ArrayMutation"] = 256] = "ArrayMutation";
        FlowFlags2[FlowFlags2["Call"] = 512] = "Call";
        FlowFlags2[FlowFlags2["ReduceLabel"] = 1024] = "ReduceLabel";
        FlowFlags2[FlowFlags2["Referenced"] = 2048] = "Referenced";
        FlowFlags2[FlowFlags2["Shared"] = 4096] = "Shared";
        FlowFlags2[FlowFlags2["Label"] = 12] = "Label";
        FlowFlags2[FlowFlags2["Condition"] = 96] = "Condition";
        return FlowFlags2;
      })(FlowFlags || {});
      CommentDirectiveType = /* @__PURE__ */ ((CommentDirectiveType2) => {
        CommentDirectiveType2[CommentDirectiveType2["ExpectError"] = 0] = "ExpectError";
        CommentDirectiveType2[CommentDirectiveType2["Ignore"] = 1] = "Ignore";
        return CommentDirectiveType2;
      })(CommentDirectiveType || {});
      OperationCanceledException = class {
      };
      FileIncludeKind = /* @__PURE__ */ ((FileIncludeKind2) => {
        FileIncludeKind2[FileIncludeKind2["RootFile"] = 0] = "RootFile";
        FileIncludeKind2[FileIncludeKind2["SourceFromProjectReference"] = 1] = "SourceFromProjectReference";
        FileIncludeKind2[FileIncludeKind2["OutputFromProjectReference"] = 2] = "OutputFromProjectReference";
        FileIncludeKind2[FileIncludeKind2["Import"] = 3] = "Import";
        FileIncludeKind2[FileIncludeKind2["ReferenceFile"] = 4] = "ReferenceFile";
        FileIncludeKind2[FileIncludeKind2["TypeReferenceDirective"] = 5] = "TypeReferenceDirective";
        FileIncludeKind2[FileIncludeKind2["LibFile"] = 6] = "LibFile";
        FileIncludeKind2[FileIncludeKind2["LibReferenceDirective"] = 7] = "LibReferenceDirective";
        FileIncludeKind2[FileIncludeKind2["AutomaticTypeDirectiveFile"] = 8] = "AutomaticTypeDirectiveFile";
        return FileIncludeKind2;
      })(FileIncludeKind || {});
      FilePreprocessingDiagnosticsKind = /* @__PURE__ */ ((FilePreprocessingDiagnosticsKind2) => {
        FilePreprocessingDiagnosticsKind2[FilePreprocessingDiagnosticsKind2["FilePreprocessingReferencedDiagnostic"] = 0] = "FilePreprocessingReferencedDiagnostic";
        FilePreprocessingDiagnosticsKind2[FilePreprocessingDiagnosticsKind2["FilePreprocessingFileExplainingDiagnostic"] = 1] = "FilePreprocessingFileExplainingDiagnostic";
        FilePreprocessingDiagnosticsKind2[FilePreprocessingDiagnosticsKind2["ResolutionDiagnostics"] = 2] = "ResolutionDiagnostics";
        return FilePreprocessingDiagnosticsKind2;
      })(FilePreprocessingDiagnosticsKind || {});
      EmitOnly = /* @__PURE__ */ ((EmitOnly4) => {
        EmitOnly4[EmitOnly4["Js"] = 0] = "Js";
        EmitOnly4[EmitOnly4["Dts"] = 1] = "Dts";
        return EmitOnly4;
      })(EmitOnly || {});
      StructureIsReused = /* @__PURE__ */ ((StructureIsReused2) => {
        StructureIsReused2[StructureIsReused2["Not"] = 0] = "Not";
        StructureIsReused2[StructureIsReused2["SafeModules"] = 1] = "SafeModules";
        StructureIsReused2[StructureIsReused2["Completely"] = 2] = "Completely";
        return StructureIsReused2;
      })(StructureIsReused || {});
      ExitStatus = /* @__PURE__ */ ((ExitStatus2) => {
        ExitStatus2[ExitStatus2["Success"] = 0] = "Success";
        ExitStatus2[ExitStatus2["DiagnosticsPresent_OutputsSkipped"] = 1] = "DiagnosticsPresent_OutputsSkipped";
        ExitStatus2[ExitStatus2["DiagnosticsPresent_OutputsGenerated"] = 2] = "DiagnosticsPresent_OutputsGenerated";
        ExitStatus2[ExitStatus2["InvalidProject_OutputsSkipped"] = 3] = "InvalidProject_OutputsSkipped";
        ExitStatus2[ExitStatus2["ProjectReferenceCycle_OutputsSkipped"] = 4] = "ProjectReferenceCycle_OutputsSkipped";
        return ExitStatus2;
      })(ExitStatus || {});
      MemberOverrideStatus = /* @__PURE__ */ ((MemberOverrideStatus2) => {
        MemberOverrideStatus2[MemberOverrideStatus2["Ok"] = 0] = "Ok";
        MemberOverrideStatus2[MemberOverrideStatus2["NeedsOverride"] = 1] = "NeedsOverride";
        MemberOverrideStatus2[MemberOverrideStatus2["HasInvalidOverride"] = 2] = "HasInvalidOverride";
        return MemberOverrideStatus2;
      })(MemberOverrideStatus || {});
      UnionReduction = /* @__PURE__ */ ((UnionReduction2) => {
        UnionReduction2[UnionReduction2["None"] = 0] = "None";
        UnionReduction2[UnionReduction2["Literal"] = 1] = "Literal";
        UnionReduction2[UnionReduction2["Subtype"] = 2] = "Subtype";
        return UnionReduction2;
      })(UnionReduction || {});
      ContextFlags = /* @__PURE__ */ ((ContextFlags3) => {
        ContextFlags3[ContextFlags3["None"] = 0] = "None";
        ContextFlags3[ContextFlags3["Signature"] = 1] = "Signature";
        ContextFlags3[ContextFlags3["NoConstraints"] = 2] = "NoConstraints";
        ContextFlags3[ContextFlags3["Completions"] = 4] = "Completions";
        ContextFlags3[ContextFlags3["SkipBindingPatterns"] = 8] = "SkipBindingPatterns";
        return ContextFlags3;
      })(ContextFlags || {});
      NodeBuilderFlags = /* @__PURE__ */ ((NodeBuilderFlags2) => {
        NodeBuilderFlags2[NodeBuilderFlags2["None"] = 0] = "None";
        NodeBuilderFlags2[NodeBuilderFlags2["NoTruncation"] = 1] = "NoTruncation";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteArrayAsGenericType"] = 2] = "WriteArrayAsGenericType";
        NodeBuilderFlags2[NodeBuilderFlags2["GenerateNamesForShadowedTypeParams"] = 4] = "GenerateNamesForShadowedTypeParams";
        NodeBuilderFlags2[NodeBuilderFlags2["UseStructuralFallback"] = 8] = "UseStructuralFallback";
        NodeBuilderFlags2[NodeBuilderFlags2["ForbidIndexedAccessSymbolReferences"] = 16] = "ForbidIndexedAccessSymbolReferences";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteTypeArgumentsOfSignature"] = 32] = "WriteTypeArgumentsOfSignature";
        NodeBuilderFlags2[NodeBuilderFlags2["UseFullyQualifiedType"] = 64] = "UseFullyQualifiedType";
        NodeBuilderFlags2[NodeBuilderFlags2["UseOnlyExternalAliasing"] = 128] = "UseOnlyExternalAliasing";
        NodeBuilderFlags2[NodeBuilderFlags2["SuppressAnyReturnType"] = 256] = "SuppressAnyReturnType";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteTypeParametersInQualifiedName"] = 512] = "WriteTypeParametersInQualifiedName";
        NodeBuilderFlags2[NodeBuilderFlags2["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteClassExpressionAsTypeLiteral"] = 2048] = "WriteClassExpressionAsTypeLiteral";
        NodeBuilderFlags2[NodeBuilderFlags2["UseTypeOfFunction"] = 4096] = "UseTypeOfFunction";
        NodeBuilderFlags2[NodeBuilderFlags2["OmitParameterModifiers"] = 8192] = "OmitParameterModifiers";
        NodeBuilderFlags2[NodeBuilderFlags2["UseAliasDefinedOutsideCurrentScope"] = 16384] = "UseAliasDefinedOutsideCurrentScope";
        NodeBuilderFlags2[NodeBuilderFlags2["UseSingleQuotesForStringLiteralType"] = 268435456] = "UseSingleQuotesForStringLiteralType";
        NodeBuilderFlags2[NodeBuilderFlags2["NoTypeReduction"] = 536870912] = "NoTypeReduction";
        NodeBuilderFlags2[NodeBuilderFlags2["OmitThisParameter"] = 33554432] = "OmitThisParameter";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowThisInObjectLiteral"] = 32768] = "AllowThisInObjectLiteral";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowQualifiedNameInPlaceOfIdentifier"] = 65536] = "AllowQualifiedNameInPlaceOfIdentifier";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowAnonymousIdentifier"] = 131072] = "AllowAnonymousIdentifier";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowEmptyUnionOrIntersection"] = 262144] = "AllowEmptyUnionOrIntersection";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowEmptyTuple"] = 524288] = "AllowEmptyTuple";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowUniqueESSymbolType"] = 1048576] = "AllowUniqueESSymbolType";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowEmptyIndexInfoType"] = 2097152] = "AllowEmptyIndexInfoType";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteComputedProps"] = 1073741824] = "WriteComputedProps";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowNodeModulesRelativePaths"] = 67108864] = "AllowNodeModulesRelativePaths";
        NodeBuilderFlags2[NodeBuilderFlags2["DoNotIncludeSymbolChain"] = 134217728] = "DoNotIncludeSymbolChain";
        NodeBuilderFlags2[NodeBuilderFlags2["IgnoreErrors"] = 70221824] = "IgnoreErrors";
        NodeBuilderFlags2[NodeBuilderFlags2["InObjectTypeLiteral"] = 4194304] = "InObjectTypeLiteral";
        NodeBuilderFlags2[NodeBuilderFlags2["InTypeAlias"] = 8388608] = "InTypeAlias";
        NodeBuilderFlags2[NodeBuilderFlags2["InInitialEntityName"] = 16777216] = "InInitialEntityName";
        return NodeBuilderFlags2;
      })(NodeBuilderFlags || {});
      TypeFormatFlags = /* @__PURE__ */ ((TypeFormatFlags2) => {
        TypeFormatFlags2[TypeFormatFlags2["None"] = 0] = "None";
        TypeFormatFlags2[TypeFormatFlags2["NoTruncation"] = 1] = "NoTruncation";
        TypeFormatFlags2[TypeFormatFlags2["WriteArrayAsGenericType"] = 2] = "WriteArrayAsGenericType";
        TypeFormatFlags2[TypeFormatFlags2["GenerateNamesForShadowedTypeParams"] = 4] = "GenerateNamesForShadowedTypeParams";
        TypeFormatFlags2[TypeFormatFlags2["UseStructuralFallback"] = 8] = "UseStructuralFallback";
        TypeFormatFlags2[TypeFormatFlags2["WriteTypeArgumentsOfSignature"] = 32] = "WriteTypeArgumentsOfSignature";
        TypeFormatFlags2[TypeFormatFlags2["UseFullyQualifiedType"] = 64] = "UseFullyQualifiedType";
        TypeFormatFlags2[TypeFormatFlags2["SuppressAnyReturnType"] = 256] = "SuppressAnyReturnType";
        TypeFormatFlags2[TypeFormatFlags2["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";
        TypeFormatFlags2[TypeFormatFlags2["WriteClassExpressionAsTypeLiteral"] = 2048] = "WriteClassExpressionAsTypeLiteral";
        TypeFormatFlags2[TypeFormatFlags2["UseTypeOfFunction"] = 4096] = "UseTypeOfFunction";
        TypeFormatFlags2[TypeFormatFlags2["OmitParameterModifiers"] = 8192] = "OmitParameterModifiers";
        TypeFormatFlags2[TypeFormatFlags2["UseAliasDefinedOutsideCurrentScope"] = 16384] = "UseAliasDefinedOutsideCurrentScope";
        TypeFormatFlags2[TypeFormatFlags2["UseSingleQuotesForStringLiteralType"] = 268435456] = "UseSingleQuotesForStringLiteralType";
        TypeFormatFlags2[TypeFormatFlags2["NoTypeReduction"] = 536870912] = "NoTypeReduction";
        TypeFormatFlags2[TypeFormatFlags2["OmitThisParameter"] = 33554432] = "OmitThisParameter";
        TypeFormatFlags2[TypeFormatFlags2["AllowUniqueESSymbolType"] = 1048576] = "AllowUniqueESSymbolType";
        TypeFormatFlags2[TypeFormatFlags2["AddUndefined"] = 131072] = "AddUndefined";
        TypeFormatFlags2[TypeFormatFlags2["WriteArrowStyleSignature"] = 262144] = "WriteArrowStyleSignature";
        TypeFormatFlags2[TypeFormatFlags2["InArrayType"] = 524288] = "InArrayType";
        TypeFormatFlags2[TypeFormatFlags2["InElementType"] = 2097152] = "InElementType";
        TypeFormatFlags2[TypeFormatFlags2["InFirstTypeArgument"] = 4194304] = "InFirstTypeArgument";
        TypeFormatFlags2[TypeFormatFlags2["InTypeAlias"] = 8388608] = "InTypeAlias";
        TypeFormatFlags2[TypeFormatFlags2["NodeBuilderFlagsMask"] = 848330095] = "NodeBuilderFlagsMask";
        return TypeFormatFlags2;
      })(TypeFormatFlags || {});
      SymbolFormatFlags = /* @__PURE__ */ ((SymbolFormatFlags2) => {
        SymbolFormatFlags2[SymbolFormatFlags2["None"] = 0] = "None";
        SymbolFormatFlags2[SymbolFormatFlags2["WriteTypeParametersOrArguments"] = 1] = "WriteTypeParametersOrArguments";
        SymbolFormatFlags2[SymbolFormatFlags2["UseOnlyExternalAliasing"] = 2] = "UseOnlyExternalAliasing";
        SymbolFormatFlags2[SymbolFormatFlags2["AllowAnyNodeKind"] = 4] = "AllowAnyNodeKind";
        SymbolFormatFlags2[SymbolFormatFlags2["UseAliasDefinedOutsideCurrentScope"] = 8] = "UseAliasDefinedOutsideCurrentScope";
        SymbolFormatFlags2[SymbolFormatFlags2["WriteComputedProps"] = 16] = "WriteComputedProps";
        SymbolFormatFlags2[SymbolFormatFlags2["DoNotIncludeSymbolChain"] = 32] = "DoNotIncludeSymbolChain";
        return SymbolFormatFlags2;
      })(SymbolFormatFlags || {});
      SymbolAccessibility = /* @__PURE__ */ ((SymbolAccessibility2) => {
        SymbolAccessibility2[SymbolAccessibility2["Accessible"] = 0] = "Accessible";
        SymbolAccessibility2[SymbolAccessibility2["NotAccessible"] = 1] = "NotAccessible";
        SymbolAccessibility2[SymbolAccessibility2["CannotBeNamed"] = 2] = "CannotBeNamed";
        return SymbolAccessibility2;
      })(SymbolAccessibility || {});
      SyntheticSymbolKind = /* @__PURE__ */ ((SyntheticSymbolKind2) => {
        SyntheticSymbolKind2[SyntheticSymbolKind2["UnionOrIntersection"] = 0] = "UnionOrIntersection";
        SyntheticSymbolKind2[SyntheticSymbolKind2["Spread"] = 1] = "Spread";
        return SyntheticSymbolKind2;
      })(SyntheticSymbolKind || {});
      TypePredicateKind = /* @__PURE__ */ ((TypePredicateKind2) => {
        TypePredicateKind2[TypePredicateKind2["This"] = 0] = "This";
        TypePredicateKind2[TypePredicateKind2["Identifier"] = 1] = "Identifier";
        TypePredicateKind2[TypePredicateKind2["AssertsThis"] = 2] = "AssertsThis";
        TypePredicateKind2[TypePredicateKind2["AssertsIdentifier"] = 3] = "AssertsIdentifier";
        return TypePredicateKind2;
      })(TypePredicateKind || {});
      TypeReferenceSerializationKind = /* @__PURE__ */ ((TypeReferenceSerializationKind2) => {
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["Unknown"] = 0] = "Unknown";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["TypeWithConstructSignatureAndValue"] = 1] = "TypeWithConstructSignatureAndValue";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["VoidNullableOrNeverType"] = 2] = "VoidNullableOrNeverType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["NumberLikeType"] = 3] = "NumberLikeType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["BigIntLikeType"] = 4] = "BigIntLikeType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["StringLikeType"] = 5] = "StringLikeType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["BooleanType"] = 6] = "BooleanType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["ArrayLikeType"] = 7] = "ArrayLikeType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["ESSymbolType"] = 8] = "ESSymbolType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["Promise"] = 9] = "Promise";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["TypeWithCallSignature"] = 10] = "TypeWithCallSignature";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["ObjectType"] = 11] = "ObjectType";
        return TypeReferenceSerializationKind2;
      })(TypeReferenceSerializationKind || {});
      SymbolFlags = /* @__PURE__ */ ((SymbolFlags3) => {
        SymbolFlags3[SymbolFlags3["None"] = 0] = "None";
        SymbolFlags3[SymbolFlags3["FunctionScopedVariable"] = 1] = "FunctionScopedVariable";
        SymbolFlags3[SymbolFlags3["BlockScopedVariable"] = 2] = "BlockScopedVariable";
        SymbolFlags3[SymbolFlags3["Property"] = 4] = "Property";
        SymbolFlags3[SymbolFlags3["EnumMember"] = 8] = "EnumMember";
        SymbolFlags3[SymbolFlags3["Function"] = 16] = "Function";
        SymbolFlags3[SymbolFlags3["Class"] = 32] = "Class";
        SymbolFlags3[SymbolFlags3["Interface"] = 64] = "Interface";
        SymbolFlags3[SymbolFlags3["ConstEnum"] = 128] = "ConstEnum";
        SymbolFlags3[SymbolFlags3["RegularEnum"] = 256] = "RegularEnum";
        SymbolFlags3[SymbolFlags3["ValueModule"] = 512] = "ValueModule";
        SymbolFlags3[SymbolFlags3["NamespaceModule"] = 1024] = "NamespaceModule";
        SymbolFlags3[SymbolFlags3["TypeLiteral"] = 2048] = "TypeLiteral";
        SymbolFlags3[SymbolFlags3["ObjectLiteral"] = 4096] = "ObjectLiteral";
        SymbolFlags3[SymbolFlags3["Method"] = 8192] = "Method";
        SymbolFlags3[SymbolFlags3["Constructor"] = 16384] = "Constructor";
        SymbolFlags3[SymbolFlags3["GetAccessor"] = 32768] = "GetAccessor";
        SymbolFlags3[SymbolFlags3["SetAccessor"] = 65536] = "SetAccessor";
        SymbolFlags3[SymbolFlags3["Signature"] = 131072] = "Signature";
        SymbolFlags3[SymbolFlags3["TypeParameter"] = 262144] = "TypeParameter";
        SymbolFlags3[SymbolFlags3["TypeAlias"] = 524288] = "TypeAlias";
        SymbolFlags3[SymbolFlags3["ExportValue"] = 1048576] = "ExportValue";
        SymbolFlags3[SymbolFlags3["Alias"] = 2097152] = "Alias";
        SymbolFlags3[SymbolFlags3["Prototype"] = 4194304] = "Prototype";
        SymbolFlags3[SymbolFlags3["ExportStar"] = 8388608] = "ExportStar";
        SymbolFlags3[SymbolFlags3["Optional"] = 16777216] = "Optional";
        SymbolFlags3[SymbolFlags3["Transient"] = 33554432] = "Transient";
        SymbolFlags3[SymbolFlags3["Assignment"] = 67108864] = "Assignment";
        SymbolFlags3[SymbolFlags3["ModuleExports"] = 134217728] = "ModuleExports";
        SymbolFlags3[SymbolFlags3["All"] = -1] = "All";
        SymbolFlags3[SymbolFlags3["Enum"] = 384] = "Enum";
        SymbolFlags3[SymbolFlags3["Variable"] = 3] = "Variable";
        SymbolFlags3[SymbolFlags3["Value"] = 111551] = "Value";
        SymbolFlags3[SymbolFlags3["Type"] = 788968] = "Type";
        SymbolFlags3[SymbolFlags3["Namespace"] = 1920] = "Namespace";
        SymbolFlags3[SymbolFlags3["Module"] = 1536] = "Module";
        SymbolFlags3[SymbolFlags3["Accessor"] = 98304] = "Accessor";
        SymbolFlags3[SymbolFlags3["FunctionScopedVariableExcludes"] = 111550] = "FunctionScopedVariableExcludes";
        SymbolFlags3[SymbolFlags3["BlockScopedVariableExcludes"] = 111551 /* Value */] = "BlockScopedVariableExcludes";
        SymbolFlags3[SymbolFlags3["ParameterExcludes"] = 111551 /* Value */] = "ParameterExcludes";
        SymbolFlags3[SymbolFlags3["PropertyExcludes"] = 0 /* None */] = "PropertyExcludes";
        SymbolFlags3[SymbolFlags3["EnumMemberExcludes"] = 900095] = "EnumMemberExcludes";
        SymbolFlags3[SymbolFlags3["FunctionExcludes"] = 110991] = "FunctionExcludes";
        SymbolFlags3[SymbolFlags3["ClassExcludes"] = 899503] = "ClassExcludes";
        SymbolFlags3[SymbolFlags3["InterfaceExcludes"] = 788872] = "InterfaceExcludes";
        SymbolFlags3[SymbolFlags3["RegularEnumExcludes"] = 899327] = "RegularEnumExcludes";
        SymbolFlags3[SymbolFlags3["ConstEnumExcludes"] = 899967] = "ConstEnumExcludes";
        SymbolFlags3[SymbolFlags3["ValueModuleExcludes"] = 110735] = "ValueModuleExcludes";
        SymbolFlags3[SymbolFlags3["NamespaceModuleExcludes"] = 0] = "NamespaceModuleExcludes";
        SymbolFlags3[SymbolFlags3["MethodExcludes"] = 103359] = "MethodExcludes";
        SymbolFlags3[SymbolFlags3["GetAccessorExcludes"] = 46015] = "GetAccessorExcludes";
        SymbolFlags3[SymbolFlags3["SetAccessorExcludes"] = 78783] = "SetAccessorExcludes";
        SymbolFlags3[SymbolFlags3["AccessorExcludes"] = 13247] = "AccessorExcludes";
        SymbolFlags3[SymbolFlags3["TypeParameterExcludes"] = 526824] = "TypeParameterExcludes";
        SymbolFlags3[SymbolFlags3["TypeAliasExcludes"] = 788968 /* Type */] = "TypeAliasExcludes";
        SymbolFlags3[SymbolFlags3["AliasExcludes"] = 2097152 /* Alias */] = "AliasExcludes";
        SymbolFlags3[SymbolFlags3["ModuleMember"] = 2623475] = "ModuleMember";
        SymbolFlags3[SymbolFlags3["ExportHasLocal"] = 944] = "ExportHasLocal";
        SymbolFlags3[SymbolFlags3["BlockScoped"] = 418] = "BlockScoped";
        SymbolFlags3[SymbolFlags3["PropertyOrAccessor"] = 98308] = "PropertyOrAccessor";
        SymbolFlags3[SymbolFlags3["ClassMember"] = 106500] = "ClassMember";
        SymbolFlags3[SymbolFlags3["ExportSupportsDefaultModifier"] = 112] = "ExportSupportsDefaultModifier";
        SymbolFlags3[SymbolFlags3["ExportDoesNotSupportDefaultModifier"] = -113] = "ExportDoesNotSupportDefaultModifier";
        SymbolFlags3[SymbolFlags3["Classifiable"] = 2885600] = "Classifiable";
        SymbolFlags3[SymbolFlags3["LateBindingContainer"] = 6256] = "LateBindingContainer";
        return SymbolFlags3;
      })(SymbolFlags || {});
      EnumKind = /* @__PURE__ */ ((EnumKind2) => {
        EnumKind2[EnumKind2["Numeric"] = 0] = "Numeric";
        EnumKind2[EnumKind2["Literal"] = 1] = "Literal";
        return EnumKind2;
      })(EnumKind || {});
      CheckFlags = /* @__PURE__ */ ((CheckFlags2) => {
        CheckFlags2[CheckFlags2["None"] = 0] = "None";
        CheckFlags2[CheckFlags2["Instantiated"] = 1] = "Instantiated";
        CheckFlags2[CheckFlags2["SyntheticProperty"] = 2] = "SyntheticProperty";
        CheckFlags2[CheckFlags2["SyntheticMethod"] = 4] = "SyntheticMethod";
        CheckFlags2[CheckFlags2["Readonly"] = 8] = "Readonly";
        CheckFlags2[CheckFlags2["ReadPartial"] = 16] = "ReadPartial";
        CheckFlags2[CheckFlags2["WritePartial"] = 32] = "WritePartial";
        CheckFlags2[CheckFlags2["HasNonUniformType"] = 64] = "HasNonUniformType";
        CheckFlags2[CheckFlags2["HasLiteralType"] = 128] = "HasLiteralType";
        CheckFlags2[CheckFlags2["ContainsPublic"] = 256] = "ContainsPublic";
        CheckFlags2[CheckFlags2["ContainsProtected"] = 512] = "ContainsProtected";
        CheckFlags2[CheckFlags2["ContainsPrivate"] = 1024] = "ContainsPrivate";
        CheckFlags2[CheckFlags2["ContainsStatic"] = 2048] = "ContainsStatic";
        CheckFlags2[CheckFlags2["Late"] = 4096] = "Late";
        CheckFlags2[CheckFlags2["ReverseMapped"] = 8192] = "ReverseMapped";
        CheckFlags2[CheckFlags2["OptionalParameter"] = 16384] = "OptionalParameter";
        CheckFlags2[CheckFlags2["RestParameter"] = 32768] = "RestParameter";
        CheckFlags2[CheckFlags2["DeferredType"] = 65536] = "DeferredType";
        CheckFlags2[CheckFlags2["HasNeverType"] = 131072] = "HasNeverType";
        CheckFlags2[CheckFlags2["Mapped"] = 262144] = "Mapped";
        CheckFlags2[CheckFlags2["StripOptional"] = 524288] = "StripOptional";
        CheckFlags2[CheckFlags2["Unresolved"] = 1048576] = "Unresolved";
        CheckFlags2[CheckFlags2["Synthetic"] = 6] = "Synthetic";
        CheckFlags2[CheckFlags2["Discriminant"] = 192] = "Discriminant";
        CheckFlags2[CheckFlags2["Partial"] = 48] = "Partial";
        return CheckFlags2;
      })(CheckFlags || {});
      InternalSymbolName = /* @__PURE__ */ ((InternalSymbolName2) => {
        InternalSymbolName2["Call"] = "__call";
        InternalSymbolName2["Constructor"] = "__constructor";
        InternalSymbolName2["New"] = "__new";
        InternalSymbolName2["Index"] = "__index";
        InternalSymbolName2["ExportStar"] = "__export";
        InternalSymbolName2["Global"] = "__global";
        InternalSymbolName2["Missing"] = "__missing";
        InternalSymbolName2["Type"] = "__type";
        InternalSymbolName2["Object"] = "__object";
        InternalSymbolName2["JSXAttributes"] = "__jsxAttributes";
        InternalSymbolName2["Class"] = "__class";
        InternalSymbolName2["Function"] = "__function";
        InternalSymbolName2["Computed"] = "__computed";
        InternalSymbolName2["Resolving"] = "__resolving__";
        InternalSymbolName2["ExportEquals"] = "export=";
        InternalSymbolName2["Default"] = "default";
        InternalSymbolName2["This"] = "this";
        InternalSymbolName2["InstantiationExpression"] = "__instantiationExpression";
        InternalSymbolName2["ImportAttributes"] = "__importAttributes";
        return InternalSymbolName2;
      })(InternalSymbolName || {});
      NodeCheckFlags = /* @__PURE__ */ ((NodeCheckFlags2) => {
        NodeCheckFlags2[NodeCheckFlags2["None"] = 0] = "None";
        NodeCheckFlags2[NodeCheckFlags2["TypeChecked"] = 1] = "TypeChecked";
        NodeCheckFlags2[NodeCheckFlags2["LexicalThis"] = 2] = "LexicalThis";
        NodeCheckFlags2[NodeCheckFlags2["CaptureThis"] = 4] = "CaptureThis";
        NodeCheckFlags2[NodeCheckFlags2["CaptureNewTarget"] = 8] = "CaptureNewTarget";
        NodeCheckFlags2[NodeCheckFlags2["SuperInstance"] = 16] = "SuperInstance";
        NodeCheckFlags2[NodeCheckFlags2["SuperStatic"] = 32] = "SuperStatic";
        NodeCheckFlags2[NodeCheckFlags2["ContextChecked"] = 64] = "ContextChecked";
        NodeCheckFlags2[NodeCheckFlags2["MethodWithSuperPropertyAccessInAsync"] = 128] = "MethodWithSuperPropertyAccessInAsync";
        NodeCheckFlags2[NodeCheckFlags2["MethodWithSuperPropertyAssignmentInAsync"] = 256] = "MethodWithSuperPropertyAssignmentInAsync";
        NodeCheckFlags2[NodeCheckFlags2["CaptureArguments"] = 512] = "CaptureArguments";
        NodeCheckFlags2[NodeCheckFlags2["EnumValuesComputed"] = 1024] = "EnumValuesComputed";
        NodeCheckFlags2[NodeCheckFlags2["LexicalModuleMergesWithClass"] = 2048] = "LexicalModuleMergesWithClass";
        NodeCheckFlags2[NodeCheckFlags2["LoopWithCapturedBlockScopedBinding"] = 4096] = "LoopWithCapturedBlockScopedBinding";
        NodeCheckFlags2[NodeCheckFlags2["ContainsCapturedBlockScopeBinding"] = 8192] = "ContainsCapturedBlockScopeBinding";
        NodeCheckFlags2[NodeCheckFlags2["CapturedBlockScopedBinding"] = 16384] = "CapturedBlockScopedBinding";
        NodeCheckFlags2[NodeCheckFlags2["BlockScopedBindingInLoop"] = 32768] = "BlockScopedBindingInLoop";
        NodeCheckFlags2[NodeCheckFlags2["NeedsLoopOutParameter"] = 65536] = "NeedsLoopOutParameter";
        NodeCheckFlags2[NodeCheckFlags2["AssignmentsMarked"] = 131072] = "AssignmentsMarked";
        NodeCheckFlags2[NodeCheckFlags2["ContainsConstructorReference"] = 262144] = "ContainsConstructorReference";
        NodeCheckFlags2[NodeCheckFlags2["ConstructorReference"] = 536870912] = "ConstructorReference";
        NodeCheckFlags2[NodeCheckFlags2["ContainsClassWithPrivateIdentifiers"] = 1048576] = "ContainsClassWithPrivateIdentifiers";
        NodeCheckFlags2[NodeCheckFlags2["ContainsSuperPropertyInStaticInitializer"] = 2097152] = "ContainsSuperPropertyInStaticInitializer";
        NodeCheckFlags2[NodeCheckFlags2["InCheckIdentifier"] = 4194304] = "InCheckIdentifier";
        return NodeCheckFlags2;
      })(NodeCheckFlags || {});
      TypeFlags = /* @__PURE__ */ ((TypeFlags2) => {
        TypeFlags2[TypeFlags2["Any"] = 1] = "Any";
        TypeFlags2[TypeFlags2["Unknown"] = 2] = "Unknown";
        TypeFlags2[TypeFlags2["String"] = 4] = "String";
        TypeFlags2[TypeFlags2["Number"] = 8] = "Number";
        TypeFlags2[TypeFlags2["Boolean"] = 16] = "Boolean";
        TypeFlags2[TypeFlags2["Enum"] = 32] = "Enum";
        TypeFlags2[TypeFlags2["BigInt"] = 64] = "BigInt";
        TypeFlags2[TypeFlags2["StringLiteral"] = 128] = "StringLiteral";
        TypeFlags2[TypeFlags2["NumberLiteral"] = 256] = "NumberLiteral";
        TypeFlags2[TypeFlags2["BooleanLiteral"] = 512] = "BooleanLiteral";
        TypeFlags2[TypeFlags2["EnumLiteral"] = 1024] = "EnumLiteral";
        TypeFlags2[TypeFlags2["BigIntLiteral"] = 2048] = "BigIntLiteral";
        TypeFlags2[TypeFlags2["ESSymbol"] = 4096] = "ESSymbol";
        TypeFlags2[TypeFlags2["UniqueESSymbol"] = 8192] = "UniqueESSymbol";
        TypeFlags2[TypeFlags2["Void"] = 16384] = "Void";
        TypeFlags2[TypeFlags2["Undefined"] = 32768] = "Undefined";
        TypeFlags2[TypeFlags2["Null"] = 65536] = "Null";
        TypeFlags2[TypeFlags2["Never"] = 131072] = "Never";
        TypeFlags2[TypeFlags2["TypeParameter"] = 262144] = "TypeParameter";
        TypeFlags2[TypeFlags2["Object"] = 524288] = "Object";
        TypeFlags2[TypeFlags2["Union"] = 1048576] = "Union";
        TypeFlags2[TypeFlags2["Intersection"] = 2097152] = "Intersection";
        TypeFlags2[TypeFlags2["Index"] = 4194304] = "Index";
        TypeFlags2[TypeFlags2["IndexedAccess"] = 8388608] = "IndexedAccess";
        TypeFlags2[TypeFlags2["Conditional"] = 16777216] = "Conditional";
        TypeFlags2[TypeFlags2["Substitution"] = 33554432] = "Substitution";
        TypeFlags2[TypeFlags2["NonPrimitive"] = 67108864] = "NonPrimitive";
        TypeFlags2[TypeFlags2["TemplateLiteral"] = 134217728] = "TemplateLiteral";
        TypeFlags2[TypeFlags2["StringMapping"] = 268435456] = "StringMapping";
        TypeFlags2[TypeFlags2["Reserved1"] = 536870912] = "Reserved1";
        TypeFlags2[TypeFlags2["AnyOrUnknown"] = 3] = "AnyOrUnknown";
        TypeFlags2[TypeFlags2["Nullable"] = 98304] = "Nullable";
        TypeFlags2[TypeFlags2["Literal"] = 2944] = "Literal";
        TypeFlags2[TypeFlags2["Unit"] = 109472] = "Unit";
        TypeFlags2[TypeFlags2["Freshable"] = 2976] = "Freshable";
        TypeFlags2[TypeFlags2["StringOrNumberLiteral"] = 384] = "StringOrNumberLiteral";
        TypeFlags2[TypeFlags2["StringOrNumberLiteralOrUnique"] = 8576] = "StringOrNumberLiteralOrUnique";
        TypeFlags2[TypeFlags2["DefinitelyFalsy"] = 117632] = "DefinitelyFalsy";
        TypeFlags2[TypeFlags2["PossiblyFalsy"] = 117724] = "PossiblyFalsy";
        TypeFlags2[TypeFlags2["Intrinsic"] = 67359327] = "Intrinsic";
        TypeFlags2[TypeFlags2["StringLike"] = 402653316] = "StringLike";
        TypeFlags2[TypeFlags2["NumberLike"] = 296] = "NumberLike";
        TypeFlags2[TypeFlags2["BigIntLike"] = 2112] = "BigIntLike";
        TypeFlags2[TypeFlags2["BooleanLike"] = 528] = "BooleanLike";
        TypeFlags2[TypeFlags2["EnumLike"] = 1056] = "EnumLike";
        TypeFlags2[TypeFlags2["ESSymbolLike"] = 12288] = "ESSymbolLike";
        TypeFlags2[TypeFlags2["VoidLike"] = 49152] = "VoidLike";
        TypeFlags2[TypeFlags2["Primitive"] = 402784252] = "Primitive";
        TypeFlags2[TypeFlags2["DefinitelyNonNullable"] = 470302716] = "DefinitelyNonNullable";
        TypeFlags2[TypeFlags2["DisjointDomains"] = 469892092] = "DisjointDomains";
        TypeFlags2[TypeFlags2["UnionOrIntersection"] = 3145728] = "UnionOrIntersection";
        TypeFlags2[TypeFlags2["StructuredType"] = 3670016] = "StructuredType";
        TypeFlags2[TypeFlags2["TypeVariable"] = 8650752] = "TypeVariable";
        TypeFlags2[TypeFlags2["InstantiableNonPrimitive"] = 58982400] = "InstantiableNonPrimitive";
        TypeFlags2[TypeFlags2["InstantiablePrimitive"] = 406847488] = "InstantiablePrimitive";
        TypeFlags2[TypeFlags2["Instantiable"] = 465829888] = "Instantiable";
        TypeFlags2[TypeFlags2["StructuredOrInstantiable"] = 469499904] = "StructuredOrInstantiable";
        TypeFlags2[TypeFlags2["ObjectFlagsType"] = 3899393] = "ObjectFlagsType";
        TypeFlags2[TypeFlags2["Simplifiable"] = 25165824] = "Simplifiable";
        TypeFlags2[TypeFlags2["Singleton"] = 67358815] = "Singleton";
        TypeFlags2[TypeFlags2["Narrowable"] = 536624127] = "Narrowable";
        TypeFlags2[TypeFlags2["IncludesMask"] = 473694207] = "IncludesMask";
        TypeFlags2[TypeFlags2["IncludesMissingType"] = 262144 /* TypeParameter */] = "IncludesMissingType";
        TypeFlags2[TypeFlags2["IncludesNonWideningType"] = 4194304 /* Index */] = "IncludesNonWideningType";
        TypeFlags2[TypeFlags2["IncludesWildcard"] = 8388608 /* IndexedAccess */] = "IncludesWildcard";
        TypeFlags2[TypeFlags2["IncludesEmptyObject"] = 16777216 /* Conditional */] = "IncludesEmptyObject";
        TypeFlags2[TypeFlags2["IncludesInstantiable"] = 33554432 /* Substitution */] = "IncludesInstantiable";
        TypeFlags2[TypeFlags2["IncludesConstrainedTypeVariable"] = 536870912 /* Reserved1 */] = "IncludesConstrainedTypeVariable";
        TypeFlags2[TypeFlags2["NotPrimitiveUnion"] = 36323331] = "NotPrimitiveUnion";
        return TypeFlags2;
      })(TypeFlags || {});
      ObjectFlags = /* @__PURE__ */ ((ObjectFlags3) => {
        ObjectFlags3[ObjectFlags3["None"] = 0] = "None";
        ObjectFlags3[ObjectFlags3["Class"] = 1] = "Class";
        ObjectFlags3[ObjectFlags3["Interface"] = 2] = "Interface";
        ObjectFlags3[ObjectFlags3["Reference"] = 4] = "Reference";
        ObjectFlags3[ObjectFlags3["Tuple"] = 8] = "Tuple";
        ObjectFlags3[ObjectFlags3["Anonymous"] = 16] = "Anonymous";
        ObjectFlags3[ObjectFlags3["Mapped"] = 32] = "Mapped";
        ObjectFlags3[ObjectFlags3["Instantiated"] = 64] = "Instantiated";
        ObjectFlags3[ObjectFlags3["ObjectLiteral"] = 128] = "ObjectLiteral";
        ObjectFlags3[ObjectFlags3["EvolvingArray"] = 256] = "EvolvingArray";
        ObjectFlags3[ObjectFlags3["ObjectLiteralPatternWithComputedProperties"] = 512] = "ObjectLiteralPatternWithComputedProperties";
        ObjectFlags3[ObjectFlags3["ReverseMapped"] = 1024] = "ReverseMapped";
        ObjectFlags3[ObjectFlags3["JsxAttributes"] = 2048] = "JsxAttributes";
        ObjectFlags3[ObjectFlags3["JSLiteral"] = 4096] = "JSLiteral";
        ObjectFlags3[ObjectFlags3["FreshLiteral"] = 8192] = "FreshLiteral";
        ObjectFlags3[ObjectFlags3["ArrayLiteral"] = 16384] = "ArrayLiteral";
        ObjectFlags3[ObjectFlags3["PrimitiveUnion"] = 32768] = "PrimitiveUnion";
        ObjectFlags3[ObjectFlags3["ContainsWideningType"] = 65536] = "ContainsWideningType";
        ObjectFlags3[ObjectFlags3["ContainsObjectOrArrayLiteral"] = 131072] = "ContainsObjectOrArrayLiteral";
        ObjectFlags3[ObjectFlags3["NonInferrableType"] = 262144] = "NonInferrableType";
        ObjectFlags3[ObjectFlags3["CouldContainTypeVariablesComputed"] = 524288] = "CouldContainTypeVariablesComputed";
        ObjectFlags3[ObjectFlags3["CouldContainTypeVariables"] = 1048576] = "CouldContainTypeVariables";
        ObjectFlags3[ObjectFlags3["ClassOrInterface"] = 3] = "ClassOrInterface";
        ObjectFlags3[ObjectFlags3["RequiresWidening"] = 196608] = "RequiresWidening";
        ObjectFlags3[ObjectFlags3["PropagatingFlags"] = 458752] = "PropagatingFlags";
        ObjectFlags3[ObjectFlags3["InstantiatedMapped"] = 96] = "InstantiatedMapped";
        ObjectFlags3[ObjectFlags3["ObjectTypeKindMask"] = 1343] = "ObjectTypeKindMask";
        ObjectFlags3[ObjectFlags3["ContainsSpread"] = 2097152] = "ContainsSpread";
        ObjectFlags3[ObjectFlags3["ObjectRestType"] = 4194304] = "ObjectRestType";
        ObjectFlags3[ObjectFlags3["InstantiationExpressionType"] = 8388608] = "InstantiationExpressionType";
        ObjectFlags3[ObjectFlags3["IsClassInstanceClone"] = 16777216] = "IsClassInstanceClone";
        ObjectFlags3[ObjectFlags3["IdenticalBaseTypeCalculated"] = 33554432] = "IdenticalBaseTypeCalculated";
        ObjectFlags3[ObjectFlags3["IdenticalBaseTypeExists"] = 67108864] = "IdenticalBaseTypeExists";
        ObjectFlags3[ObjectFlags3["IsGenericTypeComputed"] = 2097152] = "IsGenericTypeComputed";
        ObjectFlags3[ObjectFlags3["IsGenericObjectType"] = 4194304] = "IsGenericObjectType";
        ObjectFlags3[ObjectFlags3["IsGenericIndexType"] = 8388608] = "IsGenericIndexType";
        ObjectFlags3[ObjectFlags3["IsGenericType"] = 12582912] = "IsGenericType";
        ObjectFlags3[ObjectFlags3["ContainsIntersections"] = 16777216] = "ContainsIntersections";
        ObjectFlags3[ObjectFlags3["IsUnknownLikeUnionComputed"] = 33554432] = "IsUnknownLikeUnionComputed";
        ObjectFlags3[ObjectFlags3["IsUnknownLikeUnion"] = 67108864] = "IsUnknownLikeUnion";
        ObjectFlags3[ObjectFlags3["IsNeverIntersectionComputed"] = 16777216] = "IsNeverIntersectionComputed";
        ObjectFlags3[ObjectFlags3["IsNeverIntersection"] = 33554432] = "IsNeverIntersection";
        ObjectFlags3[ObjectFlags3["IsConstrainedTypeVariable"] = 67108864] = "IsConstrainedTypeVariable";
        return ObjectFlags3;
      })(ObjectFlags || {});
      VarianceFlags = /* @__PURE__ */ ((VarianceFlags2) => {
        VarianceFlags2[VarianceFlags2["Invariant"] = 0] = "Invariant";
        VarianceFlags2[VarianceFlags2["Covariant"] = 1] = "Covariant";
        VarianceFlags2[VarianceFlags2["Contravariant"] = 2] = "Contravariant";
        VarianceFlags2[VarianceFlags2["Bivariant"] = 3] = "Bivariant";
        VarianceFlags2[VarianceFlags2["Independent"] = 4] = "Independent";
        VarianceFlags2[VarianceFlags2["VarianceMask"] = 7] = "VarianceMask";
        VarianceFlags2[VarianceFlags2["Unmeasurable"] = 8] = "Unmeasurable";
        VarianceFlags2[VarianceFlags2["Unreliable"] = 16] = "Unreliable";
        VarianceFlags2[VarianceFlags2["AllowsStructuralFallback"] = 24] = "AllowsStructuralFallback";
        return VarianceFlags2;
      })(VarianceFlags || {});
      ElementFlags = /* @__PURE__ */ ((ElementFlags2) => {
        ElementFlags2[ElementFlags2["Required"] = 1] = "Required";
        ElementFlags2[ElementFlags2["Optional"] = 2] = "Optional";
        ElementFlags2[ElementFlags2["Rest"] = 4] = "Rest";
        ElementFlags2[ElementFlags2["Variadic"] = 8] = "Variadic";
        ElementFlags2[ElementFlags2["Fixed"] = 3] = "Fixed";
        ElementFlags2[ElementFlags2["Variable"] = 12] = "Variable";
        ElementFlags2[ElementFlags2["NonRequired"] = 14] = "NonRequired";
        ElementFlags2[ElementFlags2["NonRest"] = 11] = "NonRest";
        return ElementFlags2;
      })(ElementFlags || {});
      AccessFlags = /* @__PURE__ */ ((AccessFlags2) => {
        AccessFlags2[AccessFlags2["None"] = 0] = "None";
        AccessFlags2[AccessFlags2["IncludeUndefined"] = 1] = "IncludeUndefined";
        AccessFlags2[AccessFlags2["NoIndexSignatures"] = 2] = "NoIndexSignatures";
        AccessFlags2[AccessFlags2["Writing"] = 4] = "Writing";
        AccessFlags2[AccessFlags2["CacheSymbol"] = 8] = "CacheSymbol";
        AccessFlags2[AccessFlags2["NoTupleBoundsCheck"] = 16] = "NoTupleBoundsCheck";
        AccessFlags2[AccessFlags2["ExpressionPosition"] = 32] = "ExpressionPosition";
        AccessFlags2[AccessFlags2["ReportDeprecated"] = 64] = "ReportDeprecated";
        AccessFlags2[AccessFlags2["SuppressNoImplicitAnyError"] = 128] = "SuppressNoImplicitAnyError";
        AccessFlags2[AccessFlags2["Contextual"] = 256] = "Contextual";
        AccessFlags2[AccessFlags2["Persistent"] = 1 /* IncludeUndefined */] = "Persistent";
        return AccessFlags2;
      })(AccessFlags || {});
      IndexFlags = /* @__PURE__ */ ((IndexFlags2) => {
        IndexFlags2[IndexFlags2["None"] = 0] = "None";
        IndexFlags2[IndexFlags2["StringsOnly"] = 1] = "StringsOnly";
        IndexFlags2[IndexFlags2["NoIndexSignatures"] = 2] = "NoIndexSignatures";
        IndexFlags2[IndexFlags2["NoReducibleCheck"] = 4] = "NoReducibleCheck";
        return IndexFlags2;
      })(IndexFlags || {});
      JsxReferenceKind = /* @__PURE__ */ ((JsxReferenceKind2) => {
        JsxReferenceKind2[JsxReferenceKind2["Component"] = 0] = "Component";
        JsxReferenceKind2[JsxReferenceKind2["Function"] = 1] = "Function";
        JsxReferenceKind2[JsxReferenceKind2["Mixed"] = 2] = "Mixed";
        return JsxReferenceKind2;
      })(JsxReferenceKind || {});
      SignatureKind = /* @__PURE__ */ ((SignatureKind2) => {
        SignatureKind2[SignatureKind2["Call"] = 0] = "Call";
        SignatureKind2[SignatureKind2["Construct"] = 1] = "Construct";
        return SignatureKind2;
      })(SignatureKind || {});
      SignatureFlags = /* @__PURE__ */ ((SignatureFlags5) => {
        SignatureFlags5[SignatureFlags5["None"] = 0] = "None";
        SignatureFlags5[SignatureFlags5["HasRestParameter"] = 1] = "HasRestParameter";
        SignatureFlags5[SignatureFlags5["HasLiteralTypes"] = 2] = "HasLiteralTypes";
        SignatureFlags5[SignatureFlags5["Abstract"] = 4] = "Abstract";
        SignatureFlags5[SignatureFlags5["IsInnerCallChain"] = 8] = "IsInnerCallChain";
        SignatureFlags5[SignatureFlags5["IsOuterCallChain"] = 16] = "IsOuterCallChain";
        SignatureFlags5[SignatureFlags5["IsUntypedSignatureInJSFile"] = 32] = "IsUntypedSignatureInJSFile";
        SignatureFlags5[SignatureFlags5["IsNonInferrable"] = 64] = "IsNonInferrable";
        SignatureFlags5[SignatureFlags5["IsSignatureCandidateForOverloadFailure"] = 128] = "IsSignatureCandidateForOverloadFailure";
        SignatureFlags5[SignatureFlags5["PropagatingFlags"] = 167] = "PropagatingFlags";
        SignatureFlags5[SignatureFlags5["CallChainFlags"] = 24] = "CallChainFlags";
        return SignatureFlags5;
      })(SignatureFlags || {});
      IndexKind = /* @__PURE__ */ ((IndexKind2) => {
        IndexKind2[IndexKind2["String"] = 0] = "String";
        IndexKind2[IndexKind2["Number"] = 1] = "Number";
        return IndexKind2;
      })(IndexKind || {});
      TypeMapKind = /* @__PURE__ */ ((TypeMapKind2) => {
        TypeMapKind2[TypeMapKind2["Simple"] = 0] = "Simple";
        TypeMapKind2[TypeMapKind2["Array"] = 1] = "Array";
        TypeMapKind2[TypeMapKind2["Deferred"] = 2] = "Deferred";
        TypeMapKind2[TypeMapKind2["Function"] = 3] = "Function";
        TypeMapKind2[TypeMapKind2["Composite"] = 4] = "Composite";
        TypeMapKind2[TypeMapKind2["Merged"] = 5] = "Merged";
        return TypeMapKind2;
      })(TypeMapKind || {});
      InferencePriority = /* @__PURE__ */ ((InferencePriority2) => {
        InferencePriority2[InferencePriority2["None"] = 0] = "None";
        InferencePriority2[InferencePriority2["NakedTypeVariable"] = 1] = "NakedTypeVariable";
        InferencePriority2[InferencePriority2["SpeculativeTuple"] = 2] = "SpeculativeTuple";
        InferencePriority2[InferencePriority2["SubstituteSource"] = 4] = "SubstituteSource";
        InferencePriority2[InferencePriority2["HomomorphicMappedType"] = 8] = "HomomorphicMappedType";
        InferencePriority2[InferencePriority2["PartialHomomorphicMappedType"] = 16] = "PartialHomomorphicMappedType";
        InferencePriority2[InferencePriority2["MappedTypeConstraint"] = 32] = "MappedTypeConstraint";
        InferencePriority2[InferencePriority2["ContravariantConditional"] = 64] = "ContravariantConditional";
        InferencePriority2[InferencePriority2["ReturnType"] = 128] = "ReturnType";
        InferencePriority2[InferencePriority2["LiteralKeyof"] = 256] = "LiteralKeyof";
        InferencePriority2[InferencePriority2["NoConstraints"] = 512] = "NoConstraints";
        InferencePriority2[InferencePriority2["AlwaysStrict"] = 1024] = "AlwaysStrict";
        InferencePriority2[InferencePriority2["MaxValue"] = 2048] = "MaxValue";
        InferencePriority2[InferencePriority2["PriorityImpliesCombination"] = 416] = "PriorityImpliesCombination";
        InferencePriority2[InferencePriority2["Circularity"] = -1] = "Circularity";
        return InferencePriority2;
      })(InferencePriority || {});
      InferenceFlags = /* @__PURE__ */ ((InferenceFlags2) => {
        InferenceFlags2[InferenceFlags2["None"] = 0] = "None";
        InferenceFlags2[InferenceFlags2["NoDefault"] = 1] = "NoDefault";
        InferenceFlags2[InferenceFlags2["AnyDefault"] = 2] = "AnyDefault";
        InferenceFlags2[InferenceFlags2["SkippedGenericFunction"] = 4] = "SkippedGenericFunction";
        return InferenceFlags2;
      })(InferenceFlags || {});
      Ternary = /* @__PURE__ */ ((Ternary2) => {
        Ternary2[Ternary2["False"] = 0] = "False";
        Ternary2[Ternary2["Unknown"] = 1] = "Unknown";
        Ternary2[Ternary2["Maybe"] = 3] = "Maybe";
        Ternary2[Ternary2["True"] = -1] = "True";
        return Ternary2;
      })(Ternary || {});
      AssignmentDeclarationKind = /* @__PURE__ */ ((AssignmentDeclarationKind2) => {
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["None"] = 0] = "None";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ExportsProperty"] = 1] = "ExportsProperty";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ModuleExports"] = 2] = "ModuleExports";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["PrototypeProperty"] = 3] = "PrototypeProperty";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ThisProperty"] = 4] = "ThisProperty";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["Property"] = 5] = "Property";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["Prototype"] = 6] = "Prototype";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ObjectDefinePropertyValue"] = 7] = "ObjectDefinePropertyValue";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ObjectDefinePropertyExports"] = 8] = "ObjectDefinePropertyExports";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ObjectDefinePrototypeProperty"] = 9] = "ObjectDefinePrototypeProperty";
        return AssignmentDeclarationKind2;
      })(AssignmentDeclarationKind || {});
      DiagnosticCategory = /* @__PURE__ */ ((DiagnosticCategory2) => {
        DiagnosticCategory2[DiagnosticCategory2["Warning"] = 0] = "Warning";
        DiagnosticCategory2[DiagnosticCategory2["Error"] = 1] = "Error";
        DiagnosticCategory2[DiagnosticCategory2["Suggestion"] = 2] = "Suggestion";
        DiagnosticCategory2[DiagnosticCategory2["Message"] = 3] = "Message";
        return DiagnosticCategory2;
      })(DiagnosticCategory || {});
      ModuleResolutionKind = /* @__PURE__ */ ((ModuleResolutionKind3) => {
        ModuleResolutionKind3[ModuleResolutionKind3["Classic"] = 1] = "Classic";
        ModuleResolutionKind3[ModuleResolutionKind3["NodeJs"] = 2] = "NodeJs";
        ModuleResolutionKind3[ModuleResolutionKind3["Node10"] = 2] = "Node10";
        ModuleResolutionKind3[ModuleResolutionKind3["Node16"] = 3] = "Node16";
        ModuleResolutionKind3[ModuleResolutionKind3["NodeNext"] = 99] = "NodeNext";
        ModuleResolutionKind3[ModuleResolutionKind3["Bundler"] = 100] = "Bundler";
        return ModuleResolutionKind3;
      })(ModuleResolutionKind || {});
      ModuleDetectionKind = /* @__PURE__ */ ((ModuleDetectionKind2) => {
        ModuleDetectionKind2[ModuleDetectionKind2["Legacy"] = 1] = "Legacy";
        ModuleDetectionKind2[ModuleDetectionKind2["Auto"] = 2] = "Auto";
        ModuleDetectionKind2[ModuleDetectionKind2["Force"] = 3] = "Force";
        return ModuleDetectionKind2;
      })(ModuleDetectionKind || {});
      WatchFileKind = /* @__PURE__ */ ((WatchFileKind3) => {
        WatchFileKind3[WatchFileKind3["FixedPollingInterval"] = 0] = "FixedPollingInterval";
        WatchFileKind3[WatchFileKind3["PriorityPollingInterval"] = 1] = "PriorityPollingInterval";
        WatchFileKind3[WatchFileKind3["DynamicPriorityPolling"] = 2] = "DynamicPriorityPolling";
        WatchFileKind3[WatchFileKind3["FixedChunkSizePolling"] = 3] = "FixedChunkSizePolling";
        WatchFileKind3[WatchFileKind3["UseFsEvents"] = 4] = "UseFsEvents";
        WatchFileKind3[WatchFileKind3["UseFsEventsOnParentDirectory"] = 5] = "UseFsEventsOnParentDirectory";
        return WatchFileKind3;
      })(WatchFileKind || {});
      WatchDirectoryKind = /* @__PURE__ */ ((WatchDirectoryKind3) => {
        WatchDirectoryKind3[WatchDirectoryKind3["UseFsEvents"] = 0] = "UseFsEvents";
        WatchDirectoryKind3[WatchDirectoryKind3["FixedPollingInterval"] = 1] = "FixedPollingInterval";
        WatchDirectoryKind3[WatchDirectoryKind3["DynamicPriorityPolling"] = 2] = "DynamicPriorityPolling";
        WatchDirectoryKind3[WatchDirectoryKind3["FixedChunkSizePolling"] = 3] = "FixedChunkSizePolling";
        return WatchDirectoryKind3;
      })(WatchDirectoryKind || {});
      PollingWatchKind = /* @__PURE__ */ ((PollingWatchKind3) => {
        PollingWatchKind3[PollingWatchKind3["FixedInterval"] = 0] = "FixedInterval";
        PollingWatchKind3[PollingWatchKind3["PriorityInterval"] = 1] = "PriorityInterval";
        PollingWatchKind3[PollingWatchKind3["DynamicPriority"] = 2] = "DynamicPriority";
        PollingWatchKind3[PollingWatchKind3["FixedChunkSize"] = 3] = "FixedChunkSize";
        return PollingWatchKind3;
      })(PollingWatchKind || {});
      ModuleKind = /* @__PURE__ */ ((ModuleKind3) => {
        ModuleKind3[ModuleKind3["None"] = 0] = "None";
        ModuleKind3[ModuleKind3["CommonJS"] = 1] = "CommonJS";
        ModuleKind3[ModuleKind3["AMD"] = 2] = "AMD";
        ModuleKind3[ModuleKind3["UMD"] = 3] = "UMD";
        ModuleKind3[ModuleKind3["System"] = 4] = "System";
        ModuleKind3[ModuleKind3["ES2015"] = 5] = "ES2015";
        ModuleKind3[ModuleKind3["ES2020"] = 6] = "ES2020";
        ModuleKind3[ModuleKind3["ES2022"] = 7] = "ES2022";
        ModuleKind3[ModuleKind3["ESNext"] = 99] = "ESNext";
        ModuleKind3[ModuleKind3["Node16"] = 100] = "Node16";
        ModuleKind3[ModuleKind3["NodeNext"] = 199] = "NodeNext";
        ModuleKind3[ModuleKind3["Preserve"] = 200] = "Preserve";
        return ModuleKind3;
      })(ModuleKind || {});
      JsxEmit = /* @__PURE__ */ ((JsxEmit3) => {
        JsxEmit3[JsxEmit3["None"] = 0] = "None";
        JsxEmit3[JsxEmit3["Preserve"] = 1] = "Preserve";
        JsxEmit3[JsxEmit3["React"] = 2] = "React";
        JsxEmit3[JsxEmit3["ReactNative"] = 3] = "ReactNative";
        JsxEmit3[JsxEmit3["ReactJSX"] = 4] = "ReactJSX";
        JsxEmit3[JsxEmit3["ReactJSXDev"] = 5] = "ReactJSXDev";
        return JsxEmit3;
      })(JsxEmit || {});
      ImportsNotUsedAsValues = /* @__PURE__ */ ((ImportsNotUsedAsValues2) => {
        ImportsNotUsedAsValues2[ImportsNotUsedAsValues2["Remove"] = 0] = "Remove";
        ImportsNotUsedAsValues2[ImportsNotUsedAsValues2["Preserve"] = 1] = "Preserve";
        ImportsNotUsedAsValues2[ImportsNotUsedAsValues2["Error"] = 2] = "Error";
        return ImportsNotUsedAsValues2;
      })(ImportsNotUsedAsValues || {});
      NewLineKind = /* @__PURE__ */ ((NewLineKind3) => {
        NewLineKind3[NewLineKind3["CarriageReturnLineFeed"] = 0] = "CarriageReturnLineFeed";
        NewLineKind3[NewLineKind3["LineFeed"] = 1] = "LineFeed";
        return NewLineKind3;
      })(NewLineKind || {});
      ScriptKind = /* @__PURE__ */ ((ScriptKind7) => {
        ScriptKind7[ScriptKind7["Unknown"] = 0] = "Unknown";
        ScriptKind7[ScriptKind7["JS"] = 1] = "JS";
        ScriptKind7[ScriptKind7["JSX"] = 2] = "JSX";
        ScriptKind7[ScriptKind7["TS"] = 3] = "TS";
        ScriptKind7[ScriptKind7["TSX"] = 4] = "TSX";
        ScriptKind7[ScriptKind7["External"] = 5] = "External";
        ScriptKind7[ScriptKind7["JSON"] = 6] = "JSON";
        ScriptKind7[ScriptKind7["Deferred"] = 7] = "Deferred";
        return ScriptKind7;
      })(ScriptKind || {});
      ScriptTarget = /* @__PURE__ */ ((ScriptTarget11) => {
        ScriptTarget11[ScriptTarget11["ES3"] = 0] = "ES3";
        ScriptTarget11[ScriptTarget11["ES5"] = 1] = "ES5";
        ScriptTarget11[ScriptTarget11["ES2015"] = 2] = "ES2015";
        ScriptTarget11[ScriptTarget11["ES2016"] = 3] = "ES2016";
        ScriptTarget11[ScriptTarget11["ES2017"] = 4] = "ES2017";
        ScriptTarget11[ScriptTarget11["ES2018"] = 5] = "ES2018";
        ScriptTarget11[ScriptTarget11["ES2019"] = 6] = "ES2019";
        ScriptTarget11[ScriptTarget11["ES2020"] = 7] = "ES2020";
        ScriptTarget11[ScriptTarget11["ES2021"] = 8] = "ES2021";
        ScriptTarget11[ScriptTarget11["ES2022"] = 9] = "ES2022";
        ScriptTarget11[ScriptTarget11["ESNext"] = 99] = "ESNext";
        ScriptTarget11[ScriptTarget11["JSON"] = 100] = "JSON";
        ScriptTarget11[ScriptTarget11["Latest"] = 99 /* ESNext */] = "Latest";
        return ScriptTarget11;
      })(ScriptTarget || {});
      LanguageVariant = /* @__PURE__ */ ((LanguageVariant4) => {
        LanguageVariant4[LanguageVariant4["Standard"] = 0] = "Standard";
        LanguageVariant4[LanguageVariant4["JSX"] = 1] = "JSX";
        return LanguageVariant4;
      })(LanguageVariant || {});
      WatchDirectoryFlags = /* @__PURE__ */ ((WatchDirectoryFlags3) => {
        WatchDirectoryFlags3[WatchDirectoryFlags3["None"] = 0] = "None";
        WatchDirectoryFlags3[WatchDirectoryFlags3["Recursive"] = 1] = "Recursive";
        return WatchDirectoryFlags3;
      })(WatchDirectoryFlags || {});
      CharacterCodes = /* @__PURE__ */ ((CharacterCodes2) => {
        CharacterCodes2[CharacterCodes2["nullCharacter"] = 0] = "nullCharacter";
        CharacterCodes2[CharacterCodes2["maxAsciiCharacter"] = 127] = "maxAsciiCharacter";
        CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
        CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
        CharacterCodes2[CharacterCodes2["lineSeparator"] = 8232] = "lineSeparator";
        CharacterCodes2[CharacterCodes2["paragraphSeparator"] = 8233] = "paragraphSeparator";
        CharacterCodes2[CharacterCodes2["nextLine"] = 133] = "nextLine";
        CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
        CharacterCodes2[CharacterCodes2["nonBreakingSpace"] = 160] = "nonBreakingSpace";
        CharacterCodes2[CharacterCodes2["enQuad"] = 8192] = "enQuad";
        CharacterCodes2[CharacterCodes2["emQuad"] = 8193] = "emQuad";
        CharacterCodes2[CharacterCodes2["enSpace"] = 8194] = "enSpace";
        CharacterCodes2[CharacterCodes2["emSpace"] = 8195] = "emSpace";
        CharacterCodes2[CharacterCodes2["threePerEmSpace"] = 8196] = "threePerEmSpace";
        CharacterCodes2[CharacterCodes2["fourPerEmSpace"] = 8197] = "fourPerEmSpace";
        CharacterCodes2[CharacterCodes2["sixPerEmSpace"] = 8198] = "sixPerEmSpace";
        CharacterCodes2[CharacterCodes2["figureSpace"] = 8199] = "figureSpace";
        CharacterCodes2[CharacterCodes2["punctuationSpace"] = 8200] = "punctuationSpace";
        CharacterCodes2[CharacterCodes2["thinSpace"] = 8201] = "thinSpace";
        CharacterCodes2[CharacterCodes2["hairSpace"] = 8202] = "hairSpace";
        CharacterCodes2[CharacterCodes2["zeroWidthSpace"] = 8203] = "zeroWidthSpace";
        CharacterCodes2[CharacterCodes2["narrowNoBreakSpace"] = 8239] = "narrowNoBreakSpace";
        CharacterCodes2[CharacterCodes2["ideographicSpace"] = 12288] = "ideographicSpace";
        CharacterCodes2[CharacterCodes2["mathematicalSpace"] = 8287] = "mathematicalSpace";
        CharacterCodes2[CharacterCodes2["ogham"] = 5760] = "ogham";
        CharacterCodes2[CharacterCodes2["_"] = 95] = "_";
        CharacterCodes2[CharacterCodes2["$"] = 36] = "$";
        CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
        CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
        CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
        CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
        CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
        CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
        CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
        CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
        CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
        CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
        CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
        CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
        CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
        CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
        CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
        CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
        CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
        CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
        CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
        CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
        CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
        CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
        CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
        CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
        CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
        CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
        CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
        CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
        CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
        CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
        CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
        CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
        CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
        CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
        CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
        CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
        CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
        CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
        CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
        CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
        CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
        CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
        CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
        CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
        CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
        CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
        CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
        CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
        CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
        CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
        CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
        CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
        CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
        CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
        CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
        CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
        CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
        CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
        CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
        CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
        CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
        CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
        CharacterCodes2[CharacterCodes2["ampersand"] = 38] = "ampersand";
        CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
        CharacterCodes2[CharacterCodes2["at"] = 64] = "at";
        CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
        CharacterCodes2[CharacterCodes2["backtick"] = 96] = "backtick";
        CharacterCodes2[CharacterCodes2["bar"] = 124] = "bar";
        CharacterCodes2[CharacterCodes2["caret"] = 94] = "caret";
        CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
        CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
        CharacterCodes2[CharacterCodes2["closeParen"] = 41] = "closeParen";
        CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
        CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
        CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
        CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
        CharacterCodes2[CharacterCodes2["equals"] = 61] = "equals";
        CharacterCodes2[CharacterCodes2["exclamation"] = 33] = "exclamation";
        CharacterCodes2[CharacterCodes2["greaterThan"] = 62] = "greaterThan";
        CharacterCodes2[CharacterCodes2["hash"] = 35] = "hash";
        CharacterCodes2[CharacterCodes2["lessThan"] = 60] = "lessThan";
        CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
        CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
        CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
        CharacterCodes2[CharacterCodes2["openParen"] = 40] = "openParen";
        CharacterCodes2[CharacterCodes2["percent"] = 37] = "percent";
        CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
        CharacterCodes2[CharacterCodes2["question"] = 63] = "question";
        CharacterCodes2[CharacterCodes2["semicolon"] = 59] = "semicolon";
        CharacterCodes2[CharacterCodes2["singleQuote"] = 39] = "singleQuote";
        CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
        CharacterCodes2[CharacterCodes2["tilde"] = 126] = "tilde";
        CharacterCodes2[CharacterCodes2["backspace"] = 8] = "backspace";
        CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
        CharacterCodes2[CharacterCodes2["byteOrderMark"] = 65279] = "byteOrderMark";
        CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
        CharacterCodes2[CharacterCodes2["verticalTab"] = 11] = "verticalTab";
        return CharacterCodes2;
      })(CharacterCodes || {});
      Extension = /* @__PURE__ */ ((Extension2) => {
        Extension2["Ts"] = ".ts";
        Extension2["Tsx"] = ".tsx";
        Extension2["Dts"] = ".d.ts";
        Extension2["Js"] = ".js";
        Extension2["Jsx"] = ".jsx";
        Extension2["Json"] = ".json";
        Extension2["TsBuildInfo"] = ".tsbuildinfo";
        Extension2["Mjs"] = ".mjs";
        Extension2["Mts"] = ".mts";
        Extension2["Dmts"] = ".d.mts";
        Extension2["Cjs"] = ".cjs";
        Extension2["Cts"] = ".cts";
        Extension2["Dcts"] = ".d.cts";
        return Extension2;
      })(Extension || {});
      TransformFlags = /* @__PURE__ */ ((TransformFlags3) => {
        TransformFlags3[TransformFlags3["None"] = 0] = "None";
        TransformFlags3[TransformFlags3["ContainsTypeScript"] = 1] = "ContainsTypeScript";
        TransformFlags3[TransformFlags3["ContainsJsx"] = 2] = "ContainsJsx";
        TransformFlags3[TransformFlags3["ContainsESNext"] = 4] = "ContainsESNext";
        TransformFlags3[TransformFlags3["ContainsES2022"] = 8] = "ContainsES2022";
        TransformFlags3[TransformFlags3["ContainsES2021"] = 16] = "ContainsES2021";
        TransformFlags3[TransformFlags3["ContainsES2020"] = 32] = "ContainsES2020";
        TransformFlags3[TransformFlags3["ContainsES2019"] = 64] = "ContainsES2019";
        TransformFlags3[TransformFlags3["ContainsES2018"] = 128] = "ContainsES2018";
        TransformFlags3[TransformFlags3["ContainsES2017"] = 256] = "ContainsES2017";
        TransformFlags3[TransformFlags3["ContainsES2016"] = 512] = "ContainsES2016";
        TransformFlags3[TransformFlags3["ContainsES2015"] = 1024] = "ContainsES2015";
        TransformFlags3[TransformFlags3["ContainsGenerator"] = 2048] = "ContainsGenerator";
        TransformFlags3[TransformFlags3["ContainsDestructuringAssignment"] = 4096] = "ContainsDestructuringAssignment";
        TransformFlags3[TransformFlags3["ContainsTypeScriptClassSyntax"] = 8192] = "ContainsTypeScriptClassSyntax";
        TransformFlags3[TransformFlags3["ContainsLexicalThis"] = 16384] = "ContainsLexicalThis";
        TransformFlags3[TransformFlags3["ContainsRestOrSpread"] = 32768] = "ContainsRestOrSpread";
        TransformFlags3[TransformFlags3["ContainsObjectRestOrSpread"] = 65536] = "ContainsObjectRestOrSpread";
        TransformFlags3[TransformFlags3["ContainsComputedPropertyName"] = 131072] = "ContainsComputedPropertyName";
        TransformFlags3[TransformFlags3["ContainsBlockScopedBinding"] = 262144] = "ContainsBlockScopedBinding";
        TransformFlags3[TransformFlags3["ContainsBindingPattern"] = 524288] = "ContainsBindingPattern";
        TransformFlags3[TransformFlags3["ContainsYield"] = 1048576] = "ContainsYield";
        TransformFlags3[TransformFlags3["ContainsAwait"] = 2097152] = "ContainsAwait";
        TransformFlags3[TransformFlags3["ContainsHoistedDeclarationOrCompletion"] = 4194304] = "ContainsHoistedDeclarationOrCompletion";
        TransformFlags3[TransformFlags3["ContainsDynamicImport"] = 8388608] = "ContainsDynamicImport";
        TransformFlags3[TransformFlags3["ContainsClassFields"] = 16777216] = "ContainsClassFields";
        TransformFlags3[TransformFlags3["ContainsDecorators"] = 33554432] = "ContainsDecorators";
        TransformFlags3[TransformFlags3["ContainsPossibleTopLevelAwait"] = 67108864] = "ContainsPossibleTopLevelAwait";
        TransformFlags3[TransformFlags3["ContainsLexicalSuper"] = 134217728] = "ContainsLexicalSuper";
        TransformFlags3[TransformFlags3["ContainsUpdateExpressionForIdentifier"] = 268435456] = "ContainsUpdateExpressionForIdentifier";
        TransformFlags3[TransformFlags3["ContainsPrivateIdentifierInExpression"] = 536870912] = "ContainsPrivateIdentifierInExpression";
        TransformFlags3[TransformFlags3["HasComputedFlags"] = -2147483648] = "HasComputedFlags";
        TransformFlags3[TransformFlags3["AssertTypeScript"] = 1 /* ContainsTypeScript */] = "AssertTypeScript";
        TransformFlags3[TransformFlags3["AssertJsx"] = 2 /* ContainsJsx */] = "AssertJsx";
        TransformFlags3[TransformFlags3["AssertESNext"] = 4 /* ContainsESNext */] = "AssertESNext";
        TransformFlags3[TransformFlags3["AssertES2022"] = 8 /* ContainsES2022 */] = "AssertES2022";
        TransformFlags3[TransformFlags3["AssertES2021"] = 16 /* ContainsES2021 */] = "AssertES2021";
        TransformFlags3[TransformFlags3["AssertES2020"] = 32 /* ContainsES2020 */] = "AssertES2020";
        TransformFlags3[TransformFlags3["AssertES2019"] = 64 /* ContainsES2019 */] = "AssertES2019";
        TransformFlags3[TransformFlags3["AssertES2018"] = 128 /* ContainsES2018 */] = "AssertES2018";
        TransformFlags3[TransformFlags3["AssertES2017"] = 256 /* ContainsES2017 */] = "AssertES2017";
        TransformFlags3[TransformFlags3["AssertES2016"] = 512 /* ContainsES2016 */] = "AssertES2016";
        TransformFlags3[TransformFlags3["AssertES2015"] = 1024 /* ContainsES2015 */] = "AssertES2015";
        TransformFlags3[TransformFlags3["AssertGenerator"] = 2048 /* ContainsGenerator */] = "AssertGenerator";
        TransformFlags3[TransformFlags3["AssertDestructuringAssignment"] = 4096 /* ContainsDestructuringAssignment */] = "AssertDestructuringAssignment";
        TransformFlags3[TransformFlags3["OuterExpressionExcludes"] = -2147483648 /* HasComputedFlags */] = "OuterExpressionExcludes";
        TransformFlags3[TransformFlags3["PropertyAccessExcludes"] = -2147483648 /* OuterExpressionExcludes */] = "PropertyAccessExcludes";
        TransformFlags3[TransformFlags3["NodeExcludes"] = -2147483648 /* PropertyAccessExcludes */] = "NodeExcludes";
        TransformFlags3[TransformFlags3["ArrowFunctionExcludes"] = -2072174592] = "ArrowFunctionExcludes";
        TransformFlags3[TransformFlags3["FunctionExcludes"] = -1937940480] = "FunctionExcludes";
        TransformFlags3[TransformFlags3["ConstructorExcludes"] = -1937948672] = "ConstructorExcludes";
        TransformFlags3[TransformFlags3["MethodOrAccessorExcludes"] = -2005057536] = "MethodOrAccessorExcludes";
        TransformFlags3[TransformFlags3["PropertyExcludes"] = -2013249536] = "PropertyExcludes";
        TransformFlags3[TransformFlags3["ClassExcludes"] = -2147344384] = "ClassExcludes";
        TransformFlags3[TransformFlags3["ModuleExcludes"] = -1941676032] = "ModuleExcludes";
        TransformFlags3[TransformFlags3["TypeExcludes"] = -2] = "TypeExcludes";
        TransformFlags3[TransformFlags3["ObjectLiteralExcludes"] = -2147278848] = "ObjectLiteralExcludes";
        TransformFlags3[TransformFlags3["ArrayLiteralOrCallOrNewExcludes"] = -2147450880] = "ArrayLiteralOrCallOrNewExcludes";
        TransformFlags3[TransformFlags3["VariableDeclarationListExcludes"] = -2146893824] = "VariableDeclarationListExcludes";
        TransformFlags3[TransformFlags3["ParameterExcludes"] = -2147483648 /* NodeExcludes */] = "ParameterExcludes";
        TransformFlags3[TransformFlags3["CatchClauseExcludes"] = -2147418112] = "CatchClauseExcludes";
        TransformFlags3[TransformFlags3["BindingPatternExcludes"] = -2147450880] = "BindingPatternExcludes";
        TransformFlags3[TransformFlags3["ContainsLexicalThisOrSuper"] = 134234112] = "ContainsLexicalThisOrSuper";
        TransformFlags3[TransformFlags3["PropertyNamePropagatingFlags"] = 134234112] = "PropertyNamePropagatingFlags";
        return TransformFlags3;
      })(TransformFlags || {});
      SnippetKind = /* @__PURE__ */ ((SnippetKind3) => {
        SnippetKind3[SnippetKind3["TabStop"] = 0] = "TabStop";
        SnippetKind3[SnippetKind3["Placeholder"] = 1] = "Placeholder";
        SnippetKind3[SnippetKind3["Choice"] = 2] = "Choice";
        SnippetKind3[SnippetKind3["Variable"] = 3] = "Variable";
        return SnippetKind3;
      })(SnippetKind || {});
      EmitFlags = /* @__PURE__ */ ((EmitFlags3) => {
        EmitFlags3[EmitFlags3["None"] = 0] = "None";
        EmitFlags3[EmitFlags3["SingleLine"] = 1] = "SingleLine";
        EmitFlags3[EmitFlags3["MultiLine"] = 2] = "MultiLine";
        EmitFlags3[EmitFlags3["AdviseOnEmitNode"] = 4] = "AdviseOnEmitNode";
        EmitFlags3[EmitFlags3["NoSubstitution"] = 8] = "NoSubstitution";
        EmitFlags3[EmitFlags3["CapturesThis"] = 16] = "CapturesThis";
        EmitFlags3[EmitFlags3["NoLeadingSourceMap"] = 32] = "NoLeadingSourceMap";
        EmitFlags3[EmitFlags3["NoTrailingSourceMap"] = 64] = "NoTrailingSourceMap";
        EmitFlags3[EmitFlags3["NoSourceMap"] = 96] = "NoSourceMap";
        EmitFlags3[EmitFlags3["NoNestedSourceMaps"] = 128] = "NoNestedSourceMaps";
        EmitFlags3[EmitFlags3["NoTokenLeadingSourceMaps"] = 256] = "NoTokenLeadingSourceMaps";
        EmitFlags3[EmitFlags3["NoTokenTrailingSourceMaps"] = 512] = "NoTokenTrailingSourceMaps";
        EmitFlags3[EmitFlags3["NoTokenSourceMaps"] = 768] = "NoTokenSourceMaps";
        EmitFlags3[EmitFlags3["NoLeadingComments"] = 1024] = "NoLeadingComments";
        EmitFlags3[EmitFlags3["NoTrailingComments"] = 2048] = "NoTrailingComments";
        EmitFlags3[EmitFlags3["NoComments"] = 3072] = "NoComments";
        EmitFlags3[EmitFlags3["NoNestedComments"] = 4096] = "NoNestedComments";
        EmitFlags3[EmitFlags3["HelperName"] = 8192] = "HelperName";
        EmitFlags3[EmitFlags3["ExportName"] = 16384] = "ExportName";
        EmitFlags3[EmitFlags3["LocalName"] = 32768] = "LocalName";
        EmitFlags3[EmitFlags3["InternalName"] = 65536] = "InternalName";
        EmitFlags3[EmitFlags3["Indented"] = 131072] = "Indented";
        EmitFlags3[EmitFlags3["NoIndentation"] = 262144] = "NoIndentation";
        EmitFlags3[EmitFlags3["AsyncFunctionBody"] = 524288] = "AsyncFunctionBody";
        EmitFlags3[EmitFlags3["ReuseTempVariableScope"] = 1048576] = "ReuseTempVariableScope";
        EmitFlags3[EmitFlags3["CustomPrologue"] = 2097152] = "CustomPrologue";
        EmitFlags3[EmitFlags3["NoHoisting"] = 4194304] = "NoHoisting";
        EmitFlags3[EmitFlags3["Iterator"] = 8388608] = "Iterator";
        EmitFlags3[EmitFlags3["NoAsciiEscaping"] = 16777216] = "NoAsciiEscaping";
        return EmitFlags3;
      })(EmitFlags || {});
      InternalEmitFlags = /* @__PURE__ */ ((InternalEmitFlags3) => {
        InternalEmitFlags3[InternalEmitFlags3["None"] = 0] = "None";
        InternalEmitFlags3[InternalEmitFlags3["TypeScriptClassWrapper"] = 1] = "TypeScriptClassWrapper";
        InternalEmitFlags3[InternalEmitFlags3["NeverApplyImportHelper"] = 2] = "NeverApplyImportHelper";
        InternalEmitFlags3[InternalEmitFlags3["IgnoreSourceNewlines"] = 4] = "IgnoreSourceNewlines";
        InternalEmitFlags3[InternalEmitFlags3["Immutable"] = 8] = "Immutable";
        InternalEmitFlags3[InternalEmitFlags3["IndirectCall"] = 16] = "IndirectCall";
        InternalEmitFlags3[InternalEmitFlags3["TransformPrivateStaticElements"] = 32] = "TransformPrivateStaticElements";
        return InternalEmitFlags3;
      })(InternalEmitFlags || {});
      ExternalEmitHelpers = /* @__PURE__ */ ((ExternalEmitHelpers2) => {
        ExternalEmitHelpers2[ExternalEmitHelpers2["Extends"] = 1] = "Extends";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Assign"] = 2] = "Assign";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Rest"] = 4] = "Rest";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Decorate"] = 8] = "Decorate";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ESDecorateAndRunInitializers"] = 8 /* Decorate */] = "ESDecorateAndRunInitializers";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Metadata"] = 16] = "Metadata";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Param"] = 32] = "Param";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Awaiter"] = 64] = "Awaiter";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Generator"] = 128] = "Generator";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Values"] = 256] = "Values";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Read"] = 512] = "Read";
        ExternalEmitHelpers2[ExternalEmitHelpers2["SpreadArray"] = 1024] = "SpreadArray";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Await"] = 2048] = "Await";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncGenerator"] = 4096] = "AsyncGenerator";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncDelegator"] = 8192] = "AsyncDelegator";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncValues"] = 16384] = "AsyncValues";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ExportStar"] = 32768] = "ExportStar";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ImportStar"] = 65536] = "ImportStar";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ImportDefault"] = 131072] = "ImportDefault";
        ExternalEmitHelpers2[ExternalEmitHelpers2["MakeTemplateObject"] = 262144] = "MakeTemplateObject";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ClassPrivateFieldGet"] = 524288] = "ClassPrivateFieldGet";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ClassPrivateFieldSet"] = 1048576] = "ClassPrivateFieldSet";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ClassPrivateFieldIn"] = 2097152] = "ClassPrivateFieldIn";
        ExternalEmitHelpers2[ExternalEmitHelpers2["CreateBinding"] = 4194304] = "CreateBinding";
        ExternalEmitHelpers2[ExternalEmitHelpers2["SetFunctionName"] = 8388608] = "SetFunctionName";
        ExternalEmitHelpers2[ExternalEmitHelpers2["PropKey"] = 16777216] = "PropKey";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AddDisposableResourceAndDisposeResources"] = 33554432] = "AddDisposableResourceAndDisposeResources";
        ExternalEmitHelpers2[ExternalEmitHelpers2["FirstEmitHelper"] = 1 /* Extends */] = "FirstEmitHelper";
        ExternalEmitHelpers2[ExternalEmitHelpers2["LastEmitHelper"] = 33554432 /* AddDisposableResourceAndDisposeResources */] = "LastEmitHelper";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ForOfIncludes"] = 256 /* Values */] = "ForOfIncludes";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ForAwaitOfIncludes"] = 16384 /* AsyncValues */] = "ForAwaitOfIncludes";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncGeneratorIncludes"] = 6144] = "AsyncGeneratorIncludes";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncDelegatorIncludes"] = 26624] = "AsyncDelegatorIncludes";
        ExternalEmitHelpers2[ExternalEmitHelpers2["SpreadIncludes"] = 1536] = "SpreadIncludes";
        return ExternalEmitHelpers2;
      })(ExternalEmitHelpers || {});
      EmitHint = /* @__PURE__ */ ((EmitHint6) => {
        EmitHint6[EmitHint6["SourceFile"] = 0] = "SourceFile";
        EmitHint6[EmitHint6["Expression"] = 1] = "Expression";
        EmitHint6[EmitHint6["IdentifierName"] = 2] = "IdentifierName";
        EmitHint6[EmitHint6["MappedTypeParameter"] = 3] = "MappedTypeParameter";
        EmitHint6[EmitHint6["Unspecified"] = 4] = "Unspecified";
        EmitHint6[EmitHint6["EmbeddedStatement"] = 5] = "EmbeddedStatement";
        EmitHint6[EmitHint6["JsxAttributeValue"] = 6] = "JsxAttributeValue";
        EmitHint6[EmitHint6["ImportTypeNodeAttributes"] = 7] = "ImportTypeNodeAttributes";
        return EmitHint6;
      })(EmitHint || {});
      OuterExpressionKinds = /* @__PURE__ */ ((OuterExpressionKinds2) => {
        OuterExpressionKinds2[OuterExpressionKinds2["Parentheses"] = 1] = "Parentheses";
        OuterExpressionKinds2[OuterExpressionKinds2["TypeAssertions"] = 2] = "TypeAssertions";
        OuterExpressionKinds2[OuterExpressionKinds2["NonNullAssertions"] = 4] = "NonNullAssertions";
        OuterExpressionKinds2[OuterExpressionKinds2["PartiallyEmittedExpressions"] = 8] = "PartiallyEmittedExpressions";
        OuterExpressionKinds2[OuterExpressionKinds2["Assertions"] = 6] = "Assertions";
        OuterExpressionKinds2[OuterExpressionKinds2["All"] = 15] = "All";
        OuterExpressionKinds2[OuterExpressionKinds2["ExcludeJSDocTypeAssertion"] = 16] = "ExcludeJSDocTypeAssertion";
        return OuterExpressionKinds2;
      })(OuterExpressionKinds || {});
      LexicalEnvironmentFlags = /* @__PURE__ */ ((LexicalEnvironmentFlags2) => {
        LexicalEnvironmentFlags2[LexicalEnvironmentFlags2["None"] = 0] = "None";
        LexicalEnvironmentFlags2[LexicalEnvironmentFlags2["InParameters"] = 1] = "InParameters";
        LexicalEnvironmentFlags2[LexicalEnvironmentFlags2["VariablesHoistedInParameters"] = 2] = "VariablesHoistedInParameters";
        return LexicalEnvironmentFlags2;
      })(LexicalEnvironmentFlags || {});
      BundleFileSectionKind = /* @__PURE__ */ ((BundleFileSectionKind2) => {
        BundleFileSectionKind2["Prologue"] = "prologue";
        BundleFileSectionKind2["EmitHelpers"] = "emitHelpers";
        BundleFileSectionKind2["NoDefaultLib"] = "no-default-lib";
        BundleFileSectionKind2["Reference"] = "reference";
        BundleFileSectionKind2["Type"] = "type";
        BundleFileSectionKind2["TypeResolutionModeRequire"] = "type-require";
        BundleFileSectionKind2["TypeResolutionModeImport"] = "type-import";
        BundleFileSectionKind2["Lib"] = "lib";
        BundleFileSectionKind2["Prepend"] = "prepend";
        BundleFileSectionKind2["Text"] = "text";
        BundleFileSectionKind2["Internal"] = "internal";
        return BundleFileSectionKind2;
      })(BundleFileSectionKind || {});
      ListFormat = /* @__PURE__ */ ((ListFormat2) => {
        ListFormat2[ListFormat2["None"] = 0] = "None";
        ListFormat2[ListFormat2["SingleLine"] = 0] = "SingleLine";
        ListFormat2[ListFormat2["MultiLine"] = 1] = "MultiLine";
        ListFormat2[ListFormat2["PreserveLines"] = 2] = "PreserveLines";
        ListFormat2[ListFormat2["LinesMask"] = 3] = "LinesMask";
        ListFormat2[ListFormat2["NotDelimited"] = 0] = "NotDelimited";
        ListFormat2[ListFormat2["BarDelimited"] = 4] = "BarDelimited";
        ListFormat2[ListFormat2["AmpersandDelimited"] = 8] = "AmpersandDelimited";
        ListFormat2[ListFormat2["CommaDelimited"] = 16] = "CommaDelimited";
        ListFormat2[ListFormat2["AsteriskDelimited"] = 32] = "AsteriskDelimited";
        ListFormat2[ListFormat2["DelimitersMask"] = 60] = "DelimitersMask";
        ListFormat2[ListFormat2["AllowTrailingComma"] = 64] = "AllowTrailingComma";
        ListFormat2[ListFormat2["Indented"] = 128] = "Indented";
        ListFormat2[ListFormat2["SpaceBetweenBraces"] = 256] = "SpaceBetweenBraces";
        ListFormat2[ListFormat2["SpaceBetweenSiblings"] = 512] = "SpaceBetweenSiblings";
        ListFormat2[ListFormat2["Braces"] = 1024] = "Braces";
        ListFormat2[ListFormat2["Parenthesis"] = 2048] = "Parenthesis";
        ListFormat2[ListFormat2["AngleBrackets"] = 4096] = "AngleBrackets";
        ListFormat2[ListFormat2["SquareBrackets"] = 8192] = "SquareBrackets";
        ListFormat2[ListFormat2["BracketsMask"] = 15360] = "BracketsMask";
        ListFormat2[ListFormat2["OptionalIfUndefined"] = 16384] = "OptionalIfUndefined";
        ListFormat2[ListFormat2["OptionalIfEmpty"] = 32768] = "OptionalIfEmpty";
        ListFormat2[ListFormat2["Optional"] = 49152] = "Optional";
        ListFormat2[ListFormat2["PreferNewLine"] = 65536] = "PreferNewLine";
        ListFormat2[ListFormat2["NoTrailingNewLine"] = 131072] = "NoTrailingNewLine";
        ListFormat2[ListFormat2["NoInterveningComments"] = 262144] = "NoInterveningComments";
        ListFormat2[ListFormat2["NoSpaceIfEmpty"] = 524288] = "NoSpaceIfEmpty";
        ListFormat2[ListFormat2["SingleElement"] = 1048576] = "SingleElement";
        ListFormat2[ListFormat2["SpaceAfterList"] = 2097152] = "SpaceAfterList";
        ListFormat2[ListFormat2["Modifiers"] = 2359808] = "Modifiers";
        ListFormat2[ListFormat2["HeritageClauses"] = 512] = "HeritageClauses";
        ListFormat2[ListFormat2["SingleLineTypeLiteralMembers"] = 768] = "SingleLineTypeLiteralMembers";
        ListFormat2[ListFormat2["MultiLineTypeLiteralMembers"] = 32897] = "MultiLineTypeLiteralMembers";
        ListFormat2[ListFormat2["SingleLineTupleTypeElements"] = 528] = "SingleLineTupleTypeElements";
        ListFormat2[ListFormat2["MultiLineTupleTypeElements"] = 657] = "MultiLineTupleTypeElements";
        ListFormat2[ListFormat2["UnionTypeConstituents"] = 516] = "UnionTypeConstituents";
        ListFormat2[ListFormat2["IntersectionTypeConstituents"] = 520] = "IntersectionTypeConstituents";
        ListFormat2[ListFormat2["ObjectBindingPatternElements"] = 525136] = "ObjectBindingPatternElements";
        ListFormat2[ListFormat2["ArrayBindingPatternElements"] = 524880] = "ArrayBindingPatternElements";
        ListFormat2[ListFormat2["ObjectLiteralExpressionProperties"] = 526226] = "ObjectLiteralExpressionProperties";
        ListFormat2[ListFormat2["ImportAttributes"] = 526226] = "ImportAttributes";
        ListFormat2[ListFormat2["ImportClauseEntries"] = 526226 /* ImportAttributes */] = "ImportClauseEntries";
        ListFormat2[ListFormat2["ArrayLiteralExpressionElements"] = 8914] = "ArrayLiteralExpressionElements";
        ListFormat2[ListFormat2["CommaListElements"] = 528] = "CommaListElements";
        ListFormat2[ListFormat2["CallExpressionArguments"] = 2576] = "CallExpressionArguments";
        ListFormat2[ListFormat2["NewExpressionArguments"] = 18960] = "NewExpressionArguments";
        ListFormat2[ListFormat2["TemplateExpressionSpans"] = 262144] = "TemplateExpressionSpans";
        ListFormat2[ListFormat2["SingleLineBlockStatements"] = 768] = "SingleLineBlockStatements";
        ListFormat2[ListFormat2["MultiLineBlockStatements"] = 129] = "MultiLineBlockStatements";
        ListFormat2[ListFormat2["VariableDeclarationList"] = 528] = "VariableDeclarationList";
        ListFormat2[ListFormat2["SingleLineFunctionBodyStatements"] = 768] = "SingleLineFunctionBodyStatements";
        ListFormat2[ListFormat2["MultiLineFunctionBodyStatements"] = 1 /* MultiLine */] = "MultiLineFunctionBodyStatements";
        ListFormat2[ListFormat2["ClassHeritageClauses"] = 0 /* SingleLine */] = "ClassHeritageClauses";
        ListFormat2[ListFormat2["ClassMembers"] = 129] = "ClassMembers";
        ListFormat2[ListFormat2["InterfaceMembers"] = 129] = "InterfaceMembers";
        ListFormat2[ListFormat2["EnumMembers"] = 145] = "EnumMembers";
        ListFormat2[ListFormat2["CaseBlockClauses"] = 129] = "CaseBlockClauses";
        ListFormat2[ListFormat2["NamedImportsOrExportsElements"] = 525136] = "NamedImportsOrExportsElements";
        ListFormat2[ListFormat2["JsxElementOrFragmentChildren"] = 262144] = "JsxElementOrFragmentChildren";
        ListFormat2[ListFormat2["JsxElementAttributes"] = 262656] = "JsxElementAttributes";
        ListFormat2[ListFormat2["CaseOrDefaultClauseStatements"] = 163969] = "CaseOrDefaultClauseStatements";
        ListFormat2[ListFormat2["HeritageClauseTypes"] = 528] = "HeritageClauseTypes";
        ListFormat2[ListFormat2["SourceFileStatements"] = 131073] = "SourceFileStatements";
        ListFormat2[ListFormat2["Decorators"] = 2146305] = "Decorators";
        ListFormat2[ListFormat2["TypeArguments"] = 53776] = "TypeArguments";
        ListFormat2[ListFormat2["TypeParameters"] = 53776] = "TypeParameters";
        ListFormat2[ListFormat2["Parameters"] = 2576] = "Parameters";
        ListFormat2[ListFormat2["IndexSignatureParameters"] = 8848] = "IndexSignatureParameters";
        ListFormat2[ListFormat2["JSDocComment"] = 33] = "JSDocComment";
        return ListFormat2;
      })(ListFormat || {});
      PragmaKindFlags = /* @__PURE__ */ ((PragmaKindFlags2) => {
        PragmaKindFlags2[PragmaKindFlags2["None"] = 0] = "None";
        PragmaKindFlags2[PragmaKindFlags2["TripleSlashXML"] = 1] = "TripleSlashXML";
        PragmaKindFlags2[PragmaKindFlags2["SingleLine"] = 2] = "SingleLine";
        PragmaKindFlags2[PragmaKindFlags2["MultiLine"] = 4] = "MultiLine";
        PragmaKindFlags2[PragmaKindFlags2["All"] = 7] = "All";
        PragmaKindFlags2[PragmaKindFlags2["Default"] = 7 /* All */] = "Default";
        return PragmaKindFlags2;
      })(PragmaKindFlags || {});
      commentPragmas = {
        "reference": {
          args: [
            { name: "types", optional: true, captureSpan: true },
            { name: "lib", optional: true, captureSpan: true },
            { name: "path", optional: true, captureSpan: true },
            { name: "no-default-lib", optional: true },
            { name: "resolution-mode", optional: true }
          ],
          kind: 1 /* TripleSlashXML */
        },
        "amd-dependency": {
          args: [{ name: "path" }, { name: "name", optional: true }],
          kind: 1 /* TripleSlashXML */
        },
        "amd-module": {
          args: [{ name: "name" }],
          kind: 1 /* TripleSlashXML */
        },
        "ts-check": {
          kind: 2 /* SingleLine */
        },
        "ts-nocheck": {
          kind: 2 /* SingleLine */
        },
        "jsx": {
          args: [{ name: "factory" }],
          kind: 4 /* MultiLine */
        },
        "jsxfrag": {
          args: [{ name: "factory" }],
          kind: 4 /* MultiLine */
        },
        "jsximportsource": {
          args: [{ name: "factory" }],
          kind: 4 /* MultiLine */
        },
        "jsxruntime": {
          args: [{ name: "factory" }],
          kind: 4 /* MultiLine */
        }
      };
      JSDocParsingMode = /* @__PURE__ */ ((JSDocParsingMode6) => {
        JSDocParsingMode6[JSDocParsingMode6["ParseAll"] = 0] = "ParseAll";
        JSDocParsingMode6[JSDocParsingMode6["ParseNone"] = 1] = "ParseNone";
        JSDocParsingMode6[JSDocParsingMode6["ParseForTypeErrors"] = 2] = "ParseForTypeErrors";
        JSDocParsingMode6[JSDocParsingMode6["ParseForTypeInfo"] = 3] = "ParseForTypeInfo";
        return JSDocParsingMode6;
      })(JSDocParsingMode || {});
    }
  });

  // src/compiler/sys.ts
  function generateDjb2Hash(data) {
    let acc = 5381;
    for (let i = 0; i < data.length; i++) {
      acc = (acc << 5) + acc + data.charCodeAt(i);
    }
    return acc.toString();
  }
  function setStackTraceLimit() {
    if (Error.stackTraceLimit < 100) {
      Error.stackTraceLimit = 100;
    }
  }
  function getModifiedTime(host, fileName) {
    return host.getModifiedTime(fileName) || missingFileModifiedTime;
  }
  function createPollingIntervalBasedLevels(levels) {
    return {
      [250 /* Low */]: levels.Low,
      [500 /* Medium */]: levels.Medium,
      [2e3 /* High */]: levels.High
    };
  }
  function setCustomPollingValues(system) {
    if (!system.getEnvironmentVariable) {
      return;
    }
    const pollingIntervalChanged = setCustomLevels("TSC_WATCH_POLLINGINTERVAL", PollingInterval);
    pollingChunkSize = getCustomPollingBasedLevels("TSC_WATCH_POLLINGCHUNKSIZE", defaultChunkLevels) || pollingChunkSize;
    unchangedPollThresholds = getCustomPollingBasedLevels("TSC_WATCH_UNCHANGEDPOLLTHRESHOLDS", defaultChunkLevels) || unchangedPollThresholds;
    function getLevel(envVar, level) {
      return system.getEnvironmentVariable(`${envVar}_${level.toUpperCase()}`);
    }
    function getCustomLevels(baseVariable) {
      let customLevels;
      setCustomLevel("Low");
      setCustomLevel("Medium");
      setCustomLevel("High");
      return customLevels;
      function setCustomLevel(level) {
        const customLevel = getLevel(baseVariable, level);
        if (customLevel) {
          (customLevels || (customLevels = {}))[level] = Number(customLevel);
        }
      }
    }
    function setCustomLevels(baseVariable, levels) {
      const customLevels = getCustomLevels(baseVariable);
      if (customLevels) {
        setLevel("Low");
        setLevel("Medium");
        setLevel("High");
        return true;
      }
      return false;
      function setLevel(level) {
        levels[level] = customLevels[level] || levels[level];
      }
    }
    function getCustomPollingBasedLevels(baseVariable, defaultLevels) {
      const customLevels = getCustomLevels(baseVariable);
      return (pollingIntervalChanged || customLevels) && createPollingIntervalBasedLevels(customLevels ? { ...defaultLevels, ...customLevels } : defaultLevels);
    }
  }
  function pollWatchedFileQueue(host, queue, pollIndex, chunkSize, callbackOnWatchFileStat) {
    let definedValueCopyToIndex = pollIndex;
    for (let canVisit = queue.length; chunkSize && canVisit; nextPollIndex(), canVisit--) {
      const watchedFile = queue[pollIndex];
      if (!watchedFile) {
        continue;
      } else if (watchedFile.isClosed) {
        queue[pollIndex] = void 0;
        continue;
      }
      chunkSize--;
      const fileChanged = onWatchedFileStat(watchedFile, getModifiedTime(host, watchedFile.fileName));
      if (watchedFile.isClosed) {
        queue[pollIndex] = void 0;
        continue;
      }
      callbackOnWatchFileStat == null ? void 0 : callbackOnWatchFileStat(watchedFile, pollIndex, fileChanged);
      if (queue[pollIndex]) {
        if (definedValueCopyToIndex < pollIndex) {
          queue[definedValueCopyToIndex] = watchedFile;
          queue[pollIndex] = void 0;
        }
        definedValueCopyToIndex++;
      }
    }
    return pollIndex;
    function nextPollIndex() {
      pollIndex++;
      if (pollIndex === queue.length) {
        if (definedValueCopyToIndex < pollIndex) {
          queue.length = definedValueCopyToIndex;
        }
        pollIndex = 0;
        definedValueCopyToIndex = 0;
      }
    }
  }
  function createDynamicPriorityPollingWatchFile(host) {
    const watchedFiles = [];
    const changedFilesInLastPoll = [];
    const lowPollingIntervalQueue = createPollingIntervalQueue(250 /* Low */);
    const mediumPollingIntervalQueue = createPollingIntervalQueue(500 /* Medium */);
    const highPollingIntervalQueue = createPollingIntervalQueue(2e3 /* High */);
    return watchFile2;
    function watchFile2(fileName, callback, defaultPollingInterval) {
      const file = {
        fileName,
        callback,
        unchangedPolls: 0,
        mtime: getModifiedTime(host, fileName)
      };
      watchedFiles.push(file);
      addToPollingIntervalQueue(file, defaultPollingInterval);
      return {
        close: () => {
          file.isClosed = true;
          unorderedRemoveItem(watchedFiles, file);
        }
      };
    }
    function createPollingIntervalQueue(pollingInterval) {
      const queue = [];
      queue.pollingInterval = pollingInterval;
      queue.pollIndex = 0;
      queue.pollScheduled = false;
      return queue;
    }
    function pollPollingIntervalQueue(_timeoutType, queue) {
      queue.pollIndex = pollQueue(queue, queue.pollingInterval, queue.pollIndex, pollingChunkSize[queue.pollingInterval]);
      if (queue.length) {
        scheduleNextPoll(queue.pollingInterval);
      } else {
        Debug.assert(queue.pollIndex === 0);
        queue.pollScheduled = false;
      }
    }
    function pollLowPollingIntervalQueue(_timeoutType, queue) {
      pollQueue(
        changedFilesInLastPoll,
        250 /* Low */,
        /*pollIndex*/
        0,
        changedFilesInLastPoll.length
      );
      pollPollingIntervalQueue(_timeoutType, queue);
      if (!queue.pollScheduled && changedFilesInLastPoll.length) {
        scheduleNextPoll(250 /* Low */);
      }
    }
    function pollQueue(queue, pollingInterval, pollIndex, chunkSize) {
      return pollWatchedFileQueue(
        host,
        queue,
        pollIndex,
        chunkSize,
        onWatchFileStat
      );
      function onWatchFileStat(watchedFile, pollIndex2, fileChanged) {
        if (fileChanged) {
          watchedFile.unchangedPolls = 0;
          if (queue !== changedFilesInLastPoll) {
            queue[pollIndex2] = void 0;
            addChangedFileToLowPollingIntervalQueue(watchedFile);
          }
        } else if (watchedFile.unchangedPolls !== unchangedPollThresholds[pollingInterval]) {
          watchedFile.unchangedPolls++;
        } else if (queue === changedFilesInLastPoll) {
          watchedFile.unchangedPolls = 1;
          queue[pollIndex2] = void 0;
          addToPollingIntervalQueue(watchedFile, 250 /* Low */);
        } else if (pollingInterval !== 2e3 /* High */) {
          watchedFile.unchangedPolls++;
          queue[pollIndex2] = void 0;
          addToPollingIntervalQueue(watchedFile, pollingInterval === 250 /* Low */ ? 500 /* Medium */ : 2e3 /* High */);
        }
      }
    }
    function pollingIntervalQueue(pollingInterval) {
      switch (pollingInterval) {
        case 250 /* Low */:
          return lowPollingIntervalQueue;
        case 500 /* Medium */:
          return mediumPollingIntervalQueue;
        case 2e3 /* High */:
          return highPollingIntervalQueue;
      }
    }
    function addToPollingIntervalQueue(file, pollingInterval) {
      pollingIntervalQueue(pollingInterval).push(file);
      scheduleNextPollIfNotAlreadyScheduled(pollingInterval);
    }
    function addChangedFileToLowPollingIntervalQueue(file) {
      changedFilesInLastPoll.push(file);
      scheduleNextPollIfNotAlreadyScheduled(250 /* Low */);
    }
    function scheduleNextPollIfNotAlreadyScheduled(pollingInterval) {
      if (!pollingIntervalQueue(pollingInterval).pollScheduled) {
        scheduleNextPoll(pollingInterval);
      }
    }
    function scheduleNextPoll(pollingInterval) {
      pollingIntervalQueue(pollingInterval).pollScheduled = host.setTimeout(pollingInterval === 250 /* Low */ ? pollLowPollingIntervalQueue : pollPollingIntervalQueue, pollingInterval, pollingInterval === 250 /* Low */ ? "pollLowPollingIntervalQueue" : "pollPollingIntervalQueue", pollingIntervalQueue(pollingInterval));
    }
  }
  function createUseFsEventsOnParentDirectoryWatchFile(fsWatch, useCaseSensitiveFileNames2, getModifiedTime3, fsWatchWithTimestamp) {
    const fileWatcherCallbacks = createMultiMap();
    const fileTimestamps = fsWatchWithTimestamp ? /* @__PURE__ */ new Map() : void 0;
    const dirWatchers = /* @__PURE__ */ new Map();
    const toCanonicalName = createGetCanonicalFileName(useCaseSensitiveFileNames2);
    return nonPollingWatchFile;
    function nonPollingWatchFile(fileName, callback, _pollingInterval, fallbackOptions) {
      const filePath = toCanonica